<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue js 高阶技巧指南（持续更新）</title>
      <link href="2021/06/29/vuejs/"/>
      <url>2021/06/29/vuejs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现在，Vue.js 已成为前端开发的热门框架。有很多工程师利用 Vue.js 的便利性和强大功能。但是，我们完成的某些解决方案可能未遵循最佳做法。今天本文就盘点一下那些鲜为人知的 Vue 技术。</p></blockquote><h1 id="路由器参数解耦"><a href="#路由器参数解耦" class="headerlink" title="路由器参数解耦"></a>路由器参数解耦</h1><p>相信这是大多数人处理组件中路由参数的方式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">getRouteParamsId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.$route.query.id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件内部使用 <code>$route</code> 会对某个 <code>URL</code> 产生强耦合，这限制了组件的灵活性。</p><p>正确的解决方案是向路由器添加 <code>props</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [&#123;</span><br><span class="line">        path: <span class="string">&#x27;/:id&#x27;</span>,</span><br><span class="line">        component: Component,</span><br><span class="line">        props: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样，组件可以直接从 <code>props</code> 获取 <code>id</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">getParamsId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，你还可以传入函数以返回自定义 <code>props</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [&#123;</span><br><span class="line">    path: <span class="string">&#x27;/:id&#x27;</span>,</span><br><span class="line">    component: Component,</span><br><span class="line">    props: <span class="function"><span class="params">router</span> =&gt;</span> (&#123; <span class="attr">id</span>: router.query.id &#125;)</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里参数涉及两种, 分别是路由的 <code>params</code> 和 <code>query</code>，需要注意区分</p><ul><li><p><code>params</code> 表示 <code>router</code> 对象下的 <code>params</code> 属性, 可以由 <code>props</code> 的回调函数内置参数访问, 参数名由 <code>path</code> 属性 <code>/:</code> 输入， 这里是 <code>id</code>, 也可以写成别的，在路由展示上是用 <code>/</code> 拼接在路由名后面, 例如: <a href="http://localhost:8080/test/9010903">http://localhost:8080/test/9010903</a></p></li><li><p><code>query</code> 则是表示 <code>router</code> 对象下的 <code>query</code> 属性, 也可以由 <code>props</code> 的回调函数内置参数访问, 参数可以在页面中操作 <code>router</code> 对象输入, 在路由展示上是用 <code>?</code> 拼接在路由末端, 例如: <a href="http://localhost:8080/test/9010903?name=ogliu">http://localhost:8080/test/9010903?name=ogliu</a></p></li></ul><p>如果两种参数一起使用，可如下配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    path: <span class="string">&#x27;test/:id&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/test.vue&#x27;</span>),</span><br><span class="line">    name: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    props: <span class="function"><span class="params">router</span> =&gt;</span> (&#123;</span><br><span class="line">        id: router.params.id,</span><br><span class="line">        name: router.query.name</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对应的页面就可以像这样获取参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前位置 test.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.id)    <span class="comment">// 假设当前路由为 http://localhost:8080/test/9010903?name=ogliu, 则会输出 9010903         </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)  <span class="comment">// 假设当前路由为 http://localhost:8080/test/9010903?name=ogliu, 则会输出 &#x27;ogliu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听多个变量"><a href="#监听多个变量" class="headerlink" title="监听多个变量"></a>监听多个变量</h1><p><code>watcher</code> 不能监听多个变量，但我们可以将目标组合在一起作为一个新的 <code>computed</code>，并监视这个新的 “变量”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg1: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">            msg2: <span class="string">&#x27;banana&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    compouted: &#123;</span><br><span class="line">        <span class="function"><span class="title">msgObj</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; msg1, msg2 &#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                msg1,</span><br><span class="line">                msg2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        msgObj: &#123;</span><br><span class="line">            <span class="function"><span class="title">handler</span>(<span class="params">newVal, oldVal</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (newVal.msg1 != oldVal.msg1) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;msg1 is change&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (newVal.msg2 != oldVal.msg2) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;msg2 is change&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            deep: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h1><p>函数组件 是无状态的(没有响应式数据)，没有生命周期或方法，因此无法实例化, 创建一个函数组件非常容易，你需要做的就是在 <code>SFC</code> 中添加一个 <code>functional: true</code> 属性，或者在模板中添加 <code>functional</code> 。由于它像函数一样轻巧，没有实例引用，所以渲染性能提高了不少, 函数组件依赖于上下文，并随着其中给定的数据而突变。</p><blockquote><p>下列示例与 vue 官方文档示例不同，它是基于 <code>vue-cli</code> 构建的项目写法，更贴近日常使用，也更适合新手学习</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test-components</span> <span class="attr">text</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test-components</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    testComponents: &#123;</span><br><span class="line"><span class="javascript">      functional: <span class="literal">true</span>,</span></span><br><span class="line">      props: &#123;</span><br><span class="line">        text: &#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">          required: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement, context</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>, context.props.text)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件生命周期-Hook"><a href="#组件生命周期-Hook" class="headerlink" title="组件生命周期 Hook"></a>组件生命周期 Hook</h1><p>通常，你可以像这样监听子组件的生命周期（例如 <code>mounted</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Child --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  mounted () &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$emit(<span class="string">&#x27;onMounted&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">onMounted</span>=<span class="string">&quot;handleOnMounted&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有另一种简单的解决方案，你可以改用 <code>@hook:mount</code> 在 <code>Vue</code> 内部系统中使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">hook:mounted</span>=<span class="string">&quot;handleOnMounted&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h1><p>在开发中修改第三方组件样式是很常见，但由于 <code>scoped</code> 属性的样式隔离，可能需要去除 <code>scoped</code> 或是另起一个 <code>style</code> 。这些做法都会带来副作用（组件样式污染、不够优雅），样式穿透在 <code>css</code> 预处理器中使用才生效。</p><p>我们可以使用 <code>&gt;&gt;&gt;</code> 或 <code>/deep/</code> 解决这一问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">外层 &gt;&gt;&gt; .el-checkbox &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  font-size: 26px;</span><br><span class="line"></span><br><span class="line">  .el-checkbox__label &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&#x2F;deep&#x2F; .el-checkbox &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  font-size: 26px;</span><br><span class="line"></span><br><span class="line">  .el-checkbox__label &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h1 id="事件参数-event"><a href="#事件参数-event" class="headerlink" title="事件参数 $event"></a>事件参数 $event</h1><p><code>$event</code> 是事件对象的特殊变量，在一些场景能给我们实现复杂功能提供更多可用的参数</p><h2 id="原生事件"><a href="#原生事件" class="headerlink" title="原生事件"></a>原生事件</h2><p>在原生事件中表现和默认的事件对象相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;inputHandler(&#x27;hello&#x27;, $event)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">inputHandler</span>(<span class="params">msg, e</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>在自定义事件中表现为捕获从子组件抛出的值</p><p><strong>my-item.vue:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">customEvent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;custom-event&#x27;</span>, <span class="string">&#x27;some value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>App.vue:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> @<span class="attr">custom-event</span>=<span class="string">&quot;customEvent(index, $event)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">customEvent</span>(<span class="params">index, e</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e) <span class="comment">// &#x27;some value&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="触发监听执行多个方法"><a href="#触发监听执行多个方法" class="headerlink" title="触发监听执行多个方法"></a>触发监听执行多个方法</h1><p>你可以传入回调数组，它们会被逐一调用，形式包括字符串、函数、对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        name: [</span><br><span class="line">            <span class="string">&#x27;sayName1&#x27;</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.sayName2()</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                handler: <span class="string">&#x27;sayName3&#x27;</span>,</span><br><span class="line">                immaediate: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">sayName1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;sayName1==&gt;&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">sayName2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;sayName2==&gt;&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">sayName3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;sayName3==&gt;&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Watch-中的引号"><a href="#Watch-中的引号" class="headerlink" title="Watch 中的引号"></a>Watch 中的引号</h1><blockquote><p>在 vuejs 项目中, 免不了使用 watch, 而在我们项目代码中经常看到 watch 监听的属性部分，有些有引号，有些没引号，甚至有些不用引号不行，官方文档没有详细说明这个引号的作用，所以很多人弄不清楚它又什么作用。</p></blockquote><p>对象具体属性的 <code>watch</code> 可以直接用引号把属性括起来，就可以实现对象中特定属性的监听事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   &#39;queryData.name&#39;: &#123;</span><br><span class="line">     handler: function() &#123;</span><br><span class="line">      &#x2F;&#x2F;do something</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，我们监听一个属性，不会使用到改变前后的值，只是为了执行一些方法，这时可以使用字符串代替</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    name:<span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">    name:<span class="string">&#x27;sayName&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 Web前端开发入坑指南</title>
      <link href="2021/06/25/QA/"/>
      <url>2021/06/25/QA/</url>
      
        <content type="html"><![CDATA[<h1 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h1><p>近日偶然间入了一个 <code>全栈架构师</code> 的微信群，可明明是 <code>全栈架构师</code> 的群，可里面讨论、交流的却是极度 <code>小白</code> 的问题，可能是群主推广的问题吧，经过几天的交流我发现，大家讨论的比较多的问题都与前端如何上手有关，对前端市场的不明确，对前端技术栈的迷茫等等，让我回想起多年前我刚步入前端开发的场景与心情，于是我决定，专门写一篇，前端从 0 到 1 相关问题的博文，以一个过来人的身份，来给大家做个引路人，希望大家不会像我从业一样 <code>山路十八弯</code>。</p><h1 id="Q-amp-A-（本文以问答形式来探讨前端问题，如有补充问题，可在评论区留下。）"><a href="#Q-amp-A-（本文以问答形式来探讨前端问题，如有补充问题，可在评论区留下。）" class="headerlink" title="Q &amp; A （本文以问答形式来探讨前端问题，如有补充问题，可在评论区留下。）"></a>Q &amp; A （本文以问答形式来探讨前端问题，如有补充问题，可在评论区留下。）</h1><blockquote><p>有些部分是针对对前端完全不了解的新人来讨论的，如果已经有所了解的同学可以直接跳过，文笔不好、原创码字，老鸟勿喷，谢谢！</p></blockquote><h3 id="问题-1：什么是前端？"><a href="#问题-1：什么是前端？" class="headerlink" title="问题 1：什么是前端？"></a>问题 1：什么是前端？</h3><p>什么是前端？前端的定位如何？ 首先得说说这个 <code>网站建设</code> / <code>Web开发</code>，顾名思义，就是做一个网站（最初是没有移动端、小程序的），大致流程如下：</p><ol><li>产品（老板）设计原型图（草稿），与客户洽谈；</li><li>谈妥了之后，设计师按照原型做设计图；</li><li>设计定稿了之后，设计图交由前端开发制作网页；</li><li>后端设计数据库，接口，与前端对接数据；</li><li>测试工程师测试网页或者功能是否正常满足预期；</li><li>项目上线发布；</li></ol><p>由此看出，<code>前端开发工程师</code>，是处于 <code>网站建设</code> 的一部分，一个项目，应该是由一个开发团队功能推进的，与之搭档的应该还有: 产品经理、设计师、后端开发工程师、测试工程师、运维工程师等，至此，你应该已经了解前端的基本定位，或许还不是很明确，我们继续说说前端与后端的区别:</p><ul><li>浏览器展示的网页，以及网页上的交互（特效）等等，由前端完成;</li><li>网页上的数据，举例: 登录的账号密码、商城的产品价格或库存等等，由后端数据库提供;</li><li>用大白话说就是前端负责展示，后端负责提供与维护数据，而前端从后端获取数据并展示出来则称为前后端对接；</li></ul><h3 id="问题-2-为什么很多公司招-H5-跟前端有什么区别吗？"><a href="#问题-2-为什么很多公司招-H5-跟前端有什么区别吗？" class="headerlink" title="问题 2: 为什么很多公司招 H5, 跟前端有什么区别吗？"></a>问题 2: 为什么很多公司招 H5, 跟前端有什么区别吗？</h3><p><code>H5</code> 即 <code>HTML 5</code> 是 <code>HTML</code> 的一个版本，是 <code>网页开发</code> 的一个基础语言，具有里程碑意义，在 <code>H5</code> 出现之前，还没有 <code>前端</code> 这个词汇，当时做网页开发的被称为 <code>网页制作</code>，俗称 <code>切图仔</code>， 而 <code>H5</code> 出现以后移动互联网同时也火了，因为移动端没有万恶的 <code>IE</code> 浏览器，对 <code>H5</code> 的支持非常好，所以被广泛的应用在移动端开发，所以很多招聘信息招移动端开发，都称为 招 <code>H5</code>，实际上这时候他们所说的 <code>H5</code> 已经是 <code>HTML 5</code>、 <code>CSS 3</code>、<code>javascript</code>的集合，而不是单纯的说 <code>HTML 5</code> 这一门语言。<code>H5</code> 是前端的一部分！</p><h3 id="问题-3-前端现状如何？"><a href="#问题-3-前端现状如何？" class="headerlink" title="问题 3 前端现状如何？"></a>问题 3 前端现状如何？</h3><ul><li>最初的 <code>网页制作</code> 后来发展成 <code>前端工程师</code>、甚至因为 <code>nodejs</code> 的出现，可扩展到 <code>全栈工程师</code>, 所以前端相较后端来说，发展上限更高；</li><li>技术更迭快, 技术面越来越广, 各种ES（JS）版本、各种构建工具、企业级框架，<code>混合APP</code>, <code>微信小程序</code>, 百花缭乱, 如果不明确发展路线, 很容易走弯路；</li><li>由于上一点，导致现在市面上的初级前端泛滥、中高级稀缺，大部分应届生出来干不了多久就 <code>迷路</code> 了, 能找回来的寥寥无几，能突破技术瓶颈上升高级工程师的更是少之又少；</li><li>合久必分，前端现在已经包罗万象，涉及面太广，技术栈量太大，所以必然会分流出几条发展路线。</li><li>如果能保持持续学习，并能理清楚自己的发展规划，无论哪条发展路线，前端的前景都是好的（目前薪资也是客观的），但是如果只是初级就很难找工作，因为门槛低。</li></ul><h3 id="问题-4：如何高效学习？"><a href="#问题-4：如何高效学习？" class="headerlink" title="问题 4：如何高效学习？"></a>问题 4：如何高效学习？</h3><ol><li><p>选择大于努力！</p><ul><li>理清楚技术栈，制定好学习路线，明确目的的学习</li></ul></li><li><p>费曼学习法</p><ul><li>教学式学习，将自己学到的东西尝试教给别人，同时自身加深印象，如果没有可以教得对象，可以写文章的形式来讲述，把未来看你文章的每个人都当成你的教学对象</li></ul></li><li><p>分类记忆</p><ul><li>举例：html标签太多，记不下来，我们分类记忆，块级元素有哪些、内联元素有哪些；</li></ul></li><li><p>刻意学习</p><ul><li>在学习一个知识点的时候，做好笔记梳理，以后在利用碎片时间，反复加深记忆，举例: 今天学习了一个知识点，并且做好了笔记，睡觉前、或者洗澡的时候或者任何其他脑子空闲的时候，刻意回想一下，今天学习的内容，如果想不起来，回头翻一下笔记，看看是忘记了哪一块，如此反复！</li></ul></li><li><p>项目中学习</p><ul><li>自主开发一个项目，一点一点的开发过程中，自己就会产生很多思考，有问题就上网查，解决问题的成就感会慢慢让你对编程产生兴趣，而兴趣是最好的老师。</li></ul></li><li><p>造轮子</p><ul><li>在没有独挡一面的能力时，那就找一个模仿对象，看别人怎么写，照着写，尝试理解别人为什么这么写。</li></ul></li></ol><h3 id="问题-5：是否应该参与培训机构？"><a href="#问题-5：是否应该参与培训机构？" class="headerlink" title="问题 5：是否应该参与培训机构？"></a>问题 5：是否应该参与培训机构？</h3><blockquote><p>关于这点，也就是我个人的思考，并非打击针对哪个培训机构，如果有被冒犯到，还请谅解！</p></blockquote><p>前端相较其他的专业来说，比较特殊，知识面广，量也就多，技术更迭也快，培训机构通常都是4个多月一个班期，而4个多月时间这个课程大纲怎么安排都是很难学好的，时间不够，而且因为要系统化培训，有很多技能可能工作用不上也会列入课程大纲内，所以往往出来的学员都是知道的多，能熟练运用的技能却少，也没有实战项目的经验，工作自然难找，4个月一批，一批，又一批，所以导致市面现在已经是初级泛滥，所以我的结论是，培训机构适合一些没有人引导、自己又完全没有接触过这个行业的新人是可以考虑去的，可以入门，而自己拎得清的且自律有决心自学的，完全可以利用互联网的力量，自学成才。</p><h3 id="问题-6：学习渠道"><a href="#问题-6：学习渠道" class="headerlink" title="问题 6：学习渠道"></a>问题 6：学习渠道</h3><ol><li><p>视频教学</p><ul><li><p><a href="https://www.bilibili.com/">哔哩哔哩</a><br>内容多、杂，但免费，如果会挑的话还是能找到一些不错的教程。</p></li><li><p><a href="https://class.imooc.com/">慕课网</a><br>程序员的梦工厂，专业的教学，分类明确，<code>免费视频</code> 可入门，<code>实战视频</code>（收费）积累实战经验，目前还有3门与前端相关的 <code>体系课程</code>，分别是 <code>前端工程师</code>，<code>大前端</code>，<code>Web前端架构师</code>，可根据自身情况考虑选择，收费较高，类似培训机构。</p></li></ul></li><li><p>各大程序员聚集的社区网站, 上面有很多优质的文章，以及系列课程。(排名不分先后)</p><ul><li><a href="https://www.zhihu.com/">知乎</a></li><li><a href="https://juejin.cn/">掘金</a></li><li><a href="https://www.jianshu.com/">简书</a></li><li><a href="https://segmentfault.com/">思否 / SegmentFault</a></li><li><a href="https://www.csdn.net/">CSDN</a></li><li>…</li></ul></li><li><p>官方文档，看文档比看视频来得更快，网上很多文章，或者教程都是基于官方文档衍生出来的，所以学习时应该详细的阅读对应的官方文档，举例：学 <code>vue</code> 就看 <code>vue</code> 的文档，反复看！</p></li><li><p><a href="https://github.com/">Github</a>，参考别人的项目源码，分析别人的代码，这需要一定的代码阅读能力。</p></li></ol><h3 id="问题-7：前端技术栈的分流？什么重点学，什么技术了解即可"><a href="#问题-7：前端技术栈的分流？什么重点学，什么技术了解即可" class="headerlink" title="问题 7：前端技术栈的分流？什么重点学，什么技术了解即可?"></a>问题 7：前端技术栈的分流？什么重点学，什么技术了解即可?</h3><ol><li><p>HTML、CSS，没什么好说的，这两项基础必须熟练掌握。</p></li><li><p>JavaScript / ECMAScript 6， 如果现在入坑前端，推荐直接从 <code>ES6</code> 起步，以免被 JavaScript（实际上是一个东西，版本不一样而已）的一些麻烦点给绕坑里，打击到信心，例如: 闭包、地狱回调、原型链等等，实际上这些坑大部分在新版本里已经有新的 <code>语法糖</code> 或是 <code>API</code>  或是其他新特性给解决了，新人应该以快速上手工作为主，直接学习 <code>ES6</code>，工作之后再慢慢回头看这些问题，提升编程思想。关于 <code>JavaScript</code> 和 <code>ECMAScript</code> 之间的关系如果还不是很清楚的同学，可以参考 <code>阮一峰</code> 老师的 <a href="https://es6.ruanyifeng.com/#docs/intro">《ECMAScript 6 入门》</a> 一书中的 <code>ECMAScript 6 简介</code>。</p></li><li><p>jQuey 了解即可，现阶段还用 jQuery 的公司，应该是讲求效率要快，而且项目对性能要求并不高，因为 jQuery 插件库庞大，现成的插件多，可以拆箱即用，正常情况下，jQuery 因为没有模块化，已经逐渐被淘汰了。</p></li><li><p>框架, 三选一，推荐 <code>Vue</code>，轻量级、社区活跃，上手相对容易很多，其次推荐 <code>React</code>，学好其中一种框架以及涉及的核心插件，例如：vue-router、vuex等，既可找到对应技术栈的公司工作。搭配学习的还有主流的 UI 框架，框架的脚手架配置最好也做一些了解。</p><ul><li>Vue</li><li>React</li><li>Angela</li></ul></li><li><p>工程化构建工具，有很多种，这里只列出相对流行的几种，新手选择一种学习即可，推荐 <code>Webpack</code>，如果对项目工程化感兴趣，可以深入学习，向 <code>前端架构师</code> 方向发展。</p><ul><li>Webpack</li><li>Gulp</li><li>Grunt</li><li>Browserify</li></ul></li><li><p>nodejs，新手入门建议了解即可，基础牢固稳定之后可以扩展学习，向 <code>全栈</code> 尝试。</p></li><li><p>微信小程序、公众号，建议要么专攻要么放弃，如果专攻 <code>微信开发</code>，上述内容都可以暂时不学，关联性不大。</p></li><li><p>React Native，移动端开发的重磅框架，与其类似的框架还有很多，如果专攻 <code>移动端开发</code> 的同学，可以根据实际情况选择性的学习.</p></li></ol><p><strong>上述内容, 我们可以分析得出结论: 当前的 <code>大前端时代</code>, 至少有以下几个方向可以发展:</strong></p><ol><li>业务型前端工程师，比较初级，会基础、会用框架写业务代码即可，入门首选。</li><li>全栈工程师，前后端通吃。</li><li>前端架构师，主攻性能提升，底层架构。</li><li>微信开发</li><li>移动端开发</li></ol><p><strong>发展规划选择有以下几种，数字对应上文序号:</strong></p><ul><li>1 &gt; 2 &gt; 3 按顺序逐步升级</li><li>5 &gt; 4</li><li>4</li><li>5</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>彻底告别 Cannot read property *** of undefined</title>
      <link href="2021/05/26/OptionalChaining/"/>
      <url>2021/05/26/OptionalChaining/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你是否也经常被下面这种报错整得抓狂？</p><ul><li>“TypeError: Cannot read property *** of undefined”</li><li>“TypeError: Cannot read property *** of null”</li></ul><p>通常这种报错，在控制台打印的都是堆栈信息，往往很难定位到具体位置，而且这种报错信息是很容易复发的，所以我们要经常脑神费心的去一次又一次的解决这个问题，这是一个前端通病大家都会遇到，今天这篇文章的主题就是找一个方法来完美解决这个问题！</p><h1 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h1><p>先看一段代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = message.body.user.firstName;</span><br></pre></td></tr></table></figure><ul><li>假设 <code>message</code> 下面并没有 <code>body</code>，那么就会报错: <code>Cannot read property user of undefined</code></li><li>假设 <code>message</code> 下面有 <code>body</code> 但是值为 <code>null</code>，那么就会报错: <code>Cannot read property user of null</code></li><li>同理假设 <code>meseage.body</code> 没问题，但是 <code>user</code> 没有定义或者值为 <code>null</code> 会报错 <code>Cannot read property firstName of undefined/null</code></li></ul><p>日常开发中，前端通过接口获取后端数据后，往往都会出现这样的赋值，而后端如果不严格按照报文来返回数据结构，就会出现这种问题！</p><p>比如: 后端觉得 <code>user</code> 下面只有 <code>firstName</code> 一个属性，如果 <code>firstName</code> 有值，那就完整返回，如果没有值，直接连 <code>user</code> 这一层都去掉不返回。</p><ul><li>当 <code>firstName</code> 有值时返回数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;body&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;firstName&quot;</span>: <span class="string">&quot;Liu&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 <code>firstName</code> 没有值时返回数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;body&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="传统解决方案"><a href="#传统解决方案" class="headerlink" title="传统解决方案"></a>传统解决方案</h1><p>所以我们如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。安全的写法是写成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">const</span> firstName = (message</span><br><span class="line">  &amp;&amp; message.body</span><br><span class="line">  &amp;&amp; message.body.user</span><br><span class="line">  &amp;&amp; message.body.user.firstName) || <span class="string">&#x27;default&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面例子中，<code>firstName</code> 属性在对象的第四层，所以需要判断四次，每一层是否有值，非常的繁琐且有失优雅，而且经常是在前后端联调的时候是有值的，我们就直接赋值漏了判断也没问题<code>（很容易忘记写判断，这也是为什么这个问题很容易复发的原因）</code>，但是等到上线之后，数据变成没有值了，后端返回的数据结构变动了，所以导致报错，而且还不容易定位具体位置，很难排查，所以我们希望后端就算没有值，也保留数据结构，返回完整的报文结构, 没有值就约定一个 <code>空字符串</code> 或者 <code>null</code>，这样就不需要一层一层去判断，比如这样:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;body&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;firstName&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链判断运算符"><a href="#链判断运算符" class="headerlink" title="链判断运算符"></a>链判断运算符</h1><p>上面两种解决方案，第一种层层判断非常麻烦、不够优雅、容易遗忘，第二种后端报文基于框架原因或者个人习惯原因，数据结构也不可控，即使可控也麻烦且不安全，因此 <code>ES2020</code> 引入了 <code>链判断运算符</code>（optional chaining operator）<code>?.</code>，简化上面的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = message?.body?.user?.firstName</span><br></pre></td></tr></table></figure><p>上面代码使用了 <code>?.</code> 运算符，直接在链式调用的时候判断，左侧的对象是否为 <code>null</code> 或 <code>undefined</code>。如果是的，就不再往下运算 <code>（短路机制）</code>，而是返回 <code>undefined</code>。下面是判断对象方法是否存在，如果存在就立即执行的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iterator.return?.()</span><br></pre></td></tr></table></figure><p>上面代码中，<code>iterator.return</code> 如果有定义，就会调用该方法，否则 <code>iterator.return</code> 直接返回 <code>undefined</code>，不再执行 <code>?.</code> 后面的部分。</p><h1 id="如何在-vue-项目中应用这种新语法"><a href="#如何在-vue-项目中应用这种新语法" class="headerlink" title="如何在 vue 项目中应用这种新语法"></a>如何在 vue 项目中应用这种新语法</h1><blockquote><p>在 <code>vue 3.0</code> 后可以直接使用 <code>链判断运算符(?.)</code> 语法, 否则就要借助 <code>babel</code> 插件解析帮助我们进行代码转换。</p></blockquote><p>由于 <code>vue 3.0</code> 还没有普及，我们还是有必要研究一下如何使用插件提供语法支持:</p><ul><li>插件名称 <a href="https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining">@babel/plugin-proposal-optional-chaining</a></li><li>文档地址 <a href="https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining">https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining</a></li></ul><h2 id="升级-babel"><a href="#升级-babel" class="headerlink" title="升级 babel"></a>升级 babel</h2><p><code>vue-cli</code> 搭建的项目中，<code>babel</code> 版本默认是小于 <code>7</code> 的，为了使用 <code>@babel/plugin-proposal-optional-chaining</code>， 我们需要先将 <code>babel</code> 升级到 <code>7</code>，官方提供了一个工具 <code>babel-upgrade</code>, 对于已有项目，只需要运行一行命令就可以升级到 <code>7</code> 版本以上了，如果找不到 <code>npx</code> 命令就检查一下 <code>npm</code> 版本是否 &lt; <code>5.2.0</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel-upgrade --write --install  </span><br></pre></td></tr></table></figure><h2 id="兼容版本"><a href="#兼容版本" class="headerlink" title="兼容版本"></a>兼容版本</h2><p>升级完之后运行项目可能会出现一些报错信息:</p><ul><li>Cannot find module ‘babel-plugin-syntax-jsx’</li><li>Cannot find module ‘@babel/core’</li></ul><p>根据报错信息，我们稍作调整，将 <code>@babel/plugin-syntax-jsx</code> 卸载，更换成 <code>babel-plugin-syntax-jsx</code>，再安装一个 <code>@babel/runtime-corejs2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall @babel/plugin-syntax-jsx </span><br><span class="line">npm install babel-plugin-syntax-jsx --save-dev</span><br><span class="line"></span><br><span class="line">npm install --save @babel/runtime-corejs2 -dev</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>最后在 <code>.babelrc</code> 文件中注入插件, 在 <code>plugins</code> 数组中 插入 <code>&quot;@babel/plugin-proposal-optional-chaining&quot;</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;targets&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;browsers&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;&gt; 1%&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;last 2 versions&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;not ie &lt;= 8&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">        <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;transform-vue-jsx&quot;</span>,</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;corejs&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;@babel/plugin-syntax-dynamic-import&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-syntax-import-meta&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-json-strings&quot;</span>,</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;legacy&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-function-sent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-export-namespace-from&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-numeric-separator&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-throw-expressions&quot;</span>, </span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-optional-chaining&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>完成上述步骤之后，不要忘记重启项目，通常配置文件有改动都需要重启项目才生效，然后就可以愉快的使用 <code>链判断运算符(?.)</code> 语法了，正式告别那些一层一层的判断，还有反复出现的 <code>&quot;TypeError: Cannot read property *** of undefined/null&quot;</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES2020 </tag>
            
            <tag> Babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 模块化规范全面解读</title>
      <link href="2021/03/25/commonjs-ES6/"/>
      <url>2021/03/25/commonjs-ES6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>CommonJS 听说过？AMD 听说过，CMD也听说过，还有个ES6 模块化。当项目里使用的时候，我们是否真正知道，你用的到底基于哪个规范的模块化？</p></blockquote><p>Ps: 由于文章太长，为了方便阅读，建议先看右侧文章目录，了解大纲之后逐步阅读。</p><h2 id="第一章-追溯根源，为何前端需要模块化？"><a href="#第一章-追溯根源，为何前端需要模块化？" class="headerlink" title="第一章: 追溯根源，为何前端需要模块化？"></a>第一章: 追溯根源，为何前端需要模块化？</h2><p><strong>为了彻底弄清楚模块化这个东西，我们要从最开始模块化的起源说起。</strong></p><h3 id="无模块化的原始时代"><a href="#无模块化的原始时代" class="headerlink" title="无模块化的原始时代"></a>无模块化的原始时代</h3><p>最开始 <code>js</code> 只是作为一个脚本语言来使用，做一些简单的表单校验，动画实现等等。 代码都是这样的,直接把代码写进 <code>&lt;script&gt;</code> 标签里，代码量非常少。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>).onClick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="代码量剧增带来的灾难性问题"><a href="#代码量剧增带来的灾难性问题" class="headerlink" title="代码量剧增带来的灾难性问题"></a>代码量剧增带来的灾难性问题</h3><blockquote><p>后来随着ajax异步请求的出现，前端能做的事情越来越多，代码量飞速增长。 也暴露出了一些问题。</p></blockquote><p><strong>全局变量的灾难</strong></p><p>这个非常好理解，就是大家的代码都在一个作用域，不同的人定义的变量可能会重复从而产生覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;LiuKun&#x27;</span>;</span><br><span class="line"></span><br><span class="line">name =  <span class="string">&#x27;ithhx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(name === <span class="string">&#x27;LiuKun&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>依赖关系管理的灾难</strong></p><p>如果 c 依赖了 b，b 依赖了 c，则 script 引入的顺序必须被依赖的放在前面，试想要是有几十个文件，我们都要弄清楚文件依赖关系然后手动，按顺序引入，无疑这是非常痛苦的事情。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;a.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;b.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;c.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="早期的解决方式"><a href="#早期的解决方式" class="headerlink" title="早期的解决方式"></a>早期的解决方式</h3><ul><li>闭包，使 <code>function</code> 内部的变量对全局隐藏，达到了封装的目的，但是最外层模块名还是暴露在全局，要是模快越来越多，依然会存在模块名冲突的问题。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a,b;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      add: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> a + b + c;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><ul><li>命名空间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.tools.module.add = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> app.tools.moduleA.a + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>毫无疑问以上两种方法都不够优雅。那么，模块化到底需要解决什么问题提呢？我们先设想一下可能有以下几点:</strong></p><ul><li>安全的包装一个模块的代码，避免全局污染</li><li>唯一标识一个模块</li><li>优雅的将模块api暴露出去</li><li>方便的使用模块</li></ul><h2 id="第二章-服务端模块化-CommonJS"><a href="#第二章-服务端模块化-CommonJS" class="headerlink" title="第二章: 服务端模块化 CommonJS"></a>第二章: 服务端模块化 CommonJS</h2><blockquote><p>Nodejs 出现开创了一个新的纪元，使得我们可以使用 javascript 写服务器代码，对于服务端而言必然是需要模块化的。</p></blockquote><h3 id="Nodejs-和-CommonJS-的关系"><a href="#Nodejs-和-CommonJS-的关系" class="headerlink" title="Nodejs 和 CommonJS 的关系"></a>Nodejs 和 CommonJS 的关系</h3><ul><li><code>Nodejs</code> 的模块化能一种成熟的姿态出现离不开 <code>CommonJS</code> 的规范的影响</li><li>在服务器端 <code>CommonJS</code> 能以一种寻常的姿态写进各个公司的项目代码中，离不开 <code>Nodejs</code> 的优异表现</li><li><code>Nodejs</code> 并非完全按照规范实现，针对模块规范进行了一定的取舍，同时也增加了少许自身特性</li></ul><h3 id="CommonJS-规范简介"><a href="#CommonJS-规范简介" class="headerlink" title="CommonJS 规范简介"></a>CommonJS 规范简介</h3><blockquote><p>CommonJS 对模块的定义非常简单，主要分为 <code>模块引用</code>，<code>模块定义</code> 和 <code>模块标识</code> 3 部分</p></blockquote><h4 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;./add.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">&#x27;config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在一个文件中引入模块并导出另一个模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;./add.js&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports.increment = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add(val, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可能会疑惑，并没有定义 module，require 这两个属性是怎么来的呢？ 其实，一个文件代表一个模块，一个模块除了自己的函数作用域之外，最外层还有一个模块作用域，module 就是代表这个模块，exports 是 module 的属性。require 也在这个模块的上下文中，用来引入外部模块。</p><h4 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h4><p>模块标识就是 <code>require()</code> 函数的参数，规范是这样的：</p><ul><li>必须是字符串</li><li>可以是以./ ../开头的相对路径</li><li>可以是绝对路径</li><li>可以省略后缀名</li></ul><blockquote><p>CommonJS 的模块规范定义比较简单，意义在于将类聚的方法和变量等限定在私有的作用域中，同时支持引入和导出将上下游模块无缝衔接，每个模块具有独立的空间，它们互不干扰。</p></blockquote><h3 id="Nodejs-的模块化实现"><a href="#Nodejs-的模块化实现" class="headerlink" title="Nodejs 的模块化实现"></a>Nodejs 的模块化实现</h3><blockquote><p>Node 中一个文件是一个 模块（Module）的实例</p></blockquote><p><strong>Node 中 Module 构造函数：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Module</span>（<span class="title">id</span>, <span class="title">parent</span>）</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.id = id;</span><br><span class="line">  <span class="built_in">this</span>.exports = &#123;&#125;;</span><br><span class="line">  <span class="built_in">this</span>.parent = parent;</span><br><span class="line">  <span class="keyword">if</span>(parent &amp;&amp; parent.children) &#123;</span><br><span class="line">    parent.children.push(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.filename = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.loaded = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">this</span>.children = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个模块</span></span><br><span class="line"> <span class="keyword">var</span> <span class="built_in">module</span> = <span class="keyword">new</span> Module(filename, parent);</span><br></pre></td></tr></table></figure><p>其中 id 是模块 id，exports 是这个模块要暴露出来的 api，parent 是父级模块，loaded 表示这个模块是否加载完成，因为 CommonJS 是运行时加载，loaded 表示文件是否已经执行完毕返回一个对象。</p><h3 id="Node-模块分类"><a href="#Node-模块分类" class="headerlink" title="Node 模块分类"></a>Node 模块分类</h3><p>如图所示 Node 模块一般分为两种，<code>核心模块</code> 和 <code>文件模块</code>。<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210325173053.png"></p><ul><li><p>核心模块，就是 <code>Node</code> 内置的模块，比如 <code>http</code>、<code>path</code> 等。在 <code>Node</code> 的源码的编译时，核心模块就一起被编译进了二进制执行文件，部分核心模块(内建模块) 被直接加载进内存中。</p></li><li><p>文件模块，就是外部引入的模块如 <code>node_modules</code> 里通过 <code>npm</code> 安装的模块，或者我们项目工程里自己写的一个 <code>js</code> 文件或者 <code>json</code> 文件。</p></li></ul><p>在Node模块的引入过程中，一般要经过一下三个步骤</p><ul><li>路径分析</li><li>文件定位</li><li>编译执行</li></ul><p><strong>核心模块会省略文件定位和编译执行这两步，并且在路径分析中会优先判断，加载速度比一般模块更快。</strong></p><h3 id="require-是如何分析路径，文件定位并且编译执行的？"><a href="#require-是如何分析路径，文件定位并且编译执行的？" class="headerlink" title="require 是如何分析路径，文件定位并且编译执行的？"></a>require 是如何分析路径，文件定位并且编译执行的？</h3><h4 id="路径分析"><a href="#路径分析" class="headerlink" title="路径分析"></a>路径分析</h4><p>前面已经说过，不论核心模块还是文件模块都需要经历路径分析这一步，当我们 <code>require</code> 一个模块的时候，<code>Node</code> 是怎么区分是 <code>核心模块</code> 还是 <code>文件模块</code>，并且进行查找定位呢？</p><p>Node支持如下几种形式的模块标识符，来引入模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心模块</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件模块</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">// 以.开头的相对路径，（可以不带扩展名）</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 以..开头的相对路径，（可以不带扩展名）</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;../b.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以/开始的绝对路径，（可以不带扩展名）</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;/c.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部模块名称</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部模块某一个文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;codemirror/addon/merge/merge.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>那么对于这个都是字符串的引入方式， <code>Node</code> 会优先去内存中查找匹配 <code>核心模块</code>，如果匹配成功便不会再继续查找</p><ol><li>比如 <code>require</code>, <code>http</code> 模块的时候，会优先从 <code>核心模块</code> 里去成功匹配, 如果 <code>核心模块</code> 没有匹配成功，便归类为 <code>文件模块</code>;</li><li>以 <code>.</code>、<code>..</code> 和 <code>/</code> 开头的标识符，<code>require</code> 都会根据当前文件路径将这个相对路径或者绝对路径转化为真实路径，也就是我们平时最常见的一种路径解析;</li><li>非路径形式的文件模块, 如上面的 <code>express</code> 和 <code>codemirror/addon/merge/merge.js</code>，这种模块是一种特殊的文件模块，一般称为 <code>自定义模块</code>。 <code>自定义模块</code> 的查找最费时，因为对于自定义模块有一个模块路径，<code>Node</code> 会根据这个模块路径依次递归查找。</li></ol><p><strong>模块路径</strong><br><code>Node</code> 的模块路径是一个数组，模块路径存放在 <code>module.paths</code> 属性上。 我们可以找一个基于 <code>npm</code> 或者 <code>yarn</code> 管理项目，在根目录下创建一个<code>test.js</code> 文件，内容为 <code>console.log(module.paths)</code>, 如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.paths);</span><br></pre></td></tr></table></figure><p>然后在根目录下用 <code>Node</code> 执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br></pre></td></tr></table></figure><p>可以看到我们已经将模块路径打印出来<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210325174616.png"></p><p>模块路径的生成规则如下：</p><ul><li>当前路文件下的 node_modules 目录</li><li>父目录下的 node_modules 目录</li><li>父目录的父目录下的 node_modules 目录</li><li>沿路径向上逐级递归，直到根目录下的 node_modules 目录</li></ul><p>对于自定义文件比如 <code>express</code>，就会根据模块路径依次递归查找，在查找同时并进行文件定位。</p><h4 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h4><ul><li><p><strong>扩展名分析</strong>，我们在使用 require 的时候有时候会省略扩展名，那么 Node 怎么定位到具体的文件呢？这种情况下，Node 会依次按照.js、.json、.node 的次序一次匹配。（.node是C++扩展文件编译之后生成的文件），若扩展名匹配失败，则会将其当成一个包来处理，我这里直接理解为 npm 包。</p></li><li><p><strong>包处理</strong>，对于包 Node 会首先在当前包目录下查找 <code>package.json</code>（CommonJS包规范）通过 <code>JSON.parse()</code> 解析出包描述对象，根据 <code>main</code> 属性指定的入口文件名进行下一步定位。 如果文件缺少扩展名，将根据扩展名分析规则定位。 若 <code>main</code> 指定文件名错误或者压根没有 <code>package.json</code>，Node 会将包目录下的 index 当做默认文件名。 再依次匹配 index.js、index.json、index.node。 若以上步骤都没有定位成功将进入下一个模块路径，父目录下的 <code>node_modules</code> 目录下查找，直到查找到根目录下的 <code>node_modules</code>，若都没有定位到，将抛出查找失败的异常。</p></li></ul><h4 id="模块编译"><a href="#模块编译" class="headerlink" title="模块编译"></a>模块编译</h4><ul><li>.js 文件, 通过 <code>fs</code> 模块同步读取文件后编译执行</li><li>.node 文件, 用 C/C++ 编写的扩展文件，通过 <code>dlopen()</code> 方法加载最后编译生成的文件。</li><li>.json, 通过 <code>fs</code> 模块同步读取文件后，用 <code>JSON.parse()</code> 解析返回结果。</li><li>其余扩展名文件。它们都是被当做 <code>.js</code> 文件载入。</li></ul><blockquote><p>每一个编译成功的文件都会将其文件路径作为索引缓存在 <code>Module._cache</code> 对象上，以提高二次引入的性能。</p></blockquote><p><strong>我们还知道 Node 的每个模块中都有 <code>__filename</code>、 <code>__dirname</code> 这两个变量，是怎么来的的呢？</strong></p><ul><li>其实JavaScript模块在编译过程中，Node 对获取的 JavaScript 文件内容进行了头部和尾部的包装。在头部添加了<code>（function （exports， require， module，__filename, __dirname）&#123;</code>，而在尾部添加了 <code>&#125;)</code>; 。</li></ul><p>因此一个JS模块经过编译之后会被包装成下面的样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="built_in">module</span>, __filename, __dirname</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>) ;</span><br><span class="line">  <span class="built_in">exports</span>.method = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>)</span>&#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="第三章：前端模块化"><a href="#第三章：前端模块化" class="headerlink" title="第三章：前端模块化"></a>第三章：前端模块化</h2><p>前面我们所说的CommonJS规范，都是基于node来说的，所以前面说的CommonJS都是针对服务端的实现。</p><h3 id="前端模块化和服务端模块化有什么区别？"><a href="#前端模块化和服务端模块化有什么区别？" class="headerlink" title="前端模块化和服务端模块化有什么区别？"></a>前端模块化和服务端模块化有什么区别？</h3><ul><li>服务端加载一个模块，直接就从硬盘或者内存中读取了，消耗时间可以忽略不计</li><li>浏览器需要从服务端下载这个文件，所以说如果用 <code>CommonJS</code> 的 <code>require</code> 方式加载模块，需要等代码模块下载完毕，并运行之后才能得到所需要的 <code>API</code>。</li></ul><h3 id="为什么CommonJS不适用于前端模块？"><a href="#为什么CommonJS不适用于前端模块？" class="headerlink" title="为什么CommonJS不适用于前端模块？"></a>为什么CommonJS不适用于前端模块？</h3><p>如果我们在某个代码模块里使用 <code>CommonJS</code> 的方法 <code>require</code> 了一个模块，而这个模块需要通过 <code>http</code> 请求从服务器去取，如果网速很慢，而 <code>CommonJS</code> 又是同步的，所以将阻塞后面代码的执行，从而阻塞浏览器渲染页面，使得页面出现假死状态。</p><p>因此后面 <code>AMD规范</code> 随着 <code>RequireJS</code> 的推广被提出，异步模块加载，不阻塞后面代码执行的模块引入方式，就是解决了前端模块异步模块加载的问题。</p><h3 id="AMD-Asynchronous-Module-Definition-amp-RequireJS"><a href="#AMD-Asynchronous-Module-Definition-amp-RequireJS" class="headerlink" title="AMD(Asynchronous Module Definition) &amp; RequireJS"></a>AMD(Asynchronous Module Definition) &amp; RequireJS</h3><p><strong>AMD</strong> <code>异步模块加载规范</code> 与 <code>CommonJS</code> 的主要区别就是异步模块加载，就是模块加载过程中即使 <code>require</code> 的模块还没有获取到，也不会影响后面代码的执行。</p><p><strong>RequireJS</strong> <code>AMD</code> 规范的实现。其实也可以说 <code>AMD</code> 是 <code>RequireJS</code> 在推广过程中对模块定义的规范化产出。</p><h4 id="模块定义-1"><a href="#模块定义-1" class="headerlink" title="模块定义"></a>模块定义</h4><ul><li>独立模块的定义，不依赖其它模块的模块定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//独立模块定义</span></span><br><span class="line">define(&#123;</span><br><span class="line">  method1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  method2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    method1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    method2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);      </span><br></pre></td></tr></table></figure><ul><li>非独立模块，依赖其他模块的模块定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;graph&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">math, graph</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="模块引用-1"><a href="#模块引用-1" class="headerlink" title="模块引用"></a>模块引用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  a.method();</span><br><span class="line">  b.method();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="CommonJS-和-AMD-的对比"><a href="#CommonJS-和-AMD-的对比" class="headerlink" title="CommonJS 和 AMD 的对比"></a>CommonJS 和 AMD 的对比</h3><ul><li>CommonJS 一般用于服务端，AMD 一般用于浏览器客户端</li><li>CommonJS 和 AMD 都是运行时加载</li></ul><h3 id="什么是运行时加载？"><a href="#什么是运行时加载？" class="headerlink" title="什么是运行时加载？"></a>什么是运行时加载？</h3><p>我觉得要从两个点上去理解：</p><ul><li>CommonJS 和 AMD 模块都只能在运行时确定模块之间的依赖关系</li><li>require 一个模块的时候，模块会先被执行，并返回一个对象，并且这个对象是整体加载的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CommonJS 模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; basename, dirname, parse &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> _path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> basename = _path.basename, dirname = _path.dirname, parse = _path.parse;</span><br></pre></td></tr></table></figure><p>上面代码实质是整体加载 path 模块，即加载了 path 所有方法，生成一个对象，然后再从这个对象上面读取3个方法。这种加载就称为 <code>运行时加载</code>。</p><p>再看下面一个AMD的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a.js执行&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;hello, a.js&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;a&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;b.js 执行&#x27;</span>);</span><br><span class="line">  a.hello();</span><br><span class="line">  $(<span class="string">&#x27;#b&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    b.hello();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行 b.js 时得到结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js执行</span></span><br><span class="line"><span class="comment">//b.js执行</span></span><br><span class="line"><span class="comment">//hello, a.js</span></span><br></pre></td></tr></table></figure><p>可以看到当运行 <code>b.js</code> 时，因为 <code>b.js</code> require <code>a.js</code> 模块的时候后 <code>a.js</code> 模块会先执行。验证了前面所说的”require一个模块的时候，模块会先被执行”。</p><h3 id="CMD-Common-Module-Definition-amp-SeaJS"><a href="#CMD-Common-Module-Definition-amp-SeaJS" class="headerlink" title="CMD(Common Module Definition) &amp; SeaJS"></a>CMD(Common Module Definition) &amp; SeaJS</h3><p><strong>CMD</strong> 通用模块规范，由国内的玉伯提出。</p><p><strong>SeaJS</strong> CMD的实现，其实也可以说 <code>CMD</code> 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。</p><p>与 <code>AMD规范</code> 的主要区别在于定义模块和依赖引入的部分。<code>AMD</code> 需要在声明模块的时候指定所有的依赖，通过形参传递依赖到模块内容中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">&#x27;dep1&#x27;</span>, <span class="string">&#x27;dep2&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">dep1, dep2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>与AMD模块规范相比，CMD模块更接近于Node对CommonJS规范的定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(factory);</span><br></pre></td></tr></table></figure><p>在依赖示例部分，<code>CMD</code> 支持动态引入，<code>require</code>、<code>exports</code> 和 <code>module</code> 通过形参传递给模块，在需要依赖模块时，随时调用 <code>require( )</code> 引入即可，示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="built_in">module</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//依赖模块a</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//调用模块a的方法</span></span><br><span class="line">  a.method();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也就是说与 AMD 相比，CMD 推崇依赖就近， AMD 推崇依赖前置。</p><h3 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h3><blockquote><p>如前面所述，<code>CommonJS</code> 和 <code>AMD</code> 都是运行时加载。<code>ES6</code> 在语言规格层面上实现了模块功能，是编译时加载，完全可以取代现有的 <code>CommonJS</code> 和 <code>AMD</code> 规范，可以成为浏览器和服务器通用的模块解决方案。这里关于 <code>ES6模块</code> 我们项目里使用非常多，所以详细讲解。</p></blockquote><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><ul><li>导出一个变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;pengpeng&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>导出一个函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>常用导出方式（推荐）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;dingman&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&#x27;18&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> addr = <span class="string">&#x27;卡尔斯特森林&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; name, age, addr &#125;;</span><br></pre></td></tr></table></figure><ul><li>As用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  s <span class="keyword">as</span> t,</span><br><span class="line">  s <span class="keyword">as</span> m, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以利用as将模块输出多次。</p><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><ul><li>一般用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name, age &#125; <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>As 用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> personName &#125; <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p>import 命令具有提升效果，会提升到整个模块的头部，首先执行，如下也不会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getName();</span><br><span class="line"><span class="keyword">import</span> &#123; getName &#125; <span class="keyword">from</span> <span class="string">&#x27;person_module&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>整体模块加载 *</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逐一加载</span></span><br><span class="line"><span class="keyword">import</span> &#123; age, name &#125; <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整体加载</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> person <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h4><p>其实 <code>export default</code>，在项目里用的非常多，一般一个 <code>Vue组件</code> 或者 <code>React组件</code> 我们都是使用 <code>export default</code> 命令，需要注意的是使用 <code>export default</code> 命令时，<code>import</code> 是不需要加 <code>&#123;&#125;</code> 的。而不使用 <code>export default</code> 时，<code>import</code> 是必须加 <code>&#123;&#125;</code>，示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//person.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//my_module</span></span><br><span class="line"><span class="keyword">import</span> &#123;getName&#125; <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">-----------------对比---------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//person.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//my_module</span></span><br><span class="line"><span class="keyword">import</span> getName <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>export default</code> 其实是导出一个叫做 <code>default</code> 的变量，所以其后面不能跟变量声明语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>值得注意的是我们可以同时使用 <code>export</code> 和 <code>export default</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//person.js</span></span><br><span class="line"><span class="keyword">export</span> name = <span class="string">&#x27;dingman&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my_module</span></span><br><span class="line"><span class="keyword">import</span> getName, &#123; name &#125; <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>前面一直提到，CommonJS是运行时加载，ES6时编译时加载，那么两个有什么本质的区别呢？</p></blockquote><h3 id="ES6-模块与-CommonJS-模块加载区别"><a href="#ES6-模块与-CommonJS-模块加载区别" class="headerlink" title="ES6 模块与 CommonJS 模块加载区别"></a>ES6 模块与 CommonJS 模块加载区别</h3><p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。所以说ES6是编译时加载，不同于 <code>CommonJS</code> 的运行时加载(实际加载的是一整个对象)，ES6模块不是对象，而是通过 <code>export命令</code> 显式指定输出的代码，输入时也采用静态命令的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; basename, dirname, parse &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; basename, dirname, parse &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以上这种写法与CommonJS的模块加载有什么不同？</p><ul><li><p>当 require path 模块时，其实 CommonJS 会将 path 模块运行一遍，并返回一个对象，并将这个对象缓存起来，这个对象包含 path 这个模块的所有 API。以后无论多少次加载这个模块都是取这个缓存的值，也就是第一次运行的结果，除非手动清除。</p></li><li><p>ES6 会从 path 模块只加载3个方法，其他不会加载，这就是编译时加载。ES6 可以在编译时就完成模块加载，当 ES6 遇到 import 时，不会像 CommonJS 一样去执行模块，而是生成一个动态的只读引用，当真正需要的时候再到模块里去取值，所以ES6模块是动态引用，并且不会缓存值。</p></li></ul><p>因为 CommonJS 模块输出的是值的拷贝，所以当模块内值变化时，不会影响到输出的值。基于Node做以下尝试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//person.js</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">module</span>.exports =&#123;</span><br><span class="line">  age: age,</span><br><span class="line">  addAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    age++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//my_module</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">require</span>(<span class="string">&#x27;./person.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.age);</span><br><span class="line">person.addAge();</span><br><span class="line"><span class="built_in">console</span>.log(person.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><p>可以看到内部 age 的变化并不会影响 person.age 的值，这是因为 person.age 的值始终是第一次运行时的结果的拷贝。</p><p>再看ES6</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//person.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  age++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my_module</span></span><br><span class="line"><span class="keyword">import</span> &#123; age, addAge &#125; <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line">addAge();</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前端模块化规范包括 <code>CommonJS</code> / <code>AMD</code> / <code>CMD</code> / <code>ES6</code> 模块化，平时我们可能只知其中一种但不能全面了解他们的发展历史、用法和区别，以及当我们使用<code>require</code> 和 <code>import</code> 的时候到底发生了什么，这篇文章给大家算是比较全面的做了一次总结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> nodejs </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 应对小数运算精度误差的解决方案</title>
      <link href="2021/03/25/acc/"/>
      <url>2021/03/25/acc/</url>
      
        <content type="html"><![CDATA[<h2 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h2><blockquote><p>通常这种对精度要求高的计算都应该交给后端去计算和存储，因为后端有成熟的库来解决这种计算问题。前端也有几个不错的类库</p></blockquote><h3 id="Math-js"><a href="#Math-js" class="headerlink" title="Math.js"></a>Math.js</h3><p>Math.js 是专门为 JavaScript 和 Node.js 提供的一个广泛的数学库。它具有灵活的表达式解析器，支持符号计算，配有大量内置函数和常量，并提供集成解决方案来处理不同的数据类型, 像数字，大数字(超出安全数的数字)，复数，分数，单位和矩阵。 功能强大，易于使用。</p><p>官网: <a href="http://mathjs.org/">http://mathjs.org/</a><br>GitHub: <a href="https://github.com/josdejong/mathjs">https://github.com/josdejong/mathjs</a></p><h3 id="decimal-js"><a href="#decimal-js" class="headerlink" title="decimal.js"></a>decimal.js</h3><p>为 JavaScript 提供十进制类型的任意精度数值。</p><p>官网：<a href="http://mikemcl.github.io/decimal.js/">http://mikemcl.github.io/decimal.js/</a><br>GitHub：<a href="https://github.com/MikeMcl/decimal.js">https://github.com/MikeMcl/decimal.js</a></p><h3 id="big-js"><a href="#big-js" class="headerlink" title="big.js"></a>big.js</h3><p>官网：<a href="http://mikemcl.github.io/big.js">http://mikemcl.github.io/big.js</a></p><p>GitHub：<a href="https://github.com/MikeMcl/big.js/">https://github.com/MikeMcl/big.js/</a></p><blockquote><p>这几个类库帮我们解决很多这类问题，不过通常我们前端做这类运算通常只用于表现层，应用并不是很多。所以很多时候，一个函数能解决的问题不需要引用一个类库来解决。</p></blockquote><h2 id="函数-（推荐）"><a href="#函数-（推荐）" class="headerlink" title="函数 （推荐）"></a>函数 （推荐）</h2><h3 id="加法函数"><a href="#加法函数" class="headerlink" title="加法函数"></a>加法函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> ** 加法函数，用来得到精确的加法结果</span></span><br><span class="line"><span class="comment"> ** 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class="line"><span class="comment"> ** 调用：accAdd(arg1,arg2)</span></span><br><span class="line"><span class="comment"> ** 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accAdd</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r1, r2, m, c;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        r1 = arg1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        r1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        r2 = arg2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        r2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c = <span class="built_in">Math</span>.abs(r1 - r2);</span><br><span class="line">    m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2));</span><br><span class="line">    <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cm = <span class="built_in">Math</span>.pow(<span class="number">10</span>, c);</span><br><span class="line">        <span class="keyword">if</span> (r1 &gt; r2) &#123;</span><br><span class="line">            arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) * cm;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) * cm;</span><br><span class="line">            arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (arg1 + arg2) / m;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//给Number类型增加一个add方法，调用起来更加方便。</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accAdd(arg, <span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="减法函数"><a href="#减法函数" class="headerlink" title="减法函数"></a>减法函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> ** 减法函数，用来得到精确的减法结果</span></span><br><span class="line"><span class="comment"> ** 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class="line"><span class="comment"> ** 调用：accSub(arg1,arg2)</span></span><br><span class="line"><span class="comment"> ** 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accSub</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r1, r2, m, n;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        r1 = arg1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        r1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        r2 = arg2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        r2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2)); <span class="comment">//last modify by deeka //动态控制精度长度</span></span><br><span class="line">    n = (r1 &gt;= r2) ? r1 : r2;</span><br><span class="line">    <span class="keyword">return</span> ((arg1 * m - arg2 * m) / m).toFixed(n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 给Number类型增加一个mul方法，调用起来更加方便。</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.sub = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accMul(arg, <span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="乘法函数"><a href="#乘法函数" class="headerlink" title="乘法函数"></a>乘法函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> ** 乘法函数，用来得到精确的乘法结果</span></span><br><span class="line"><span class="comment"> ** 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。</span></span><br><span class="line"><span class="comment"> ** 调用：accMul(arg1,arg2)</span></span><br><span class="line"><span class="comment"> ** 返回值：arg1乘以 arg2的精确结果</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accMul</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="number">0</span>, s1 = arg1.toString(), s2 = arg2.toString();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        m += s1.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        m += s2.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>(s1.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) * <span class="built_in">Number</span>(s2.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 给Number类型增加一个mul方法，调用起来更加方便。</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.mul = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accMul(arg, <span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="除法函数"><a href="#除法函数" class="headerlink" title="除法函数"></a>除法函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> ** 除法函数，用来得到精确的除法结果</span></span><br><span class="line"><span class="comment"> ** 说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。</span></span><br><span class="line"><span class="comment"> ** 调用：accDiv(arg1,arg2)</span></span><br><span class="line"><span class="comment"> ** 返回值：arg1除以arg2的精确结果</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accDiv</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t1 = <span class="number">0</span>, t2 = <span class="number">0</span>, r1, r2;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        t1 = arg1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        t2 = arg2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">with</span> (<span class="built_in">Math</span>) &#123;</span><br><span class="line">        r1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        r2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> (r1 / r2) * pow(<span class="number">10</span>, t2 - t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//给Number类型增加一个div方法，调用起来更加方便。</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.div = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accDiv(<span class="built_in">this</span>, arg);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件的节流（throttle）与防抖（debounce）</title>
      <link href="2021/03/23/throttle-debounce/"/>
      <url>2021/03/23/throttle-debounce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有些浏览器事件可以在短时间内快速触发多次，比如调整窗口大小或向下滚动页面。例如，监听页面窗口滚动事件，并且用户持续快速地向下滚动页面，那么滚动事件可能在 3 秒内触发数千次，这可能会导致一些严重的性能问题。</p></blockquote><p>构建应用程序，出现滚动、窗口大小调整或按下键等事件请务必考虑 防抖(Debouncing) 和 函数节流（Throttling）来提升页面速度和性能。这两兄弟的本质都是以闭包的形式存在。通过对事件对应的回调函数进行包裹、以自由变量的形式缓存时间信息，最后用 setTimeout 来控制事件的触发频率。</p><h2 id="Throttle：-第一个人说了算"><a href="#Throttle：-第一个人说了算" class="headerlink" title="Throttle： 第一个人说了算"></a>Throttle： 第一个人说了算</h2><p><strong>throttle 的主要思想在于：在某段时间内，不管你触发了多少次回调，都只认第一次，并在计时结束时给予响应。</strong></p><p>这个故事里，”裁判” 就是我们的 <code>节流阀</code>， 他控制参赛者吃东西的时机， “参赛者吃东西” 就是我们频繁操作事件而不断涌入的回调任务，它受 “裁判” 的控制, 而<code>计时器</code> 就是上文提到的以 <code>自由变量</code> 形式存在的时间信息，它是 “裁判” 决定是否停止比赛的依据，最后，等待比赛结果就对应到回调函数的执行。</p><p>总结下来，所谓的 <code>节流</code>，是通过在一段时间内无视后来产生的回调请求来实现的。只要 “裁判” 宣布比赛开始， “裁判” 就会开启计时器，在这段时间内，参赛者就尽管不断的吃，谁也无法知道最终结果。</p><p>对应到实际的交互上是一样的：每当用户触发了一次 <code>scroll</code> 事件，我们就为这个触发操作开启计时器。一段时间内，后续所有的 <code>scroll</code> 事件都会被当作 “参赛者吃东西” 它们无法触发新的 <code>scroll</code> 回调。直到 “一段时间” 到了，第一次触发的 scroll 事件对应的回调才会执行，而 “一段时间内” 触发的后续的 <code>scroll</code> 回调都会被 <code>节流阀</code> 无视掉。</p><p>现在一起实现一个 throttle：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn 是我们需要包装的事件回调, interval 是时间间隔的阈值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// last为上一次触发回调的时间</span></span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将throttle处理结果当作函数返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 保留调用时的this上下文</span></span><br><span class="line">      <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">      <span class="comment">// 保留调用时传入的参数</span></span><br><span class="line">      <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">      <span class="comment">// 记录本次触发回调的时间</span></span><br><span class="line">      <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span></span><br><span class="line">      <span class="keyword">if</span> (now - last &gt;= interval) &#123;</span><br><span class="line">      <span class="comment">// 如果时间间隔大于我们设定的时间间隔阈值，则执行回调</span></span><br><span class="line">          last = now;</span><br><span class="line">          fn.apply(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用throttle来包装scroll的回调</span></span><br><span class="line"><span class="keyword">const</span> better_scroll = throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;触发了滚动事件&#x27;</span>), <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, better_scroll)</span><br></pre></td></tr></table></figure><h2 id="Debounce：-最后一个参赛者说了算"><a href="#Debounce：-最后一个参赛者说了算" class="headerlink" title="Debounce： 最后一个参赛者说了算"></a>Debounce： 最后一个参赛者说了算</h2><p>防抖的主要思想在于：我会等你到底。在某段时间内，不管你触发了多少次回调，我都只认最后一次。</p><p>继续大胃王比赛故事，这次换了一种比赛方式，时间不限，参赛者吃到不能吃为止，当每个参赛都吃不下的时候，后面10分钟如果没有人在吃，比赛结束，如果有人在10分钟内还能吃，则比赛继续，直到下一次10分钟内无人在吃时为止。</p><p>对比 <code>throttle</code> 来理解 <code>debounce</code>： 在 <code>throttle</code> 的逻辑里， “裁判” 说了算，当比赛时间到时，就执行回调函数。而 <code>debounce</code> 认为最后一个参赛者说了算，只要还能吃的，就重新设定新的 <code>定时器</code>。</p><p>现在一起实现一个 debounce：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn 是我们需要包装的事件回调, delay 是每次推迟执行的等待时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定时器</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将debounce处理结果当作函数返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保留调用时的this上下文</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="comment">// 保留调用时传入的参数</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次事件被触发时，都去清除之前的旧定时器</span></span><br><span class="line">    <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设立新定时器</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用debounce来包装scroll的回调</span></span><br><span class="line"><span class="keyword">const</span> better_scroll = debounce(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;触发了滚动事件&#x27;</span>), <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, better_scroll)</span><br></pre></td></tr></table></figure><h2 id="用-Throttle-来优化-Debounce"><a href="#用-Throttle-来优化-Debounce" class="headerlink" title="用 Throttle 来优化 Debounce"></a>用 Throttle 来优化 Debounce</h2><p><code>debounce</code> 的问题在于它 “太有耐心了”。 试想，如果用户的操作十分频繁，他每次都不等 <code>debounce</code> 设置的 <code>delay</code> 时间结束就进行下一次操作，于是每次 <code>debounce</code> 都为该用户重新生成定时器，回调函数被延迟了不计其数次。频繁的延迟会导致用户迟迟得不到响应，用户同样会产生 “这个页面卡死了” 的观感。</p><p>为了避免弄巧成拙，我们需要借力 <code>throttle</code> 的思想，打造一个 “有底线” 的 <code>debounce</code>， 等你可以，但我有我的原则：<code>delay</code> 时间内，我可以为你重新生成定时器； 但只要 <code>delay</code> 的时间到了，我必须要给用户一个响应。这个 <code>throttle</code> 与 <code>debounce</code> “合体” 思路，已经被很多成熟的前端库应用到了它们的加强版 <code>throttle</code> 函数的实现中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn 是我们需要包装的事件回调, delay 是时间间隔的阈值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// last为上一次触发回调的时间, timer是定时器</span></span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span>, timer = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 将throttle处理结果当作函数返回</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="comment">// 保留调用时的this上下文</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="comment">// 保留调用时传入的参数</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="comment">// 记录本次触发回调的时间</span></span><br><span class="line">    <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (now - last &lt; delay) &#123;</span><br><span class="line">    <span class="comment">// 如果时间间隔小于我们设定的时间间隔阈值，则为本次触发操作设立一个新的定时器</span></span><br><span class="line">       <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">       timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          last = now</span><br><span class="line">          fn.apply(context, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果时间间隔超出了我们设定的时间间隔阈值，那就不等了，无论如何要反馈给用户一次响应</span></span><br><span class="line">        last = now</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用新的throttle包装scroll的回调</span></span><br><span class="line"><span class="keyword">const</span> better_scroll = throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;触发了滚动事件&#x27;</span>), <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, better_scroll)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://css-tricks.com/the-difference-between-throttling-and-debouncing/">https://css-tricks.com/the-difference-between-throttling-and-debouncing/</a><br><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">https://css-tricks.com/debouncing-throttling-explained-examples/</a><br><a href="https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf#.ly8uqz8v4">https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf#.ly8uqz8v4</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 之 Promise 深度剖析</title>
      <link href="2021/02/13/Promise/"/>
      <url>2021/02/13/Promise/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Promise基本上现在不管是大厂还是小厂，promise 已经成为了面试必考知识点；关于 Promise，想必大家都又所了解，可是又掌握了多少，真正面试的时候，又能有多少把握呢？ </p></blockquote><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><p>首先，我们以常见的 <code>Promise</code> 面试题为切入点，我们看看面试官们都爱考什么：</p><ul><li><p><code>Promise</code> 的出现 解决了什么问题 ？</p></li><li><p><code>Promise</code> 的基础特征 ？</p></li><li><p><code>Promise</code> 常用的 API 有哪些 ？</p></li><li><p>能不能手写一个符合 <code>Promise/A+</code> 规范的 <code>Promise</code>?</p></li><li><p><code>then</code> 的链式调用 &amp; 值穿透特性原理</p></li><li><p><code>Promise</code> 有什么缺陷，可以如何解决？</p></li></ul><p>这几个问题由浅入深，我们一个一个来看：</p><h2 id="Promise-出现的原因"><a href="#Promise-出现的原因" class="headerlink" title="Promise 出现的原因"></a>Promise 出现的原因</h2><p>在 <code>Promise</code> 出现以前，在我们处理多个异步请求嵌套时，代码往往是这样的。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./name.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  fs.readFile(data, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    fs.readFile(data,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>为了拿到回调的结果，我们必须一层一层的嵌套，可以说是相当恶心了。而且基本上我们还要对每次请求的结果进行一系列的处理，使得代码变的更加难以阅读和难以维护，这就是传说中臭名昭著的 <code>回调地狱</code>, 产生 <code>回调地狱</code> 的原因归结起来有两点：</p><ol><li><p><code>嵌套调用</code>，第一个函数的输出往往是第二个函数的输入；</p></li><li><p><code>处理多个异步请求并发</code>，开发时往往需要同步请求最终的结果。</p></li></ol><p>原因分析出来后，那么问题的解决思路就很清晰了：</p><ol><li><p><code>消灭嵌套调用</code>：通过 <code>Promise</code> 的链式调用可以解决 <code>.then()</code>；</p></li><li><p><code>合并多个任务的请求结果</code>：使用 <code>Promise.all</code> 获取合并多个任务的错误处理。</p></li></ol><p><strong>Promise 正是用一种更加友好的代码组织方式，解决了异步嵌套的问题。</strong></p><p>我们来看看上面的例子用 Promise 实现是什么样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filename, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">&#x27;./name.txt&#x27;</span>).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> read(data) </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> read(data)  </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>臃肿的嵌套变得线性多了有木有？没错，他就是我们的异步神器 <code>Promise</code>！</p><blockquote><p>让我们再次回归刚才的问题，<code>Promise</code> 为我们解决了什么问题？在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的 “回调地狱”，而 <code>Promise</code> 将嵌套调用改为链式调用，增加了可阅读性和可维护性。也就是说，<code>Promise</code> 解决的是异步编码风格的问题。</p></blockquote><h2 id="Promise-基本特征"><a href="#Promise-基本特征" class="headerlink" title="Promise 基本特征"></a>Promise 基本特征</h2><p><strong><code>promise</code> 有三个状态：<code>pending</code>，<code>fulfilled</code>，or <code>rejected</code>；</strong></p><ol><li><p><code>new promise</code> 时， 需要传递一个 <code>executor()</code> 执行器，执行器立即执行；</p></li><li><p><code>executor</code> 接受两个参数，分别是 <code>resolve</code> 和 <code>reject</code>；</p></li><li><p><code>promise</code> 的默认状态是 <code>pending</code>；</p></li><li><p><code>promise</code> 只能从 <code>pending</code> 到 <code>rejected</code>, 或者从 <code>pending</code> 到 <code>fulfilled</code>，状态一旦确认，就不会再改变；</p></li><li><p><code>promise</code> 必须有一个 <code>then</code> 方法，<code>then</code> 接收两个参数，分别是 <code>promise</code> 成功的回调 <code>onFulfilled</code>, 和 <code>promise</code> 失败的回调 <code>onRejected</code>；</p></li><li><p><code>then</code> 方法的执行结果也会返回一个 <code>Promise</code> 对象。因此我们可以进行 <code>then</code> 的链式执行，这也是解决回调地狱的主要方式。</p></li><li><p>如果调用 <code>then</code> 时，<code>promise</code> 已经成功，则执行 <code>onFulfilled</code>，参数是 <code>promise</code> 的 <code>value</code></p></li><li><p>如果调用 <code>then</code> 时，<code>promise</code> 已经失败，那么执行 <code>onRejected</code>, 参数是 <code>promise</code> 的 <code>reason</code></p></li><li><p>如果 <code>then</code> 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 <code>then</code> 的失败的回调 <code>onRejected</code></p></li></ol><p>下面就通过例子进一步讲解。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建 Promise</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 异步操作失败 */</span></span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>resolve</code> 函数的作用：在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p></li><li><p><code>reject</code> 函数的作用：在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p></li></ul><p><code>Promise</code> 实例生成以后，可以用 <code>then</code> 方法指定 <code>resolved</code> 状态和 <code>reject</code> 状态的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something when success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something when failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>而 <code>then</code> 方法中指定的回调函数，将在当前脚本所有同步任务执行完才会执行。如下例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数内部 同步执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;before resolved&#x27;</span>);</span><br><span class="line">  resolve();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;after resolved&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 异步执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;resolved&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;outer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">before resolved</span><br><span class="line">after resolved</span><br><span class="line">outer</span><br><span class="line">resolved</span><br></pre></td></tr></table></figure><h2 id="Promise-常用-API"><a href="#Promise-常用-API" class="headerlink" title="Promise 常用 API"></a>Promise 常用 API</h2><ul><li><p><code>Promise.resolve()</code>  默认产生一个成功的 <code>promise</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.reject()</code> 默认产生一个失败的 <code>promise</code>，<code>Promise.reject</code> 是直接将值变成错误结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    reject(reason);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.prototype.catch()</code> 用来捕获 <code>promise</code> 的异常，就相当于一个没有成功的 <code>then</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">errCallback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>,errCallback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.prototype.finally()</code> <code>finally</code> 表示不是最终的意思，而是无论如何都会执行的意思。 如果返回一个 <code>promise</code> 会等待这个 <code>promise</code> 也执行完毕。如果返回的是成功的 <code>promise</code>，会采用上一次的结果；如果返回的是失败的 <code>promise</code>，会用这个失败的结果，传到 <code>catch</code> 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function">() =&gt;</span> value)</span><br><span class="line">  &#125;,<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function">() =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;)</span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.all()</code> 是解决并发问题的，多个异步并发获取最终的结果（如果有一个失败则失败）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(values)) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = <span class="keyword">typeof</span> values;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`TypeError: <span class="subst">$&#123;type&#125;</span> <span class="subst">$&#123;values&#125;</span> is not iterable`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resultArr = [];</span><br><span class="line">    <span class="keyword">let</span> orderIndex = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> processResultByKey = <span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">      resultArr[index] = value;</span><br><span class="line">      <span class="keyword">if</span> (++orderIndex === values.length) &#123;</span><br><span class="line">          resolve(resultArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = values[i];</span><br><span class="line">      <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        value.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          processResultByKey(value, i);</span><br><span class="line">        &#125;, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        processResultByKey(value, i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&#x27;ok1&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">&#x27;ok2&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,p1,p2]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, data);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.race(）</code> 用来处理多个请求，采用最快的（谁先完成用谁的）。</p></li></ul><h2 id="手写一个符合-Promise-A-规范的-Promise"><a href="#手写一个符合-Promise-A-规范的-Promise" class="headerlink" title="手写一个符合 Promise/A+ 规范的 Promise"></a>手写一个符合 Promise/A+ 规范的 Promise</h2><p>依据 <code>promise</code> 的基本特征，我们试着勾勒下 <code>Promise</code> 的形状：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三个状态：PENDING、FULFILLED、REJECTED</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;FULFILLED&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 默认状态为 PENDING</span></span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    <span class="comment">// 存放成功状态的值，默认为 undefined</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 存放失败状态的值，默认为 undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用此方法就是成功</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status ===  PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用此方法就是失败</span></span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status ===  PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 立即执行，将 resolve 和 reject 函数传给使用者  </span></span><br><span class="line">      executor(resolve,reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 发生异常时执行失败逻辑</span></span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 包含一个 then 方法，并接收两个参数 onFulfilled、onRejected</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完我们可以测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">&#125;).then(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>, data)</span><br><span class="line">  &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;faild&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;success 成功&quot;</span></span><br></pre></td></tr></table></figure><p>现在我们已经实现了一个基础版的 <code>Promise</code>，但是还不要高兴的太早噢，这里我们只处理了同步操作的 <code>promise</code>。如果在 <code>executor()</code>中传入一个异步操作的话呢，我们试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 传入一个异步操作</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;).then(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>, data)</span><br><span class="line">  &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;faild&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>执行测试脚本后发现，<code>promise</code> 没有任何返回。</p><blockquote><p>因为 promise 调用 then 方法时，当前的 promise 并没有成功，一直处于 pending 状态。所以如果当调用 then 方法时，当前状态是 pending，我们需要先将成功和失败的回调分别存放起来，在executor()的异步任务被执行时，触发 resolve 或 reject，依次调用成功或失败的回调。</p></blockquote><p>结合这个思路，我们优化一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;FULFILLED&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 存放成功的回调</span></span><br><span class="line">    <span class="built_in">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="comment">// 存放失败的回调</span></span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks= [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status ===  PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="comment">// 依次将对应的函数执行</span></span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status ===  PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="comment">// 依次将对应的函数执行</span></span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve,reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span></span><br><span class="line">      <span class="built_in">this</span>.onResolvedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span></span><br><span class="line">      <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;).then(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>, data)</span><br><span class="line">  &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;faild&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>控制台等待 1s 后输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;success 成功&quot;</span></span><br></pre></td></tr></table></figure><p>ok！大功告成，异步问题已经解决了！</p><p>熟悉设计模式的同学，应该意识到了这其实是一个 <code>发布订阅模式</code>，这种收集依赖 -&gt; 触发通知 -&gt; 取出依赖执行的方式，被广泛运用于发布订阅模式的实现。</p><h2 id="then-的链式调用-amp-值穿透特性"><a href="#then-的链式调用-amp-值穿透特性" class="headerlink" title="then 的链式调用&amp;值穿透特性"></a>then 的链式调用&amp;值穿透特性</h2><blockquote><p>我们都知道，promise 的优势在于可以链式调用。在我们使用 Promise 的时候，当 then 函数中 return 了一个值，不管是什么值，我们都能在下一个 then 中获取到，这就是所谓的then 的链式调用。而且，当我们不在 then 中放入参数，例：promise.then().then()，那么其后面的 then 依旧可以得到之前 then 返回的值，这就是所谓的值的穿透。那具体如何实现呢？简单思考一下，如果每次调用 then 的时候，我们都重新创建一个 promise 对象，并把上一个 then 的返回结果传给这个新的 promise 的 then 方法，不就可以一直 then 下去了么？那我们来试着实现一下。这也是手写 Promise 源码的重中之重，所以，打起精神来，重头戏来咯！</p></blockquote><p>有了上面的想法，我们再结合 <code>Promise/A+</code> 规范梳理一下思路：</p><ol><li><p><code>then</code> 的参数 <code>onFulfilled</code> 和 <code>onRejected</code> 可以缺省，如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 不是函数，将其忽略，且依旧可以在下面的 <code>then</code> 中获取到之前返回的值；</p></li><li><p><code>promise</code> 可以 <code>then</code> 多次，每次执行完 <code>promise.then</code> 方法后返回的都是一个 “新的promise”；</p></li><li><p>如果 <code>then</code> 的返回值 x 是一个普通值，那么就会把这个结果作为参数，传递给下一个 <code>then</code> 的成功的回调中；</p></li><li><p>如果 <code>then</code> 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 <code>then</code> 的失败的回调中；</p></li><li><p>如果 <code>then</code> 的返回值 x 是一个 <code>promise</code>，那么会等这个 <code>promise</code> 执行完，<code>promise</code> 如果成功，就走下一个 <code>then</code> 的成功；如果失败，就走下一个 <code>then</code> 的失败；如果抛出异常，就走下一个 <code>then</code> 的失败；</p></li><li><p>如果 <code>then</code> 的返回值 x 和 <code>promise</code> 是同一个引用对象，造成循环引用，则抛出异常，把异常传递给下一个 <code>then</code> 的失败的回调中；</p></li><li><p>如果 <code>then</code> 的返回值 x 是一个 <code>promise</code>，且 x 同时调用 <code>resolve</code> 函数和 <code>reject</code> 函数，则第一次调用优先，其他所有调用被忽略；</p></li></ol><p>我们将代码补充完整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;FULFILLED&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolvePromise = <span class="function">(<span class="params">promise2, x, resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123; </span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Promise/A+ 2.3.3.3.3 只能调用一次</span></span><br><span class="line">  <span class="keyword">let</span> called;</span><br><span class="line">  <span class="comment">// 后续的条件要严格判断 保证代码能和别的库一起使用</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> &amp;&amp; x != <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>) &#123; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1</span></span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123; </span><br><span class="line">        <span class="comment">// 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3</span></span><br><span class="line">        then.call(x, <span class="function"><span class="params">y</span> =&gt;</span> &#123; <span class="comment">// 根据 promise 的状态决定是成功还是失败</span></span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">// 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1</span></span><br><span class="line">          resolvePromise(promise2, y, resolve, reject); </span><br><span class="line">        &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 只要失败就失败 Promise/A+ 2.3.3.3.2</span></span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4</span></span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// Promise/A+ 2.3.3.2</span></span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4  </span></span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks= [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status ===  PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.status ===  PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve,reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//解决 onFufilled，onRejected 没有传值的问题</span></span><br><span class="line">    <span class="comment">//Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">    <span class="comment">//因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获</span></span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;;</span><br><span class="line">    <span class="comment">// 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7</span></span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="comment">//Promise/A+ 2.2.2</span></span><br><span class="line">        <span class="comment">//Promise/A+ 2.2.4 --- setTimeout</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Promise/A+ 2.2.7.1</span></span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">            <span class="comment">// x可能是一个proimise</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">//Promise/A+ 2.2.7.2</span></span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">        <span class="comment">//Promise/A+ 2.2.3</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">&#125;).then().then().then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>,err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;失败 err&quot;</span></span><br></pre></td></tr></table></figure><p>至此，我们已经完成了 <code>promise</code> 最关键的部分：<code>then</code> 的链式调用和值的穿透。搞清楚了 <code>then</code> 的链式调用和值的穿透，你也就搞清楚了 <code>Promise</code>。</p><h2 id="Promise-有什么缺陷，可以如何解决？"><a href="#Promise-有什么缺陷，可以如何解决？" class="headerlink" title="Promise 有什么缺陷，可以如何解决？"></a>Promise 有什么缺陷，可以如何解决？</h2><blockquote><p>Promise 虽然跳出了异步嵌套的怪圈，用链式表达更加清晰，但是我们也发现如果有大量的异步请求的时候，流程复杂的情况下，会发现充满了屏幕的 then，看起来非常吃力，而 Async/Await 的出现就是为了解决这种复杂的情况。</p></blockquote><p><strong>优缺点：</strong></p><ol><li><p>代码简洁,不用 <code>then</code>，避免了嵌套代码</p></li><li><p>错误处理，<code>Async/Await</code> 让 <code>try/catch</code> 可以同时处理同步和异步错误，在下面的 <code>promise</code> 示例中，<code>try/catch</code> 不能处理 <code>JSON.parse</code> 的错误，因为它在 <code>Promise</code> 中。我们需要使用 <code>.catch</code>，这样错误处理代码非常冗余。并且，在我们的实际生产代码会更加复杂。</p></li><li><p>中间值不好操作</p></li><li><p>调试困难</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeRequest = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getJSON().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// JSON.parse可能会出错</span></span><br><span class="line">                <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(result)</span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 取消注释，处理异步代码的错误</span></span><br><span class="line">            <span class="comment">// .catch((err) =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//   console.log(err)</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">const</span> makeRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// this parse may fail</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">await</span> getJSON())</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Async/Await</code> 的增加，可以让接口按顺序异步获取数据，用更可读，可维护的方式处理回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo01</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line">demo01().then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);<span class="comment">// 123</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// async相当于promise, awite相当于等到Promise.resolve()的回调,那resolve（）解决了，reject（）呢</span></span><br><span class="line"><span class="comment">// Promise.reject 的情况我们可以用 try catch 包裹一下</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">errorDemoSuper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取个应用的案列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页面 校验 code</span></span><br><span class="line"><span class="function"><span class="title">handleInputInviteCode</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;walletStore/verifyInviteCode&#x27;</span>, &#123;</span><br><span class="line">        inviteCode: <span class="built_in">this</span>.inviteCode</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;confirm&#x27;</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;failure&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// store 中的 action 页面</span></span><br><span class="line"><span class="function"><span class="title">verifyInviteCode</span>(<span class="params">&#123;commit,state,dispatch&#125;, &#123;inviteCode, header, id&#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> handleRequest.post(<span class="string">`/api/core/invite/activation/<span class="subst">$&#123;inviteCode&#125;</span>`</span>, &#123;&#125;, header)</span><br><span class="line">            <span class="keyword">if</span> (res.status === <span class="number">200</span> &amp;&amp; res.data === <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> form = <span class="keyword">await</span> handleGetUserInfo(currentWallet)</span><br><span class="line">                <span class="keyword">await</span> commit(<span class="string">&#x27;changeWallet&#x27;</span>, form)</span><br><span class="line">                resolve(form)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            reject(LANG_DATA[res.code] || res.code)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">            reject(e.message || e.code || <span class="string">&#x27;激活失败，请检查激活码&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM 包开发指南</title>
      <link href="2021/02/07/npmPackages/"/>
      <url>2021/02/07/npmPackages/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要是讲如何开发一个 vue 组件，做成 npm 包并发布以及使用、维护。</p><h2 id="什么是-npm？"><a href="#什么是-npm？" class="headerlink" title="什么是 npm？"></a>什么是 npm？</h2><p><strong>在 GitHub 还没有兴起的年代，前端是通过网址来共享代码</strong></p><p>比如你想使用 jQuery，那么你点击 jQuery 网站上提供的链接就可以下载 jQuery，放到自己的网站上使用。</p><p>当一个网站依赖的代码越来越多，程序员发现这是一件很麻烦的事情：</p><ol><li>去 jQuery 官网下载 jQuery</li><li>去 BootStrap 官网下载 BootStrap</li><li>去 Underscore 官网下载 Underscore</li><li>……</li></ol><p>有些程序员就受不了了，一个叫做 Isaac Z. Schlueter 的程序员 （以下简称 Isaaz）给出一个解决方案：用一个工具把这些代码集中到一起来管理吧！</p><p>这个工具就是他用 JavaScript （运行在 Node.js 上）写的 npm，全称是 Node Package Manager。所以现在，你可以使用 npm install jquery 来下载 jQuery 代码。现在用 npm 来分享代码已经成了前端的标配。接下来我们来说说，如何制作一个 npm 包。</p><h2 id="第一步，准备工作"><a href="#第一步，准备工作" class="headerlink" title="第一步，准备工作"></a>第一步，准备工作</h2><h3 id="1-注册-npm-账号"><a href="#1-注册-npm-账号" class="headerlink" title="1. 注册 npm 账号"></a>1. 注册 npm 账号</h3><p>前往 <a href="https://www.npmjs.com/">npm 官网</a>  注册一个账号。</p><h3 id="2-确认包名称"><a href="#2-确认包名称" class="headerlink" title="2. 确认包名称"></a>2. 确认包名称</h3><p>通过命令确认名称是否被占用，操作如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view yqy-packages</span><br></pre></td></tr></table></figure><p><code>yqy-packages</code> 是我期望的包名称，执行该命令之后，如果出现了包的信息，则表示该名称已经被占用，则需要换个名称，如果出现报错 <code>404</code> 则表示改名称没有被占用，然后我们使用没有被占用的名称，创建项目。</p><h3 id="3-确认-vue-cli-版本"><a href="#3-确认-vue-cli-版本" class="headerlink" title="3. 确认 vue-cli 版本"></a>3. 确认 vue-cli 版本</h3><blockquote><p>vue 脚手架版本区别，大于 3.0 包名是 @vue/cli, 小于 3.0 则包名为 vue-cli。</p></blockquote><p>我们推荐使用 <code>3.0</code> 之前的 <code>vue-cli</code> 版本，首先查看本地是否全局安装了 <code>vue-cli</code>, 如果大于 <code>3.0</code> 或者没有安装，则卸载 <code>@vue/cli</code>, 重新安装 <code>vue-cli</code>, 相关命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br><span class="line">@vue/cli 4.5.13</span><br><span class="line"></span><br><span class="line">npm uninstall -g @vue/cli</span><br><span class="line">npm install vue-cli -g</span><br><span class="line"></span><br><span class="line">vue -V</span><br><span class="line">2.9.6</span><br></pre></td></tr></table></figure><h3 id="4-初始化项目"><a href="#4-初始化项目" class="headerlink" title="4. 初始化项目"></a>4. 初始化项目</h3><blockquote><p>npm 包开发时推荐使用 webpack-simple 模板构建项目，只保留基本功能即可。</p></blockquote><p>创建一个文件夹，名称就是上一步骤确认过没有被占用的包名称。然后进入该文件夹内，使用命令初始化为 vue 项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-simple</span><br></pre></td></tr></table></figure><p>一路回车即可，初始化完成之后，会自动生成一个 vue 项目底层文件，然后安装依赖，并预览。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="第二步，组件的编写和预览"><a href="#第二步，组件的编写和预览" class="headerlink" title="第二步，组件的编写和预览"></a>第二步，组件的编写和预览</h2><h3 id="1-开发组件，在-src-目录下创建-components-文件夹，然后在-components-下创建-yqyPackages-vue-用于开发组件，假设我们的组件内容如下（这只是一个示例，假设组件需求就是展示传入的内容，实际开发中应该根据实际需求编写组件）"><a href="#1-开发组件，在-src-目录下创建-components-文件夹，然后在-components-下创建-yqyPackages-vue-用于开发组件，假设我们的组件内容如下（这只是一个示例，假设组件需求就是展示传入的内容，实际开发中应该根据实际需求编写组件）" class="headerlink" title="1. 开发组件，在 src 目录下创建 components 文件夹，然后在 components 下创建 yqyPackages.vue, 用于开发组件，假设我们的组件内容如下（这只是一个示例，假设组件需求就是展示传入的内容，实际开发中应该根据实际需求编写组件）:"></a>1. 开发组件，在 <code>src</code> 目录下创建 <code>components</code> 文件夹，然后在 <code>components</code> 下创建 <code>yqyPackages.vue</code>, 用于开发组件，假设我们的组件内容如下（这只是一个示例，假设组件需求就是展示传入的内容，实际开发中应该根据实际需求编写组件）:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;propData&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;yqy-packages&#x27;</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">      propData: &#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">          <span class="keyword">default</span>: <span class="string">&#x27;我是默认值&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-本地预览，在-app-vue-中引入组件，运行项目看效果，修改-app-vue-内容如下"><a href="#2-本地预览，在-app-vue-中引入组件，运行项目看效果，修改-app-vue-内容如下" class="headerlink" title="2. 本地预览，在 app.vue 中引入组件，运行项目看效果，修改 app.vue 内容如下:"></a>2. 本地预览，在 <code>app.vue</code> 中引入组件，运行项目看效果，修改 app.vue 内容如下:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">yqy-packages</span> <span class="attr">:propData</span>=<span class="string">&#x27;initData&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> yqyPackages <span class="keyword">from</span> <span class="string">&#x27;./components/yqyPackages&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        initData: <span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        yqyPackages</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三步，第三方入口文件和配置"><a href="#第三步，第三方入口文件和配置" class="headerlink" title="第三步，第三方入口文件和配置"></a>第三步，第三方入口文件和配置</h2><blockquote><p>如果上面步骤都顺利的话，运行项目应该是可以看到页面呈现的 <code>hello world</code>, 可以理解为组件已经开发完成，但是目前只是在 <code>app.vue</code> 中使用，我们需要让他可以提供给第三方使用，看看如何操作！</p></blockquote><h3 id="1-准备入口文件"><a href="#1-准备入口文件" class="headerlink" title="1. 准备入口文件"></a>1. 准备入口文件</h3><p>在项目根目录下，创建 index.js, 编写如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yqyPackages <span class="keyword">from</span> <span class="string">&#x27;./src/components/yqyPackages&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这一步判断 window.Vue 是否存在，因为直接引用 vue.min.js， 它会把 Vue 绑到 Window 上，我们直接引用打包好的 js 才能正常跑起来。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  <span class="built_in">window</span>.Vue.component(<span class="string">&#x27;yqy-packages&#x27;</span>, yqyPackages)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样就可以使用Vue.use进行全局安装了。</span></span><br><span class="line">yqyPackages.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(yqyPackages.name, yqyPackages)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> yqyPackages</span><br></pre></td></tr></table></figure><h3 id="2-修改项目根目录配置文件-webpack-config-js"><a href="#2-修改项目根目录配置文件-webpack-config-js" class="headerlink" title="2. 修改项目根目录配置文件 webpack.config.js"></a>2. 修改项目根目录配置文件 <code>webpack.config.js</code></h3><blockquote><p>默认使用 <code>main.js</code> 作为入口，所以可以跑起来呈现 <code>app.vue</code> 的内容来预览调试，但是组件开发完成后提供给第三方使用时，我们只需要组件的代码，也就是 <code>yqyPackages.vue</code> 内编写的代码，而我们上一步准备的入口文件 <code>index.js</code> 就是将这个 <code>yqyPackages.vue</code> 内的代码暴露出去的入口，所以修改配置文件，让入口可以根据开发环境和生成环境的切换而改变。</p></blockquote><ul><li><code>main.js</code>, 是命令 <code>npm run dev</code> 的入口，也就是 <code>app.vue</code>，用于调试、测试我们开发的组件；</li><li><code>index.js</code>, 是我们打包到生产环境的入口，第三方引用的入口，对应的就是单纯的 <code>yqyPackages.vue</code> 组件内容；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增环境变量</span></span><br><span class="line"><span class="keyword">const</span> NODE_ENV = process.env.NODE_ENV</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// entry: &#x27;./src/main.js&#x27;,  // 修改入口文件</span></span><br><span class="line">    entry: NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;./src/main.js&#x27;</span> : <span class="string">&#x27;./index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        publicPath: <span class="string">&#x27;/dist/&#x27;</span>,</span><br><span class="line">        filename: <span class="string">&#x27;build.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,      &#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    loaders: &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// other vue-loader options go here</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">                loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">&#x27;[name].[ext]?[hash]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        extensions: [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        noInfo: <span class="literal">true</span>,</span><br><span class="line">        overlay: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    performance: &#123;</span><br><span class="line">        hints: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">&#x27;#eval-source-map&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports.devtool = <span class="string">&#x27;#source-map&#x27;</span></span><br><span class="line">    <span class="comment">// http://vue-loader.vuejs.org/en/workflow/production.html</span></span><br><span class="line">    <span class="built_in">module</span>.exports.plugins = (<span class="built_in">module</span>.exports.plugins || []).concat([</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">                NODE_ENV: <span class="string">&#x27;&quot;production&quot;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">            sourceMap: <span class="literal">true</span>,</span><br><span class="line">            compress: &#123;</span><br><span class="line">                warnings: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">            minimize: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四步，npm-平台发布"><a href="#第四步，npm-平台发布" class="headerlink" title="第四步，npm 平台发布"></a>第四步，npm 平台发布</h2><h3 id="1-修改-package-json-的-private-字段，private-是-true-的时候不能发布到-npm-需设置成-false，默认是-true。"><a href="#1-修改-package-json-的-private-字段，private-是-true-的时候不能发布到-npm-需设置成-false，默认是-true。" class="headerlink" title="1. 修改 package.json 的 private 字段，private 是 true 的时候不能发布到 npm, 需设置成 false，默认是 true。"></a>1. 修改 <code>package.json</code> 的 <code>private</code> 字段，<code>private</code> 是 <code>true</code> 的时候不能发布到 <code>npm</code>, 需设置成 false，默认是 <code>true</code>。</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;yqy-packages&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;A Vue.js project&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;LiuKun &lt;308880147@qq.com&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development webpack-dev-server --open --hot&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --progress --hide-modules&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.5.11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;not ie &lt;= 8&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.26.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^7.1.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-env&quot;</span>: <span class="string">&quot;^1.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-stage-3&quot;</span>: <span class="string">&quot;^6.24.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span>: <span class="string">&quot;^5.0.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^0.28.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;file-loader&quot;</span>: <span class="string">&quot;^1.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-loader&quot;</span>: <span class="string">&quot;^13.0.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.4.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^3.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^2.9.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-命令行登录-npm-账号"><a href="#2-命令行登录-npm-账号" class="headerlink" title="2. 命令行登录 npm 账号"></a>2. 命令行登录 npm 账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br><span class="line">Username: 填写 npm 用户名</span><br><span class="line">Password: 填写 npm 登陆密码</span><br><span class="line">Email: (this IS public) : 填写 npm 账户联系邮箱</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现下面这句表示登录成功</span></span><br><span class="line">Logged <span class="keyword">in</span> as **** on https://registry.npmjs.org/. </span><br></pre></td></tr></table></figure><h3 id="3-发布-npm-包，每次发布的时候-packa-json-里面的-version-不能一样，不然不能发布出去，手动改下版本就行"><a href="#3-发布-npm-包，每次发布的时候-packa-json-里面的-version-不能一样，不然不能发布出去，手动改下版本就行" class="headerlink" title="3. 发布 npm 包，每次发布的时候 packa.json 里面的 version 不能一样，不然不能发布出去，手动改下版本就行"></a>3. 发布 npm 包，每次发布的时候 packa.json 里面的 version 不能一样，不然不能发布出去，手动改下版本就行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br><span class="line"></span><br><span class="line">npm notice </span><br><span class="line">npm notice 📦  yqy-packages@1.0.0</span><br><span class="line">npm notice === Tarball Contents === </span><br><span class="line">npm notice 72B   .babelrc                      </span><br><span class="line">npm notice 147B  .editorconfig                 </span><br><span class="line">npm notice 206B  index.html                    </span><br><span class="line">npm notice 544B  index.js                      </span><br><span class="line">npm notice 100B  src/main.js                   </span><br><span class="line">npm notice 1.8kB webpack.config.js             </span><br><span class="line">npm notice 842B  package.json                  </span><br><span class="line">npm notice 327B  README.md                     </span><br><span class="line">npm notice 6.8kB src/assets/logo.png           </span><br><span class="line">npm notice 270B  src/App.vue                   </span><br><span class="line">npm notice 338B  src/components/yqyPackages.vue</span><br><span class="line">npm notice === Tarball Details === </span><br><span class="line">npm notice name:          yqy-packages                            </span><br><span class="line">npm notice version:       1.0.0                                   </span><br><span class="line">npm notice package size:  9.4 kB                                  </span><br><span class="line">npm notice unpacked size: 11.5 kB                                 </span><br><span class="line">npm notice shasum:        7f52f85068b37e81eb9b05eaf832d427b0a7b810</span><br><span class="line">npm notice integrity:     sha512-wiws7/01Gk2WI[...]H/y2CHE/f/8Pw==</span><br><span class="line">npm notice total files:   11                                      </span><br><span class="line">npm notice </span><br><span class="line">+ yqy-packages@1.0.0</span><br></pre></td></tr></table></figure><h3 id="4-在-vue-项目中使用-npm-包"><a href="#4-在-vue-项目中使用-npm-包" class="headerlink" title="4. 在 vue 项目中使用 npm 包"></a>4. 在 vue 项目中使用 npm 包</h3><p><strong>安装依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yqy-packages</span><br></pre></td></tr></table></figure><p><strong>在 main.js 全局引入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> yqyPackages <span class="keyword">from</span> <span class="string">&#x27;yqy-packages&#x27;</span></span><br><span class="line">Vue.use(yqyPackages)</span><br></pre></td></tr></table></figure><p><strong>在页面中使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yqy-packages</span> <span class="attr">propData</span>=<span class="string">&quot;这是一个测试文本&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">yqy-packages</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-更新包"><a href="#5-更新包" class="headerlink" title="5. 更新包"></a>5. 更新包</h3><p>npm 包项目源代码更新之后，修改版本号，重新打包发布即可。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> packages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4种使用Axios拦截器的方法</title>
      <link href="2021/02/07/axios/"/>
      <url>2021/02/07/axios/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Axios？"><a href="#什么是Axios？" class="headerlink" title="什么是Axios？"></a>什么是Axios？</h2><p>Axios是用于浏览器和node.js的基于Promise的HTTP客户端。它具有许多有用的默认值，例如自动检测JSON响应并返回一个对象而不是纯文本，如果响应状态代码大于400，则会引发错误。</p><h2 id="什么是axios拦截器？"><a href="#什么是axios拦截器？" class="headerlink" title="什么是axios拦截器？"></a>什么是axios拦截器？</h2><p>Axios 拦截器 是库每次发送或接收请求时都会调用的函数。您可以先拦截请求或响应，然后再通过“然后”或“捕获”处理它们。</p><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做点什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在请求失败时做一些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 任何位于2xx范围内的状态码都会触发此功能</span></span><br><span class="line">    <span class="comment">// 对响应数据进行处理</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 任何超出2xx范围的状态码都会触发此功能</span></span><br><span class="line">    <span class="comment">// 对响应错误进行处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="删除拦截器。"><a href="#删除拦截器。" class="headerlink" title="删除拦截器。"></a>删除拦截器。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> interceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(interceptor);</span><br></pre></td></tr></table></figure><h2 id="使用拦截器在每个请求中注入身份验证令牌头。"><a href="#使用拦截器在每个请求中注入身份验证令牌头。" class="headerlink" title="使用拦截器在每个请求中注入身份验证令牌头。"></a>使用拦截器在每个请求中注入身份验证令牌头。</h2><p>在构建应用程序时，您很有可能会使用需要某些凭据（例如api_token或用户Auth令牌）的API。通常，您将必须在每个HTTP请求后附加所需的标头。使用Axios拦截器，您可以设置一次，在任何调用Axios实例的地方，都可以确保令牌存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// &#x27;req&#x27; 是Axios请求配置，因此您可以修改 &#x27;headers&#x27;</span></span><br><span class="line">  req.headers.authorization = <span class="string">&#x27;Bearer mytoken&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> req;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于请求拦截器而自动设置授权标头</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://api.example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="使用拦截器记录每个请求和响应。"><a href="#使用拦截器记录每个请求和响应。" class="headerlink" title="使用拦截器记录每个请求和响应。"></a>使用拦截器记录每个请求和响应。</h2><p>记录请求可能是有益的，特别是当您拥有大型应用程序并且不知道所有请求在何处触发时。使用Axios拦截器，您可以快速记录每个请求和响应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(req, <span class="literal">null</span>, <span class="number">2</span>)&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 完成后必须返回请求对象</span></span><br><span class="line">  <span class="keyword">return</span> req;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data.json);</span><br><span class="line">  <span class="comment">// 完成后必须返回请求对象</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> axios.post(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="使用Axios拦截器进行错误处理。"><a href="#使用Axios拦截器进行错误处理。" class="headerlink" title="使用Axios拦截器进行错误处理。"></a>使用Axios拦截器进行错误处理。</h2><p>您可以使用Axios拦截器来捕获所有错误，并在到达最终用户之前对其进行增强。如果您使用具有不同错误对象形状的多个API，则可以使用拦截器将它们转换为标准结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  res =&gt; res,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err.response.data.message);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">await</span> axios.get(<span class="string">&#x27;http://example.com/notfound&#x27;</span>).</span><br><span class="line">  <span class="keyword">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err);</span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line">err.message;</span><br></pre></td></tr></table></figure><h2 id="使用拦截器为请求添加速率限制。"><a href="#使用拦截器为请求添加速率限制。" class="headerlink" title="使用拦截器为请求添加速率限制。"></a>使用拦截器为请求添加速率限制。</h2><p>后端资源有限，可能耗费大量性能。作为客户端，您可以通过限制HTTP调用的速率来帮助减轻服务器的负载。使用Axios拦截器的方法如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(‘axios’);</span><br><span class="line"><span class="keyword">const</span> debounce = <span class="built_in">require</span>(<span class="string">&#x27;lodash.debounce&#x27;</span>);</span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  res =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 每2秒仅触发一次请求</span></span><br><span class="line">       debounce(</span><br><span class="line">          () =&gt; resolve(config),<span class="number">2000</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的回流与重绘 (Reflow &amp; Repaint)</title>
      <link href="2021/01/23/Reflow-Repaint/"/>
      <url>2021/01/23/Reflow-Repaint/</url>
      
        <content type="html"><![CDATA[<p>在讨论回流与重绘之前，我们要知道：</p><ol><li><p>浏览器使用流式布局模型 (Flow Based Layout)。</p></li><li><p>浏览器会把 <code>HTML</code> 解析成 <code>DOM</code>，把 <code>CSS</code> 解析成 <code>CSSOM</code>，<code>DOM</code> 和 <code>CSSOM</code> 合并就产生了 <code>Render Tree</code>。 </p></li><li><p>有了 <code>Render Tree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。</p></li><li><p>由于浏览器使用流式布局，对 <code>Render Tree</code> 的计算通常只需要遍历一次就可以完成，但 <code>table</code> 及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用 <code>table</code> 布局的原因之一。</p></li></ol><blockquote><p>一句话: 回流必将引起重绘，重绘不一定会引起回流。</p></blockquote><h2 id="回流-Reflow"><a href="#回流-Reflow" class="headerlink" title="回流 (Reflow)"></a>回流 (Reflow)</h2><p>当 Render Tree 中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p><p><strong>会导致回流的操作:</strong></p><ul><li><p>页面首次渲染</p></li><li><p>浏览器窗口大小发生改变</p></li><li><p>元素尺寸或位置发生改变</p></li><li><p>元素内容变化（文字数量或图片大小等等）</p></li><li><p>元素字体大小变化</p></li><li><p>添加或者删除可见的 DOM 元素</p></li><li><p>激活 CSS 伪类（例如: <code>:hover</code>）</p></li><li><p>查询某些属性或调用某些方法</p></li></ul><p><strong>一些常用且会导致回流的属性和方法:</strong></p><ul><li><p><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code></p></li><li><p><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code></p></li><li><p><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code></p></li><li><p><code>scrollIntoView()</code>、<code>scrollIntoViewIfNeeded()</code></p></li><li><p><code>getComputedStyle()</code></p></li><li><p><code>getBoundingClientRect()</code></p></li><li><p><code>scrollTo()</code></p></li></ul><h2 id="重绘-Repaint"><a href="#重绘-Repaint" class="headerlink" title="重绘 (Repaint)"></a>重绘 (Repaint)</h2><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：<code>color</code>、<code>background-color</code>、<code>visibility</code> 等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p><h2 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h2><p><strong>回流比重绘的代价要更高。</strong></p><p>有时即使仅仅回流一个单一的元素，它的父元素以及任何跟随它的元素也会产生回流。</p><blockquote><p>现代浏览器会对频繁的回流或重绘操作进行优化, 浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。</p></blockquote><p>当你访问以下属性或方法时，浏览器会立刻清空队列:</p><ul><li><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code></li></ul><ul><li><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code></li></ul><ul><li><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code></li></ul><ul><li><code>width</code>、<code>height</code></li></ul><ul><li><code>getComputedStyle()</code></li></ul><ul><li><code>getBoundingClientRect()</code></li></ul><p>因为队列中可能会有影响到这些属性或方法返回值的操作，即使你希望获取的信息与队列中操作引发的改变无关，浏览器也会强行清空队列，确保你拿到的值是最精确的。</p><h2 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h2><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><p>避免使用 <code>table</code> 布局。</p></li><li><p>尽可能在 <code>DOM</code> 树的最末端改变 <code>class</code>。</p></li><li><p>避免设置多层内联样式。</p></li><li><p>将动画效果应用到 <code>position</code> 属性为 <code>absolute</code> 或 <code>fixed</code> 的元素上。</p></li><li><p>避免使用 <code>CSS</code> 表达式（例如：<code>calc()</code>）。</p></li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><p>避免频繁操作样式，最好一次性重写 <code>style</code> 属性，或者将样式列表定义为 <code>class</code> 并一次性更改 <code>class</code> 属性。</p></li><li><p>避免频繁操作 <code>DOM</code>，创建一个 <code>documentFragment</code>，在它上面应用所有 <code>DOM</code> 操作，最后再把它添加到文档中。</p></li><li><p>也可以先为元素设置 <code>display: none</code>，操作结束后再把它显示出来。因为在 <code>display</code> 属性为 <code>none</code> 的元素上进行的 <code>DOM</code> 操作不会引发回流和重绘。</p></li><li><p>避免频繁读取会引发 <code>回流/重绘</code> 的属性，如果确实需要多次使用，就用一个变量缓存起来。</p></li><li><p>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>像高级前端开发人员一样使用 Chrome DevTools</title>
      <link href="2021/01/12/ChromeDevTools/"/>
      <url>2021/01/12/ChromeDevTools/</url>
      
        <content type="html"><![CDATA[<h2 id="复制变量"><a href="#复制变量" class="headerlink" title="复制变量"></a>复制变量</h2><blockquote><p>如何将 <code>JavaScript</code> 变量的值复制到其他地方？</p></blockquote><p>在 <code>Chrome</code> 中，有一个名为 <code>copy</code> 的函数可以帮助你复制变量。该 <code>copy</code> 功能不是由 <code>ECMAScript</code> 定义的，而是由 <code>Chrome</code> 提供的。使用此功能，您可以将 <code>JavaScript</code> 变量的值复制到剪贴板。</p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112153757.gif"></p><h2 id="表对象数组"><a href="#表对象数组" class="headerlink" title="表对象数组"></a>表对象数组</h2><pre><code>假设我们有一个这样的对象数组, 在控制台中不容易查看。如果数组更长且元素更复杂，那么它将变得更加难以理解。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112160211.jpg"></p><blockquote><p><code>Chrome</code> 提供了 <code>table</code> 函数，可以将一系列对象列表化。可以让对象数组以表格的形式展示出来!</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112154508.png"></p><h2 id="隐藏元素的快捷方式"><a href="#隐藏元素的快捷方式" class="headerlink" title="隐藏元素的快捷方式"></a>隐藏元素的快捷方式</h2><blockquote><p>在调试 <code>CSS</code> 样式时，我们通常需要隐藏一个元素。如果选择元素并按 <code>H</code> 键盘，则可以快速隐藏元素。此操作是将 <code>visibility: hidden !important;</code> 样式添加到相应的元素。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112155003.gif"></p><h2 id="将DOM元素存储在全局临时变量中"><a href="#将DOM元素存储在全局临时变量中" class="headerlink" title="将DOM元素存储在全局临时变量中"></a>将DOM元素存储在全局临时变量中</h2><blockquote><p>如果要在控制台中快速获取 <code>DOM元素</code> 引用，可以执行以下操作: </p></blockquote><ul><li>选择 HTML 元素</li><li>右键点击鼠标</li><li>点击 Store as a global variable</li></ul><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112171845.gif"></p><h2 id="触发CSS伪类"><a href="#触发CSS伪类" class="headerlink" title="触发CSS伪类"></a>触发CSS伪类</h2><blockquote><p>我们可能为一个元素编写多个伪类，并且为了方便我们测试这些样式，我们可以直接在 <code>元素面板</code> 中触发这些样式。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112172413.gif"></p><h2 id="在元素面板中拖放"><a href="#在元素面板中拖放" class="headerlink" title="在元素面板中拖放"></a>在元素面板中拖放</h2><blockquote><p>有时我们想调整页面上某些 <code>DOM元素</code> 的位置以测试 <code>UI</code>。在 <code>元素面板</code> 中，您可以拖放任何 <code>HTML元素</code> 并更改其在页面中的位置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112174634.gif"></p><h2 id="重新发送-XHR-请求"><a href="#重新发送-XHR-请求" class="headerlink" title="重新发送 XHR 请求"></a>重新发送 XHR 请求</h2><blockquote><p>在我们的前端项目中，我们经常需要使用 <code>XHR</code> 向后端发出请求以获取数据。如果您想重新发送 <code>XHR</code> 请求，该怎么办？<br>对于新手来说，他可能会刷新页面，但这可能很麻烦。实际上，我们可以直接在 <code>网络面板</code> 中进行调试。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113145430.jpg"></p><h2 id="调整网络请求速度"><a href="#调整网络请求速度" class="headerlink" title="调整网络请求速度"></a>调整网络请求速度</h2><blockquote><p>我们测试的时候有时需要限制网速，来看各种情况下的加载感受。<code>网络面板</code> 可以设置网络的通信方式为断网模式或者模拟Fast 3G，Slow 3G等情况。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113150416.jpg"></p><h2 id="不使用缓存加载"><a href="#不使用缓存加载" class="headerlink" title="不使用缓存加载"></a>不使用缓存加载</h2><blockquote><p>我们在开发的时候常常会因为缓存问题耽误很多开发的时间，一般来说因为缓存造成的问题还是很难解决的，如果考虑不到缓存那么就会很浪费时间，最后发现是缓存问题那么就是会很烦，如何不使用缓存功能呢? 详细如下</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113151115.jpg"></p><h2 id="不清空日志"><a href="#不清空日志" class="headerlink" title="不清空日志"></a>不清空日志</h2><blockquote><p>你是否曾为页面提交成功后跳转或刷新页面了,来不及看网络的各个请求而烦恼过？其实 <code>网络面板</code> 也提供了不清空日志的选项！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113151952.jpg"></p><h2 id="前端本地存储"><a href="#前端本地存储" class="headerlink" title="前端本地存储"></a>前端本地存储</h2><blockquote><p>在 <code>应用面板</code> 内我们可以查看到所有的前端数据库存储情况</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113152418.jpg"></p><h2 id="不加载图片-JavaScript-脚本"><a href="#不加载图片-JavaScript-脚本" class="headerlink" title="不加载图片, JavaScript 脚本"></a>不加载图片, <code>JavaScript</code> 脚本</h2><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113152938.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113153456.jpg"></p><h2 id="命令菜单"><a href="#命令菜单" class="headerlink" title="命令菜单"></a>命令菜单</h2><blockquote><p><code>命令</code> 菜单用于 <code>Chrome</code> 浏览器，而命令行管理程序用于 <code>Linux</code>。 通过 <code>命令</code> 菜单, 您可以输入一些命令来操作 <code>Chrome</code>。</p></blockquote><p>首先, 我们打开 <code>Chrome</code> 开发者工具, 然后使用以下快捷方式打开 <code>命令</code> 菜单:</p><ul><li>windows: CTRL + Shift + P</li><li>macOS: Cmd + Shift + P</li></ul><p>或者, 我们可以单击下面的按钮将其打开:<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113153844.jpg"></p><p>然后，我们可以看到 <code>命令</code> 面板, 在这里我们可以选择各种命令来执行各种强大的功能。<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113154106.jpg"></p><h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><blockquote><p>捕获屏幕的一部分是非常常见的要求，并且我确定您当前的计算机上已经具有非常方便的截图软件。但是，您可以完成以下任务吗？</p></blockquote><ol><li>截取网页上所有内容的屏幕快照，包括可视窗口中未出现的所有内容</li><li>精确捕获DOM元素的内容</li></ol><p>这是两个常见的要求, 但是使用操作系统随附的屏幕截图工具很难解决。此时, 我们可以使用命令来帮助我们完成此要求。</p><h4 id="截取网页上所有内容的屏幕快照-对应的命令为-Capture-full-size-screenshot"><a href="#截取网页上所有内容的屏幕快照-对应的命令为-Capture-full-size-screenshot" class="headerlink" title="截取网页上所有内容的屏幕快照, 对应的命令为 Capture full size screenshot"></a>截取网页上所有内容的屏幕快照, 对应的命令为 <code>Capture full size screenshot</code></h4><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113154424.jpg"></p><h4 id="截取-DOM-元素的内容-对应的命令为-Capture-node-screenshot"><a href="#截取-DOM-元素的内容-对应的命令为-Capture-node-screenshot" class="headerlink" title="截取 DOM 元素的内容, 对应的命令为 Capture node screenshot "></a>截取 DOM 元素的内容, 对应的命令为 <code>Capture node screenshot </code></h4><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113155158.jpg"></p><h2 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h2><h3 id="使用-在控制台中引用上一次操作的结果"><a href="#使用-在控制台中引用上一次操作的结果" class="headerlink" title="使用 $_ 在控制台中引用上一次操作的结果"></a>使用 <code>$_</code> 在控制台中引用上一次操作的结果</h3><blockquote><p><code>$_</code>  它引用先前操作的结果，其值始终等于控制台中上一次操作的结果。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113155500.jpeg"></p><h3 id="使用-0-在控制台中引用当前选定的元素"><a href="#使用-0-在控制台中引用当前选定的元素" class="headerlink" title="使用 $0 在控制台中引用当前选定的元素"></a>使用 <code>$0</code> 在控制台中引用当前选定的元素</h3><blockquote><p><code>$0</code> 它引用 <code>元素</code> 面板中当前选定的元素。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210113155802.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五分钟搭建免费cdn加速图床</title>
      <link href="2020/12/17/picgo/"/>
      <url>2020/12/17/picgo/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步-Github-相关设置"><a href="#第一步-Github-相关设置" class="headerlink" title="第一步, Github 相关设置"></a>第一步, Github 相关设置</h1><blockquote><p>本教程跳过登录、注册 <code>github</code> 账号的步骤, 若还不了解 <code>github</code> 的童鞋请自行百度, 登录 <code>github</code> 账号之后再跟着操作.</p></blockquote><h2 id="创建图床仓库-Create-a-new-repository"><a href="#创建图床仓库-Create-a-new-repository" class="headerlink" title="创建图床仓库 (Create a new repository)"></a>创建图床仓库 (Create a new repository)</h2><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111841.jpg"></p><h2 id="创建令牌-（Generate-a-new-token）"><a href="#创建令牌-（Generate-a-new-token）" class="headerlink" title="创建令牌 （Generate a new token）"></a>创建令牌 （Generate a new token）</h2><h3 id="打开个人设置-（Settings）"><a href="#打开个人设置-（Settings）" class="headerlink" title="打开个人设置 （Settings）"></a>打开个人设置 （Settings）</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111843.png"></p><h3 id="打开开发者设置-Developer-settings"><a href="#打开开发者设置-Developer-settings" class="headerlink" title="打开开发者设置 (Developer settings)"></a>打开开发者设置 (Developer settings)</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111842.jpg"></p><h3 id="创建令牌"><a href="#创建令牌" class="headerlink" title="创建令牌"></a>创建令牌</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111844.png"></p><h3 id="填写令牌相关信息"><a href="#填写令牌相关信息" class="headerlink" title="填写令牌相关信息"></a>填写令牌相关信息</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228113627.png"></p><h3 id="保存令牌"><a href="#保存令牌" class="headerlink" title="保存令牌"></a>保存令牌</h3><blockquote><p>刷新页面就再也看不到token了，所以一定要在创建成功时保存下来</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111846.jpg"></p><h1 id="第二步-PicGo-安装和配置"><a href="#第二步-PicGo-安装和配置" class="headerlink" title="第二步, PicGo 安装和配置"></a>第二步, <code>PicGo</code> 安装和配置</h1><h2 id="下载安装工具-PicGo"><a href="#下载安装工具-PicGo" class="headerlink" title="下载安装工具 PicGo"></a>下载安装工具 <code>PicGo</code></h2><blockquote><p><code>PicGo</code> 目前最新正式版v2.2.2, 请根据自身系统选择对应安装包下载  <a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2">下载地址</a> </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111847.png"></p><h2 id="安装-PicGo-插件-github-plus"><a href="#安装-PicGo-插件-github-plus" class="headerlink" title="安装 PicGo 插件 github-plus"></a>安装 <code>PicGo</code> 插件 <code>github-plus</code></h2><blockquote><p>插件说明: 如果不安装 <code>github-plus</code> 也可以正常使用, 但是由于 <code>PicGo</code> 提供了图片相册功能，我们如果希望这个相册里的图片能和<code>github</code>图床仓库里的图片同步, 就需要该插件, 否则 <code>PicGo</code> 相册里面的图片删除了, <code>github</code> 图床仓库里的图片不会跟着删除</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111849.png"></p><h2 id="图床设置"><a href="#图床设置" class="headerlink" title="图床设置"></a>图床设置</h2><blockquote><p>我们从菜单的<code>图床设置</code>中找到 <code>githubPlus</code>, 安装完插件它应该会出现在该菜单下, 如果没有可尝试重启软件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111848.png"></p><h1 id="第三步-上传和使用"><a href="#第三步-上传和使用" class="headerlink" title="第三步, 上传和使用"></a>第三步, 上传和使用</h1><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111850.png"></p><h2 id="使用图片"><a href="#使用图片" class="headerlink" title="使用图片"></a>使用图片</h2><blockquote><p>上传成功后 <code>github</code> 仓库就会添加对应的图片, <code>PicGo</code> 相册内也会出现对应的图片</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111851.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>至此教程就结束了, 此刻你就应经拥有了一个带有cdn加速的免费图床可以正常使用了, 并且还有一个免费的图床管理软件可以同步操作你的图片, 该软件还有诸多便利功能, 就留给大家自己摸索啦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 性能 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 的自定义指令的用法与实例</title>
      <link href="2020/12/16/directives/"/>
      <url>2020/12/16/directives/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端开发的同学们应该对 <code>Element UI</code> 不陌生，而日常开发中，多少会存在一些组件无法完全满足我们需求的情况，或者说想在原组件的基础上附加一些功能，当遇到需要附加一些不是特别复杂的小东西的时候，采用 Vue 的自定义指令来实现，将会显得十分优雅</p></blockquote><h2 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h2><p>我们知道 <code>Element UI</code> 的 <code>el-input</code> 组件 <code>type</code> 为 <code>textarea</code> 时，可通过设置 <code>show-word-limit</code> 属性来展示字数统计。但是我们当前项目使用的 <code>Element UI</code> 版本为 <code>2.5.21</code>, 是没有该属性的，而我们暂时又不方便升级 <code>Element UI</code> 版本，而产品经理坚持要求这个小东西，那么看看如何解决这个问题</p><p>实际上这个小功能十分简单，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-input-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">      <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;el-input-count&quot;</span>&gt;</span>&#123;&#123; desc.length &#125;&#125;/30<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/ecmascript-6&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        desc: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.el-input-wrap</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.el-input-count</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#909399</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    bottom: 5px;</span><br><span class="line">    right: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过手动的方式添加父元素设置定位属性，再添加 <code>span</code> 元素设置定位和样式，来展示动态的长度限制效果，这么做就可以实现和新版本的 <code>show-word-limit</code> 一模一样的效果，然而始终有些许麻烦，每次用到的地方都要这么来一遍，且不太好抽出来封装组件，那么是不是可以考虑一下使用自定义指令来做呢？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最终效果期望是通过一个指令来实现上面的效果，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和之前对比少了些什么？我们需要做些什么？</p><p>1，创建一个父元素 设置定位属性，这一步是展示文本是否定位在输入框的右下角的关键</p><p>2，创建一个 <code>span</code> 元素 设置样式，用于展示效果</p><p>3，将 <code>el-input</code> 绑定的值的长度填到 <code>span</code> 元素中</p><p>4，每次 <code>el-input</code> 绑定的值的长度改变时，更新 <code>span</code> 元素的值</p><p>思路有了，并不是很复杂，那么接下来我们看看，如何来编写这个代码</p><h2 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h2><p>首先创建一个js文件 <code>showWordLimit.js</code>, 然后 <code>export</code> 一个可以注册指令的对象，然后在钩子函数 <code>inserted</code> 时，我们来实现第一步，创建一个父元素，并设置定位属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>既然是父元素，我们还需要将使用了该指令的 <code>el-input</code> 元素插入到这个父元素内，通过钩子的参数来拿到 <code>dom</code> 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样下来，第一步就算完成了，下面继续创建一个 <code>span</code> 元素，并设置好样式，同时还要插入到刚刚创建的父元素内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    oSpan.innerText = <span class="string">&#x27;0/30&#x27;</span></span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到 <code>innerText</code> 的值，应该是个变量，根据 <code>el-input</code> 的 <code>value</code> 值长度来决定的，这里就需要用到动态指令的做法，在使用指令的时候，将这个值传过来，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span>=<span class="string">&quot;desc.length&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到 <code>showWordLimit.js</code>，怎么接收这个值呢？同样也是通过钩子的参数 <code>binding</code> 能拿到，不清楚的可以参考Vue官方文档，自定义指令这一块，写得很清楚，拿到了之后，替换掉 <code>span</code> 元素的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    <span class="comment">// binding.value 等于使用该指令的 el-input 组件的值的长度, 此处使用的ES6字符串模板拼接</span></span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value&#125;</span>/30`</span></span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，到目前为止，姑且可以试用一下了，在 <code>man.js</code> 导入并注册该指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js如果没有使用 vue-cli 脚手架的同学，需要找到对应的入口文件导入注册</span></span><br><span class="line"><span class="keyword">import</span> showWordLimit <span class="keyword">from</span> <span class="string">&#x27;@/directive/showWordLimit&#x27;</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;limit&#x27;</span>, showWordLimit)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在需要用到的页面中 使用指令 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span>=<span class="string">&quot;desc.length&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候会发现，展示效果的数值，是不会随着输入框的内容长度变换而更新的，虽然是做了传递文本框内容长度的处理，但是在 <code>inserted</code> 内，它只会执行一次，如果文本框默认值的长度就有10，那么它显示的就将是10/30，然后我们编辑了内容，长度改变了，它依然还是10/30，如果想要每次编辑内容都更新这个展示效果的数值，那么久要用到另外一个钩子函数 <code>update</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    <span class="comment">// binding.value 等于使用该指令的 el-input 组件的值的长度, 此处使用的ES6字符串模板拼接</span></span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value&#125;</span>/30`</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了在 update 生命周期函数内方便获取到它，添加个 id </span></span><br><span class="line">    oSpan.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value&#125;</span>/30`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在展示效果的数值应该已经可以实现实时更新了，细心的同学应该会发现，有个地方有遗漏，那就是展示效果的最大字符限制的数字，目前是固定死的30，那如果想限制字符为其他数值，就不行了，那要解决这个问题也非常简单，将传递过来的值，改为数组的形式即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span>=<span class="string">&quot;[desc.length, 50]&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    <span class="comment">// binding.value 等于使用该指令的 el-input 组件的值的长度, 此处使用的ES6字符串模板拼接</span></span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value[<span class="number">0</span>]&#125;</span>/<span class="subst">$&#123;binding.value[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了在 update 生命周期函数内方便获取到它，添加个 id </span></span><br><span class="line">    oSpan.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value[<span class="number">0</span>]&#125;</span>/<span class="subst">$&#123;binding.value[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此，这个自定义指令就算完全做好了，当然难度不大，这篇文章的目的主要是希望可以给一些还没有接触过自定义指令应用的同学做个引导，讲述一个完整的应用流程和思路。</p></blockquote><h2 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h2><h3 id="v-copy-复制粘贴指令"><a href="#v-copy-复制粘贴指令" class="headerlink" title="v-copy 复制粘贴指令"></a>v-copy 复制粘贴指令</h3><p>需求：实现一键复制文本内容，用于鼠标右键粘贴。</p><p>思路：</p><ol><li>动态创建 textarea 标签，并设置 readOnly 属性及移出可视区域</li><li>将要 copy 的值赋给 textarea 标签的 value 属性，并插入到 body</li><li>选中值 textarea 并复制</li><li>将 body 中插入的 textarea 移除</li><li>在第一次调用时绑定事件，在解绑时移除事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copy = &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">    el.handler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!el.$value) &#123;</span><br><span class="line">        <span class="comment">// 值为空的时候，给出提示。可根据项目UI仔细设计</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;无复制内容&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 动态创建 textarea 标签</span></span><br><span class="line">      <span class="keyword">const</span> textarea = <span class="built_in">document</span>.createElement(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">      <span class="comment">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span><br><span class="line">      textarea.readOnly = <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">      textarea.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">      textarea.style.left = <span class="string">&#x27;-9999px&#x27;</span></span><br><span class="line">      <span class="comment">// 将要 copy 的值赋给 textarea 标签的 value 属性</span></span><br><span class="line">      textarea.value = el.$value</span><br><span class="line">      <span class="comment">// 将 textarea 插入到 body 中</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(textarea)</span><br><span class="line">      <span class="comment">// 选中值并复制</span></span><br><span class="line">      textarea.select()</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">document</span>.execCommand(<span class="string">&#x27;Copy&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;复制成功&#x27;</span>) <span class="comment">// 可根据项目UI仔细设计</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(textarea)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绑定点击事件，就是所谓的一键 copy 啦</span></span><br><span class="line">    el.addEventListener(<span class="string">&#x27;click&#x27;</span>, el.handler)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传进来的值更新的时候触发</span></span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指令与元素解绑的时候，移除事件绑定</span></span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">&#x27;click&#x27;</span>, el.handler)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> copy</span><br></pre></td></tr></table></figure><p>使用：给 Dom 加上 v-copy 及复制的文本即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-copy</span>=<span class="string">&quot;copyText&quot;</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        copyText: <span class="string">&#x27;a copy directives&#x27;</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-longpress-长按指令"><a href="#v-longpress-长按指令" class="headerlink" title="v-longpress 长按指令"></a>v-longpress 长按指令</h3><p>需求：实现长按，用户需要按下并按住按钮几秒钟，触发相应的事件</p><p>思路：</p><ol><li>创建一个计时器， 2 秒后执行函数</li><li>当用户按下按钮时触发 mousedown 事件，启动计时器；用户松开按钮时调用 mouseout 事件。</li><li>如果 mouseup 事件 2 秒内被触发，就清除计时器，当作一个普通的点击事件</li><li>如果计时器没有在 2 秒内清除，则判定为一次长按，可以执行关联的函数。</li><li>在移动端要考虑 touchstart，touchend 事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> longpress = &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> binding.value !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;callback must be a function&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">let</span> pressTimer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 创建计时器（ 2秒后执行函数 ）</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.type === <span class="string">&#x27;click&#x27;</span> &amp;&amp; e.button !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (pressTimer === <span class="literal">null</span>) &#123;</span><br><span class="line">        pressTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          handler()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取消计时器</span></span><br><span class="line">    <span class="keyword">let</span> cancel = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (pressTimer !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(pressTimer)</span><br><span class="line">        pressTimer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行函数</span></span><br><span class="line">    <span class="keyword">const</span> handler = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      binding.value(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加事件监听器</span></span><br><span class="line">    el.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, start)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, start)</span><br><span class="line">    <span class="comment">// 取消计时器</span></span><br><span class="line">    el.addEventListener(<span class="string">&#x27;click&#x27;</span>, cancel)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>, cancel)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;touchend&#x27;</span>, cancel)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;touchcancel&#x27;</span>, cancel)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传进来的值更新的时候触发</span></span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指令与元素解绑的时候，移除事件绑定</span></span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">&#x27;click&#x27;</span>, el.handler)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> longpress</span><br></pre></td></tr></table></figure><p>使用：给 Dom 加上 longpress 及回调函数即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-longpress</span>=<span class="string">&quot;longpress&quot;</span>&gt;</span>长按<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    longpress () &#123;</span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;长按指令生效&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-debounce-输入框防抖指令"><a href="#v-debounce-输入框防抖指令" class="headerlink" title="v-debounce 输入框防抖指令"></a>v-debounce 输入框防抖指令</h3><p>背景：在开发中，有些提交保存按钮有时候会在短时间内被点击多次，这样就会多次重复请求后端接口，造成数据的混乱，比如新增表单的提交按钮，多次点击就会新增多条重复的数据。</p><p>需求：防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。</p><p>思路：</p><ol><li>定义一个延迟执行的方法，如果在延迟时间内再调用该方法，则重新计算执行时间。</li><li>将时间绑定在 click 方法上。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      &#125;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        binding.value()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> debounce</span><br></pre></td></tr></table></figure><p>使用：给 Dom 加上 v-debounce 及回调函数即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-debounce</span>=<span class="string">&quot;debounceClick&quot;</span>&gt;</span>防抖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    debounceClick () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;只触发一次&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-emoji-禁止表情及特殊字符"><a href="#v-emoji-禁止表情及特殊字符" class="headerlink" title="v-emoji 禁止表情及特殊字符"></a>v-emoji 禁止表情及特殊字符</h3><p>背景：开发中遇到的表单输入，往往会有对输入内容的限制，比如不能输入表情和特殊字符，只能输入数字或字母等。</p><p>我们常规方法是在每一个表单的@change 事件上做处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;note&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;vaidateEmoji&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">vaidateEmoji</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="regexp">/[^\u4E00-\u9FA5|\d|\a-zA-Z|\r\n\s,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[\]]|\s/g</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.note = <span class="built_in">this</span>.note.replace(reg, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样代码量比较大而且不好维护，所以我们需要自定义一个指令来解决这问题。</p><p>需求：根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> findEle = <span class="function">(<span class="params">parent, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> parent.tagName.toLowerCase() === type ? parent : parent.querySelector(type)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> trigger = <span class="function">(<span class="params">el, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> e = <span class="built_in">document</span>.createEvent(<span class="string">&#x27;HTMLEvents&#x27;</span>)</span><br><span class="line">  e.initEvent(type, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  el.dispatchEvent(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emoji = &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 正则规则可根据需求自定义</span></span><br><span class="line">    <span class="keyword">var</span> regRule = <span class="regexp">/[^\u4E00-\u9FA5|\d|\a-zA-Z|\r\n\s,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[\]]|\s/g</span></span><br><span class="line">    <span class="keyword">let</span> $inp = findEle(el, <span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">    el.$inp = $inp</span><br><span class="line">    $inp.handle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> val = $inp.value</span><br><span class="line">      $inp.value = val.replace(regRule, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      trigger($inp, <span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    $inp.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, $inp.handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    el.$inp.removeEventListener(<span class="string">&#x27;keyup&#x27;</span>, el.$inp.handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emoji</span><br></pre></td></tr></table></figure><p>使用：将需要校验的输入框加上 v-emoji 即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;note&quot;</span> <span class="attr">v-emoji</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-LazyLoad-图片懒加载"><a href="#v-LazyLoad-图片懒加载" class="headerlink" title="v-LazyLoad 图片懒加载"></a>v-LazyLoad 图片懒加载</h3><p>背景：在类电商类项目，往往存在大量的图片，如 banner 广告图，菜单导航图，美团等商家列表头图等。图片众多以及图片体积过大往往会影响页面加载速度，造成不良的用户体验，所以进行图片懒加载优化势在必行。</p><p>需求：实现一个图片懒加载指令，只加载浏览器可见区域的图片。</p><p>思路：</p><ol><li>图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的</li><li>拿到所有的图片 dome ，遍历每个图片判断当前图片是否到了可视区范围内</li><li>如果到了就设置图片的 src 属性，否则显示默认图片</li></ol><p>图片懒加载有两种方式可以实现，一是绑定 srcoll 事件进行监听，二是使用 IntersectionObserver 判断图片是否到了可视区域，但是有浏览器兼容性问题。</p><p>下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 IntersectionObserver API，如果支持就使用 IntersectionObserver 实现懒加载，否则则使用 srcoll 事件监听 + 节流的方法实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LazyLoad = &#123;</span><br><span class="line">  <span class="comment">// install方法</span></span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue, options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> defaultSrc = options.default</span><br><span class="line">    Vue.directive(<span class="string">&#x27;lazy&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">bind</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">        LazyLoad.init(el, binding.value, defaultSrc)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">inserted</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (IntersectionObserver) &#123;</span><br><span class="line">          LazyLoad.observe(el)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          LazyLoad.listenerScroll(el)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params">el, val, def</span>)</span> &#123;</span><br><span class="line">    el.setAttribute(<span class="string">&#x27;data-src&#x27;</span>, val)</span><br><span class="line">    el.setAttribute(<span class="string">&#x27;src&#x27;</span>, def)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 利用IntersectionObserver监听el</span></span><br><span class="line">  <span class="function"><span class="title">observe</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> io = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> realSrc = el.dataset.src</span><br><span class="line">      <span class="keyword">if</span> (entries[<span class="number">0</span>].isIntersecting) &#123;</span><br><span class="line">        <span class="keyword">if</span> (realSrc) &#123;</span><br><span class="line">          el.src = realSrc</span><br><span class="line">          el.removeAttribute(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    io.observe(el)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 监听scroll事件</span></span><br><span class="line">  <span class="function"><span class="title">listenerScroll</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = LazyLoad.throttle(LazyLoad.load, <span class="number">300</span>)</span><br><span class="line">    LazyLoad.load(el)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      handler(el)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载真实图片</span></span><br><span class="line">  <span class="function"><span class="title">load</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> windowHeight = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    <span class="keyword">const</span> elTop = el.getBoundingClientRect().top</span><br><span class="line">    <span class="keyword">const</span> elBtm = el.getBoundingClientRect().bottom</span><br><span class="line">    <span class="keyword">const</span> realSrc = el.dataset.src</span><br><span class="line">    <span class="keyword">if</span> (elTop - windowHeight &lt; <span class="number">0</span> &amp;&amp; elBtm &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (realSrc) &#123;</span><br><span class="line">        el.src = realSrc</span><br><span class="line">        el.removeAttribute(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 节流</span></span><br><span class="line">  <span class="function"><span class="title">throttle</span>(<span class="params">fn, delay</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">let</span> prevTime</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> currTime = <span class="built_in">Date</span>.now()</span><br><span class="line">      <span class="keyword">const</span> context = <span class="built_in">this</span></span><br><span class="line">      <span class="keyword">if</span> (!prevTime) prevTime = currTime</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currTime - prevTime &gt; delay) &#123;</span><br><span class="line">        prevTime = currTime</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        prevTime = <span class="built_in">Date</span>.now()</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> LazyLoad</span><br></pre></td></tr></table></figure><p>使用，将组件内 <img> 标签的 src 换成 v-LazyLoad</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-LazyLoad</span>=<span class="string">&quot;xxx.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-permission-权限校验指令"><a href="#v-permission-权限校验指令" class="headerlink" title="v-permission 权限校验指令"></a>v-permission 权限校验指令</h3><p>背景：在一些后台管理系统，我们可能需要根据用户角色进行一些操作权限的判断，很多时候我们都是粗暴地给一个元素添加 v-if / v-show 来进行显示隐藏，但如果判断条件繁琐且多个地方需要判断，这种方式的代码不仅不优雅而且冗余。针对这种情况，我们可以通过全局自定义指令来处理。</p><p>需求：自定义一个权限指令，对需要权限判断的 dom 进行显示隐藏。</p><p>思路：</p><ol><li>自定义一个权限数组</li><li>判断用户的权限是否在这个数组内，如果是则显示，否则则移除 Dom</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkArray</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">  <span class="keyword">let</span> index = arr.indexOf(key)</span><br><span class="line">  <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 有权限</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 无权限</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permission = &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> permission = binding.value <span class="comment">// 获取到 v-permission的值</span></span><br><span class="line">    <span class="keyword">if</span> (permission) &#123;</span><br><span class="line">      <span class="keyword">let</span> hasPermission = checkArray(permission)</span><br><span class="line">      <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">        <span class="comment">// 没有权限 移除Dom元素</span></span><br><span class="line">        el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> permission</span><br></pre></td></tr></table></figure><p>使用：给 v-permission 赋值判断即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;1&#x27;&quot;</span>&gt;</span>权限按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不显示 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;10&#x27;&quot;</span>&gt;</span>权限按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue-waterMarker-实现页面水印"><a href="#vue-waterMarker-实现页面水印" class="headerlink" title="vue-waterMarker 实现页面水印"></a>vue-waterMarker 实现页面水印</h3><p>需求：给整个页面添加背景水印</p><p>思路：</p><ol><li>使用 canvas 特性生成 base64 格式的图片文件，设置其字体大小，颜色等。</li><li>将其设置为背景图片，从而实现页面或组件水印效果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addWaterMarker</span>(<span class="params">str, parentNode, font, textColor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 水印文字，父元素，字体，文字颜色</span></span><br><span class="line">  <span class="keyword">var</span> can = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">  parentNode.appendChild(can)</span><br><span class="line">  can.width = <span class="number">200</span></span><br><span class="line">  can.height = <span class="number">150</span></span><br><span class="line">  can.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> cans = can.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">  cans.rotate((-<span class="number">20</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line">  cans.font = font || <span class="string">&#x27;16px Microsoft JhengHei&#x27;</span></span><br><span class="line">  cans.fillStyle = textColor || <span class="string">&#x27;rgba(180, 180, 180, 0.3)&#x27;</span></span><br><span class="line">  cans.textAlign = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">  cans.textBaseline = <span class="string">&#x27;Middle&#x27;</span></span><br><span class="line">  cans.fillText(str, can.width / <span class="number">10</span>, can.height / <span class="number">2</span>)</span><br><span class="line">  parentNode.style.backgroundImage = <span class="string">&#x27;url(&#x27;</span> + can.toDataURL(<span class="string">&#x27;image/png&#x27;</span>) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> waterMarker = &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    addWaterMarker(binding.value.text, el, binding.value.font, binding.value.textColor)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> waterMarker</span><br></pre></td></tr></table></figure><p>使用，设置水印文案，颜色，字体大小即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-waterMarker</span>=<span class="string">&quot;&#123;text:&#x27;lzg版权所有&#x27;,textColor:&#x27;rgba(180, 180, 180, 0.4)&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-draggable-拖拽指令"><a href="#v-draggable-拖拽指令" class="headerlink" title="v-draggable 拖拽指令"></a>v-draggable 拖拽指令</h3><p>需求：实现一个拖拽指令，可在页面可视区域任意拖拽元素。</p><p>思路：</p><ol><li>设置需要拖拽的元素为相对定位，其父元素为绝对定位。</li><li>鼠标按下(onmousedown)时记录目标元素当前的 left 和 top 值。</li><li>鼠标移动(onmousemove)时计算每次移动的横向距离和纵向距离的变化值，并改变元素的 left 和 top 值</li><li>鼠标松开(onmouseup)时完成一次拖拽</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> draggable = &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    el.style.cursor = <span class="string">&#x27;move&#x27;</span></span><br><span class="line">    el.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> disx = e.pageX - el.offsetLeft</span><br><span class="line">      <span class="keyword">let</span> disy = e.pageY - el.offsetTop</span><br><span class="line">      <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> x = e.pageX - disx</span><br><span class="line">        <span class="keyword">let</span> y = e.pageY - disy</span><br><span class="line">        <span class="keyword">let</span> maxX = <span class="built_in">document</span>.body.clientWidth - <span class="built_in">parseInt</span>(<span class="built_in">window</span>.getComputedStyle(el).width)</span><br><span class="line">        <span class="keyword">let</span> maxY = <span class="built_in">document</span>.body.clientHeight - <span class="built_in">parseInt</span>(<span class="built_in">window</span>.getComputedStyle(el).height)</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          x = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; maxX) &#123;</span><br><span class="line">          x = maxX</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          y = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &gt; maxY) &#123;</span><br><span class="line">          y = maxY</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        el.style.left = x + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        el.style.top = y + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="built_in">document</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> draggable</span><br></pre></td></tr></table></figure><p>使用: 在 Dom 上加上 v-draggable 即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-dialog&quot;</span> <span class="attr">v-draggable</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五招让你成为Vue.js大师</title>
      <link href="2020/12/11/vueMoves/"/>
      <url>2020/12/11/vueMoves/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对大部分人来说, 掌握Vue.js基本的几个API后就已经能够正常地开发前端网站。但如果你想更加高效地使用Vue来开发, 成为Vue.js大师, 那下面的这五招你一定得认真学习一下了。 </p></blockquote><h1 id="第一招-化繁为简的Watchers"><a href="#第一招-化繁为简的Watchers" class="headerlink" title="第一招: 化繁为简的Watchers"></a>第一招: 化繁为简的Watchers</h1><p>场景还原:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    this.fetchPostList()</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">    searchInputValue()&#123;</span><br><span class="line">        this.fetchPostList()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件创建的时候我们获取一次列表, 同时监听input框, 每当发生变化的时候重新获取一次筛选后的列表这个场景很常见, 有没有办法优化一下呢？<br>招式解析:<br>首先, 在watchers中, 可以直接使用函数的字面量名称；其次, 声明immediate:true表示创建组件时立马执行一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    searchInputValue:&#123;</span><br><span class="line">        handler: &#39;fetchPostList&#39;,</span><br><span class="line">        immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二招-一劳永逸的组件注册"><a href="#第二招-一劳永逸的组件注册" class="headerlink" title="第二招: 一劳永逸的组件注册"></a>第二招: 一劳永逸的组件注册</h1><p>场景还原:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import BaseButton from &#39;.&#x2F;baseButton&#39;</span><br><span class="line">import BaseIcon from &#39;.&#x2F;baseIcon&#39;</span><br><span class="line">import BaseInput from &#39;.&#x2F;baseInput&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseButton,</span><br><span class="line">    BaseIcon,</span><br><span class="line">    BaseInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;BaseInput v-model&#x3D;&quot;searchText&quot; @keydown.enter&#x3D;&quot;search&quot;&#x2F;&gt;</span><br><span class="line">&lt;BaseButton @click&#x3D;&quot;search&quot;&gt;</span><br><span class="line">  &lt;BaseIcon name&#x3D;&quot;search&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;BaseButton&gt;</span><br></pre></td></tr></table></figure><p>我们写了一堆基础UI组件, 然后每次我们需要使用这些组件的时候, 都得先import, 然后声明components, 很繁琐！秉持能偷懒就偷懒的原则, 我们要想办法优化！<br>招式解析:<br>我们需要借助一下神器webpack, 使用 require.context() 方法来创建自己的（模块）上下文, 从而实现自动动态require组件。这个方法需要3个参数: 要搜索的文件夹目录, 是否还应该搜索它的子目录, 以及一个匹配文件的正则表达式。<br>我们在components文件夹添加一个叫global.js的文件, 在这个文件里借助webpack动态将需要的基础组件统统打包进来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">function capitalizeFirstLetter(string) &#123;</span><br><span class="line">  return string.charAt(0).toUpperCase() + string.slice(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const requireComponent &#x3D; require.context(</span><br><span class="line">  &#39;.&#39;, false, &#x2F;\.vue$&#x2F;</span><br><span class="line">   &#x2F;&#x2F; 找到components文件夹下以.vue命名的文件</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(fileName &#x3D;&gt; &#123;</span><br><span class="line">  const componentConfig &#x3D; requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  const componentName &#x3D; capitalizeFirstLetter(</span><br><span class="line">    fileName.replace(&#x2F;^\.\&#x2F;&#x2F;, &#39;&#39;).replace(&#x2F;\.\w+$&#x2F;, &#39;&#39;)</span><br><span class="line">    &#x2F;&#x2F; 因为得到的filename格式是: &#39;.&#x2F;baseButton.vue&#39;, 所以这里我们去掉头和尾, 只保留真正的文件名</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  Vue.component(componentName, componentConfig.default || componentConfig)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后我们在main.js中import ‘components/global.js’, 然后我们就可以随时随地使用这些基础组件, 无需手动引入了。</p><h1 id="第三招-釜底抽薪的router-key"><a href="#第三招-釜底抽薪的router-key" class="headerlink" title="第三招: 釜底抽薪的router key"></a>第三招: 釜底抽薪的router key</h1><p>场景还原:<br>下面这个场景真的是伤透了很多程序员的心…先默认大家用的是Vue-router来实现路由的控制。<br>假设我们在写一个博客网站, 需求是从/post-page/a, 跳转到/post-page/b。然后我们惊人的发现, 页面跳转后数据竟然没更新？！原因是vue-router”智能地”发现这是同一个组件, 然后它就决定要复用这个组件, 所以你在created函数里写的方法压根就没执行。通常的解决方案是监听route的变化来初始化数据, 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    loading: false,</span><br><span class="line">    error: null,</span><br><span class="line">    post: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, </span><br><span class="line">watch: &#123;</span><br><span class="line">  &#39;$route&#39;: &#123;</span><br><span class="line">    handler: &#39;resetData&#39;,</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  resetData() &#123;</span><br><span class="line">    this.loading &#x3D; false</span><br><span class="line">    this.error &#x3D; null</span><br><span class="line">    this.post &#x3D; null</span><br><span class="line">    this.getPost(this.$route.params.id)</span><br><span class="line">  &#125;,</span><br><span class="line">  getPost(id)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bug是解决了, 可每次这么写也太不优雅了吧？秉持着能偷懒则偷懒的原则, 我们希望代码这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    loading: false,</span><br><span class="line">    error: null,</span><br><span class="line">    post: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">  this.getPost(this.$route.params.id)</span><br><span class="line">&#125;,</span><br><span class="line">methods () &#123;</span><br><span class="line">  getPost(postId) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>招式解析:<br>那要怎么样才能实现这样的效果呢, 答案是给router-view添加一个unique的key, 这样即使是公用组件, 只要url变化了, 就一定会重新创建这个组件。（虽然损失了一丢丢性能, 但避免了无限的bug）。同时, 注意我将key直接设置为路由的完整路径, 一举两得。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key&#x3D;&quot;$route.fullpath&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure><h1 id="第四招-无所不能的render函数"><a href="#第四招-无所不能的render函数" class="headerlink" title="第四招: 无所不能的render函数"></a>第四招: 无所不能的render函数</h1><p>场景还原:<br>vue要求每一个组件都只能有一个根元素, 当你有多个根元素时, vue就会给你报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;route in routes&quot; :key&#x3D;&quot;route.name&quot;&gt;</span><br><span class="line">    &lt;router-link :to&#x3D;&quot;route&quot;&gt;</span><br><span class="line">      &#123;&#123; route.title &#125;&#125;</span><br><span class="line">    &lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ERROR - Component template should contain exactly one root element. </span><br><span class="line">    If you are using v-if on multiple elements, use v-else-if </span><br><span class="line">    to chain them instead.</span><br></pre></td></tr></table></figure><p>招式解析:<br>那有没有办法化解呢, 答案是有的, 只不过这时候我们需要使用render()函数来创建HTML, 而不是template。其实用js来生成html的好处就是极度的灵活功能强大, 而且你不需要去学习使用vue的那些功能有限的指令API, 比如v-for, v-if。（reactjs就完全丢弃了template）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">functional: true,</span><br><span class="line">render(h, &#123; props &#125;) &#123;</span><br><span class="line">  return props.routes.map(route &#x3D;&gt;</span><br><span class="line">    &lt;li key&#x3D;&#123;route.name&#125;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&#123;route&#125;&gt;</span><br><span class="line">        &#123;route.title&#125;</span><br><span class="line">      &lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第五招-无招胜有招的高阶组件"><a href="#第五招-无招胜有招的高阶组件" class="headerlink" title="第五招: 无招胜有招的高阶组件"></a>第五招: 无招胜有招的高阶组件</h1><p>划重点: 这一招威力无穷, 请务必掌握<br>当我们写组件的时候, 通常我们都需要从父组件传递一系列的props到子组件, 同时父组件监听子组件emit过来的一系列事件。举例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">&lt;BaseInput </span><br><span class="line">    :value&#x3D;&quot;value&quot;</span><br><span class="line">    label&#x3D;&quot;密码&quot; </span><br><span class="line">    placeholder&#x3D;&quot;请填写密码&quot;</span><br><span class="line">    @input&#x3D;&quot;handleInput&quot;</span><br><span class="line">    @focus&#x3D;&quot;handleFocus&gt;</span><br><span class="line">&lt;&#x2F;BaseInput&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &#123;&#123; label &#125;&#125;</span><br><span class="line">    &lt;input</span><br><span class="line">      :value&#x3D;&quot;value&quot;</span><br><span class="line">      :placeholder&#x3D;&quot;placeholder&quot;</span><br><span class="line">      @focus&#x3D;$emit(&#39;focus&#39;, $event)&quot;</span><br><span class="line">      @input&#x3D;&quot;$emit(&#39;input&#39;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>有下面几个优化点:</p><ul><li><p>每一个从父组件传到子组件的props, 我们都得在子组件的Props中显式的声明才能使用。这样一来, 我们的子组件每次都需要申明一大堆props, 而类似placeholer这种dom原生的property我们其实完全可以直接从父传到子, 无需声明。方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">      :value&#x3D;&quot;value&quot;</span><br><span class="line">      v-bind&#x3D;&quot;$attrs&quot;</span><br><span class="line">      @input&#x3D;&quot;$emit(&#39;input&#39;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><p>$attrs包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时, 这里会包含所有父作用域的绑定, 并且可以通过 v-bind=”$attrs” 传入内部组件——在创建更高层次的组件时非常有用。</p></li><li><p>注意到子组件的@focus=$emit(‘focus’, $event)”其实什么都没做, 只是把event传回给父组件而已, 那其实和上面类似, 我完全没必要显式地申明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input :value&#x3D;&quot;value&quot; v-bind&#x3D;&quot;$attrs&quot; v-on&#x3D;&quot;listeners&quot;&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  listeners() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ...this.$listeners,</span><br><span class="line">      input: event &#x3D;&gt; </span><br><span class="line">        this.$emit(&#39;input&#39;, event.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$listeners包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。</p></li><li><p>需要注意的是, 由于我们input并不是BaseInput这个组件的根节点, 而默认情况下父作用域的不被认作 props 的特性绑定将会“回退”且作为普通的 HTML 特性应用在子组件的根元素上。所以我们需要设置inheritAttrs:false, 这些默认行为将会被去掉, 以上两点的优化才能成功。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动适配 2x、3x 背景图</title>
      <link href="2020/11/26/2x3x/"/>
      <url>2020/11/26/2x3x/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>DPI</code>: dots per inch, 表示一英寸多少个像素点, 我一般称作像素密度，简称密度</li><li><code>分辨率</code>: 横纵2个方向的像素点的数量</li></ul><blockquote><p>这个世界上存在着很多不同屏幕密度的手机，屏幕密度是什么？就是dpi，就是单位长度里的像素数量, 想象一下如果这些手机的尺寸一样, 屏幕密度相差很大, 那么是不是说一个手机水平方向上像素很少，另一个手机水平方向上像素很多？</p></blockquote><p>所以经常会发生这种情况: 同样一张背景图, 分别在设备尺寸一样的安卓设备和ios设备中表现不一致，一个稍微模糊，一个比较清晰，大小都一样, 这就是因为DPI不一样, 也就是渲染图片的像素点不一样所导致。</p><h2 id="兼容思路"><a href="#兼容思路" class="headerlink" title="兼容思路"></a>兼容思路</h2><p>基于这种情况, 就出现了 <code>2倍</code>、<code>3倍</code> 尺寸图的概念, 简单来说, 我们在 <code>1倍DPI</code>, <code>2倍DPI</code> 的屏幕设备上，使用 <code>2倍尺寸的图片</code>, <code>3倍</code> DPI 屏幕设备上使用 <code>3倍尺寸的图片</code>, 使图片始终保持高清, 通常 <code>2倍尺寸的图片</code>和<code>3倍尺寸的图片</code>被称为 <code>2x</code> 图 <code>3x</code> 图</p><blockquote><p>为什么1倍DPI也使用2x图片？</p></blockquote><p>因为图片缩小不会模糊</p><blockquote><p>既然缩小不会模糊，那为什么不全部使用3x图片？</p></blockquote><p>为了提高性能, 如果图片全部使用3x图, 提高了手机流量的消耗, 而且页面加载速度也会大打折扣</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>首先保证两套图片命名是由 <code>@2x.png</code>、 <code>@3x.png</code>结尾, 同一张图, 两套命名一致, 后缀除外, 如下图:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154040.jpeg"></p><ul><li><p>使用 <code>less</code> 写一个通用的函数, 通过 <code>媒体查询</code> 选择对应的图片</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-image</span>(<span class="variable">@picname</span>) &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;../images/@&#123;picname&#125;@2x.png&quot;</span>);</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>),(<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&quot;../images/@&#123;picname&#125;@3x.png&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用时调用该函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">    <span class="selector-class">.bg-image</span>(<span class="string">&#x27;clied&#x27;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>效果图</p></li></ul><p>2倍密度的手机, 应用2倍的图片</p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154041.jpeg"></p><p>切换3倍密度的手机, 自动更换成3倍图片</p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154044.jpeg"></p><h2 id="压缩图片（彩蛋）"><a href="#压缩图片（彩蛋）" class="headerlink" title="压缩图片（彩蛋）"></a>压缩图片（彩蛋）</h2><p>稍大些的图片通常都需要通过<code>无损压缩</code>来提高性能体验; 压缩图片的工具有很多, 但是多多少少都会有些缺陷, 推荐一个网站线上压缩: <a href="https://tinypng.com/">https://tinypng.com</a></p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154043.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html 5 </tag>
            
            <tag> CSS 3 </tag>
            
            <tag> Less </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>妙用笔记，JS中的骚操作</title>
      <link href="2020/11/26/jsskill/"/>
      <url>2020/11/26/jsskill/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-切换变量-1、0"><a href="#使用-切换变量-1、0" class="headerlink" title="使用 ^ 切换变量 1、0"></a>使用 <code>^</code> 切换变量 1、0</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toggle;</span><br><span class="line"><span class="comment">// 0 ~ 1 之间来回切换, 每执行一次即变化一次</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 1</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 0</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 1</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 0</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h1 id="使用-转为布尔值"><a href="#使用-转为布尔值" class="headerlink" title="使用 !! 转为布尔值"></a>使用 <code>!!</code> 转为布尔值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">7</span>);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!-<span class="number">1</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0.71</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&#x27;str&#x27;</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&#x27;0&#x27;</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!![]);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!&#123;&#125;);        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>);         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&#x27;&#x27;</span>);        <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>);      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 !0, !1 替代 true、false</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">0</span>)           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">1</span>)           <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="使用-amp-1-判断奇偶数"><a href="#使用-amp-1-判断奇偶数" class="headerlink" title="使用 &amp; 1 判断奇偶数"></a>使用 <code>&amp; 1</code> 判断奇偶数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &amp; 符号左边为需要判断奇偶数的数值, 右边固定为 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span> &amp; <span class="number">1</span>) ;  <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &amp; <span class="number">1</span>) ;  <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp; <span class="number">1</span>) ; <span class="comment">// 返回值为 0, 则为偶数</span></span><br></pre></td></tr></table></figure><h1 id="使-gt-gt-0-lt-lt-0-0-取整"><a href="#使-gt-gt-0-lt-lt-0-0-取整" class="headerlink" title="使 ~~, &gt;&gt;0, &lt;&lt;0, |0 取整"></a>使 <code>~~</code>, <code>&gt;&gt;0</code>, <code>&lt;&lt;0</code>, <code>|0</code> 取整</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ~~ 单目操作符</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">11.71</span>);         <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(~~-<span class="number">11.71</span>);        <span class="comment">// -11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;&gt;、&lt;&lt;、| , 表现一致, 运算符左边为需要取整的数值, 右边固定为 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> &gt;&gt; <span class="number">0</span>);      <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">11.71</span> &gt;&gt; <span class="number">0</span>);     <span class="comment">// -11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> &lt;&lt; <span class="number">0</span>);      <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">11.71</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">// -11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> | <span class="number">0</span>);       <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">11.71</span> | <span class="number">0</span>);      <span class="comment">// -11</span></span><br></pre></td></tr></table></figure><h1 id="判断数值是否都是正数或者都是负数"><a href="#判断数值是否都是正数或者都是负数" class="headerlink" title="判断数值是否都是正数或者都是负数"></a>判断数值是否<code>都是正数</code>或者<code>都是负数</code></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构赋值, x = 1, y = 2, 判断表达式固定写法 (数值1 ^ 数值2) &gt;= 0</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 同为正数返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y] = [-<span class="number">1</span>, -<span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 同为负数返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, -<span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 一个正数,一个负数返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y] = [-<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 一个负数,一个正数返回 false</span></span><br></pre></td></tr></table></figure><h1 id="使用-1-0-来替代-Infinity"><a href="#使用-1-0-来替代-Infinity" class="headerlink" title="使用 1/0 来替代 Infinity"></a>使用 <code>1/0</code> 来替代 Infinity</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>/<span class="number">0</span>)        <span class="comment">// Infinty</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">1</span>/<span class="number">0</span>)       <span class="comment">// -Infinty</span></span><br></pre></td></tr></table></figure><h1 id="n-amp-n-1-如果返回-0-说明-n-是-2-的整数幂"><a href="#n-amp-n-1-如果返回-0-说明-n-是-2-的整数幂" class="headerlink" title="n &amp; (n - 1), 如果返回 0, 说明 n 是 2 的整数幂"></a><code>n &amp; (n - 1)</code>, 如果返回 0, 说明 n 是 2 的整数幂</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> &amp; (<span class="number">2</span> - <span class="number">1</span>))    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span> &amp; (<span class="number">4</span> - <span class="number">1</span>))    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &amp; (<span class="number">8</span> - <span class="number">1</span>))    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span> &amp; (<span class="number">16</span> - <span class="number">1</span>))  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: n 应该为大于等于 2 的正整数, 以下情况不可取</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp; (<span class="number">1</span> - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp; (<span class="number">0</span> - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">16</span> &amp; (-<span class="number">16</span> - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2.7</span> &amp; (<span class="number">2.7</span> - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h1 id="使用-n-0-5-0-四舍五入"><a href="#使用-n-0-5-0-四舍五入" class="headerlink" title="使用 n + 0.5 | 0 四舍五入"></a>使用 <code>n + 0.5 | 0</code> 四舍五入</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2.4</span> + <span class="number">0.5</span> | <span class="number">0</span>)    <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2.5</span> + <span class="number">0.5</span> | <span class="number">0</span>)    <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是负数，只需要 - 0.5</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">2.7</span> - <span class="number">0.5</span> | <span class="number">0</span>)   <span class="comment">// -3</span></span><br></pre></td></tr></table></figure><h1 id="一些可以替代-undefined-的操作"><a href="#一些可以替代-undefined-的操作" class="headerlink" title="一些可以替代 undefined 的操作"></a>一些可以替代 <code>undefined</code> 的操作</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;&#x27;</span>._;     <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1.</span>._;     <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">0</span>[<span class="number">0</span>];     <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">void</span> <span class="number">0</span>;   <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">a === b &amp;&amp; b === c &amp;&amp; c === d &amp;&amp; d === a &amp;&amp; a === <span class="literal">undefined</span>   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="使用-Array-length-0-来清空数组"><a href="#使用-Array-length-0-来清空数组" class="headerlink" title="使用 Array.length = 0 来清空数组"></a>使用 <code>Array.length = 0</code> 来清空数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h1 id="使用-amp-gt-gt-来完成rgb值和16进制颜色值之间的转换"><a href="#使用-amp-gt-gt-来完成rgb值和16进制颜色值之间的转换" class="headerlink" title="使用 &amp;, &gt;&gt;,| 来完成rgb值和16进制颜色值之间的转换"></a>使用 <code>&amp;</code>, <code>&gt;&gt;</code>,<code>|</code> 来完成rgb值和16进制颜色值之间的转换</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 16进制颜色值转RGB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>hex 16进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>RGB颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hexToRGB</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hexx = hex.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> r = hexx &gt;&gt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">const</span> g = hexx &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">const</span> b = hexx &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RGB颜色转16进制颜色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>rgb RGB进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>16进制颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RGBToHex</span>(<span class="params">rgb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> rgbArr = rgb.split(<span class="regexp">/[^\d]+/</span>)</span><br><span class="line">    <span class="keyword">const</span> color = rgbArr[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | rgbArr[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | rgbArr[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span>+ color.toString(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line">hexToRGB(<span class="string">&#x27;#ffffff&#x27;</span>)               <span class="comment">// &#x27;rgb(255,255,255)&#x27;</span></span><br><span class="line">RGBToHex(<span class="string">&#x27;rgb(255, 255, 255)&#x27;</span>)      <span class="comment">// &#x27;#ffffff&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="使用-link-创建链接"><a href="#使用-link-创建链接" class="headerlink" title="使用 .link() 创建链接"></a>使用 <code>.link()</code> 创建链接</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --- before ---</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`&lt;a herf=&quot;www.google.com&quot;&gt;google&lt;/a&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个鲜为人知的方法，可以快速创建 a 标签</span></span><br><span class="line"><span class="comment">// --- after ---</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;google&#x27;</span>.link(<span class="string">&#x27;www.google.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="使用-Array-includes-来处理多重条件"><a href="#使用-Array-includes-来处理多重条件" class="headerlink" title="使用 Array.includes 来处理多重条件"></a>使用 <code>Array.includes</code> 来处理多重条件</h1><p>举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件语句</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fruit === <span class="string">&#x27;apple&#x27;</span> || fruit === <span class="string">&#x27;strawberry&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，这么写似乎没什么大问题。然而，如果我们想要匹配更多的红色水果呢，比方说『樱桃』和『蔓越莓』？我们是不是得用更多的 || 来扩展这条语句？<br>我们可以使用 <code>Array.includes(Array.includes)</code> 重写以上条件句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把条件提取到数组中</span></span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把红色的水果（条件）都提取到一个数组中，这使得我们的代码看起来更加整洁。</p><h1 id="少写嵌套，尽早返回"><a href="#少写嵌套，尽早返回" class="headerlink" title="少写嵌套，尽早返回"></a>少写嵌套，尽早返回</h1><p>让我们为之前的例子添加两个条件: 如果没有提供水果，抛出错误。如果该水果的数量大于 10，将其打印出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">  <span class="keyword">if</span> (fruit) &#123;</span><br><span class="line">    <span class="comment">// 条件 2：必须为红色</span></span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">      <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;big quantity&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No fruit!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 报错：No fruits</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>); <span class="comment">// 打印：red</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>, <span class="number">20</span>); <span class="comment">// 打印：red，big quantity</span></span><br></pre></td></tr></table></figure><p>让我们来仔细看看上面的代码，我们有:</p><ul><li>1 个 if/else 语句来筛选无效的条件</li><li>3 层 if 语句嵌套（条件 1，2 &amp; 3）</li></ul><blockquote><p>就我个人而言，我遵循的一个总的规则是当发现无效条件时尽早返回。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件 1：尽早抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No fruit!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件2：必须为红色</span></span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;big quantity&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，我们就少写了一层嵌套。这是种很好的代码风格，尤其是在 if 语句很长的时候（试想一下，你得滚动到底部才能知道那儿还有个 else 语句，是不是有点不爽）。<br>如果反转一下条件，我们还可以进一步地减少嵌套层级。注意观察下面的条件 2 语句，看看是如何做到这点的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No fruit!&#x27;</span>); <span class="comment">// 条件 1：尽早抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!redFruits.includes(fruit)) <span class="keyword">return</span>; <span class="comment">// 条件 2：当 fruit 不是红色的时候，直接返回</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">  <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;big quantity&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反转条件 2 的条件，现在我们的代码已经没有嵌套了。当我们代码的逻辑链很长，并且希望当某个条件不满足时不再执行之后流程时，这个技巧会很好用。<br>然而，并没有任何硬性规则要求你这么做。这取决于你自己，对你而言，这个版本的代码（没有嵌套）是否要比之前那个版本（条件 2 有嵌套）的更好、可读性更强？<br>是我的话，我会选择前一个版本（条件 2 有嵌套）。原因在于:</p><ul><li>这样的代码比较简短和直白，一个嵌套的 if 使得结构更加清晰。</li><li>条件反转会导致更多的思考过程（增加认知负担）。</li></ul><p>因此，始终追求更少的嵌套，更早地返回，但是不要过度。</p><h1 id="使用函数默认参数和解构"><a href="#使用函数默认参数和解构" class="headerlink" title="使用函数默认参数和解构"></a>使用函数默认参数和解构</h1><p>我猜你也许很熟悉以下的代码，在 JavaScript 中我们经常需要检查 null / undefined 并赋予默认值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> q = quantity || <span class="number">1</span>; <span class="comment">// 如果没有提供 quantity，默认为 1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;q&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="string">&#x27;banana&#x27;</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>事实上，我们可以通过函数的默认参数来去掉变量 q。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity = <span class="number">1</span></span>) </span>&#123; <span class="comment">// 如果没有提供 quantity，默认为 1</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;quantity&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="string">&#x27;banana&#x27;</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>是不是更加简单、直白了？请注意，所有的函数参数都可以有其默认值。举例来说，我们同样可以为 fruit 赋予一个默认值：function test(fruit = ‘unknown’, quantity = 1)。<br>那么如果 fruit 是一个对象（Object）呢？我们还可以使用默认参数吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 如果有值，则打印出来</span></span><br><span class="line">  <span class="keyword">if</span> (fruit &amp;&amp; fruit.name)  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log (fruit.name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;unknown&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p>观察上面的例子，当水果名称属性存在时，我们希望将其打印出来，否则打印『unknown』。我们可以通过默认参数和解构赋值的方法来避免写出 fruit &amp;&amp; fruit.name 这种条件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构 —— 只得到 name 属性</span></span><br><span class="line"><span class="comment">// 默认参数为空对象 &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (name || <span class="string">&#x27;unknown&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p>既然我们只需要 fruit 的 name 属性，我们可以使用 {name} 来将其解构出来，之后我们就可以在代码中使用 name 变量来取代 fruit.name。<br>我们还使用 {} 作为其默认值。如果我们不这么做的话，在执行 test(undefined) 时，你会得到一个错误 Cannot destructure property name of ‘undefined’ or ‘null’.，因为 undefined 上并没有 name 属性。（译者注：这里不太准确，其实因为解构只适用于对象（Object），而不是因为undefined 上并没有 name 属性（空对象上也没有）。参考解构赋值 - MDN）<br>如果你不介意使用第三方库的话，有一些方法可以帮助减少空值（null）检查：</p><p>使用 Lodash get 函数<br>使用 Facebook 开源的 idx 库（需搭配 Babeljs）</p><p>这里有一个使用 Lodash 的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  使用 lodash 库提供的 _ 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(_.get(fruit, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>)); <span class="comment">// 获取属性 name 的值，如果没有，设为默认值 unknown</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p>你可以在这里运行演示代码。另外，如果你偏爱函数式编程（FP），你可以选择使用 Lodash fp——函数式版本的 Lodash（方法名变为 get 或 getOr）。</p><h1 id="相较于-switch，Map-Object-也许是更好的选择"><a href="#相较于-switch，Map-Object-也许是更好的选择" class="headerlink" title="相较于 switch，Map / Object 也许是更好的选择"></a>相较于 <code>switch</code>，<code>Map / Object</code> 也许是更好的选择</h1><p>让我们看下面的例子，我们想要根据颜色打印出各种水果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 switch case 来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;purple&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;plum&#x27;</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">&#x27;yellow&#x27;</span>); <span class="comment">// [&#x27;banana&#x27;, &#x27;pineapple&#x27;]</span></span><br></pre></td></tr></table></figure><p>上面的代码看上去并没有错，但是就我个人而言，它看上去很冗长。同样的结果可以通过对象字面量来实现，语法也更加简洁:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象字面量来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = &#123;</span><br><span class="line">    red: [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>],</span><br><span class="line">    yellow: [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>],</span><br><span class="line">    purple: [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;plum&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor[color] || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，你也可以使用 Map 来实现同样的效果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Map 来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    .set(<span class="string">&#x27;red&#x27;</span>, [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>])</span><br><span class="line">    .set(<span class="string">&#x27;yellow&#x27;</span>, [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>])</span><br><span class="line">    .set(<span class="string">&#x27;purple&#x27;</span>, [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;plum&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor.get(color) || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map 是 ES2015 引入的新的对象类型，允许你存放键值对。<br>那是不是说我们应该禁止使用 switch 语句？ 别把自己限制住。我自己会在任何可能的时候使用对象字面量，但是这并不是说我就不用 switch，这得视场景而定。</p><blockquote><p>懒人版：重构语法</p></blockquote><p>就以上的例子，事实上我们可以通过重构我们的代码，使用 Array.filter 实现同样的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;strawberry&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;pineapple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;plum&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 Array filter 来找到对应颜色的水果</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决问题的方法永远不只一种。对于这个例子我们展示了四种实现方法。</p><h1 id="使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>使用 <code>Array.every</code> 和 <code>Array.some</code> 来处理全部/部分满足条件</h1><p>观察以下的代码，我们想要检查是否所有的水果都是红色的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color == <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码也太长了！我们可以通过 Array.every 来缩减代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：（简短形式）所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清晰多了对吧？类似的，如果我们想要检查是否有至少一个水果是红色的，我们可以使用 Array.some 仅用一行代码就实现出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：至少一个水果是红色的</span></span><br><span class="line">  <span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAnyRed); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gyp ERR! stack Error: EACCES: permission denied, mkdir 问题解决方案</title>
      <link href="2020/11/26/permission/"/>
      <url>2020/11/26/permission/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>权限问题</strong></p><ul><li>npm 出于安全考虑不支持以 root 用户运行，即使你用 root 用户身份运行了，npm 会自动转成一个叫 nobody 的用户来运行，而这个用户几乎没有任何权限。这样的话如果你脚本里有一些需要权限的操作，比如写文件（尤其是写 /root/.node-gyp），就会崩掉了。</li><li>为了避免这种情况，加 –unsafe-perm 参数，这样就不会切换到 nobody 上，运行时是哪个用户就是哪个用户，即是 root。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install --unsafe-perm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 使用技巧之自定义快捷键唤起 APP</title>
      <link href="2020/11/26/Automator/"/>
      <url>2020/11/26/Automator/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>通过自定义的快捷键，快速打开 MAC 上已经安装的应用</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>通过 MAC 自带软件 Automator.app（自动操作），运行 AppleScript 实现打开应用</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>快捷键 Cmd + 空格 打开 Automator.app。搜索框键入 Automator，打开自动操作。（或是：打开启动台 -&gt; 其他 -&gt; 自动操作）<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152837.png"></p></li><li><p>新建项目，类型选择快速操作<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152839.png"></p></li><li><p>左侧栏双击运行 AppleScript，右上工作流程选择没有输入。<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152841.png"></p></li><li><p>右中文本框键入以下内容，这里以唤起MAC自带终端 Terminal 为例：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> <span class="built_in">run</span> &#123;input, parameters&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">(* Your script goes here *)</span></span><br><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;Terminal&quot;</span></span><br><span class="line">reopen</span><br><span class="line"><span class="built_in">activate</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="built_in">run</span></span><br></pre></td></tr></table></figure></li><li><p>点击运行，看应用（ 终端 ）是否可以正常打开<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152838.png"></p></li><li><p>command + s 保存脚本。为其命名OpenTerminal 。<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152840.png"></p></li><li><p>打开系统偏好设置 -&gt; 键盘 -&gt; 快捷键 -&gt; 左侧栏点开服务 -&gt; 右侧栏找到 OpenTerminal。 <br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152842.png"></p></li><li><p>双击 OpenTerminal，右侧显示添加快捷键，点击它进入输入框按下一个自定义快捷键 <br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152843.png"></p></li><li><p>至此已完成，按下快捷键试试吧</p></li><li><p>上述是以MAC自带终端 Terminal 为例，其他应用步骤一样，需要先确认是否已经安装了应用及应用名称，然后在 <code>步骤4</code> 处，修改代码中的应用名称 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> <span class="built_in">run</span> &#123;input, parameters&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">(* Your script goes here *)</span></span><br><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;Webstorm&quot;</span><span class="comment">(* 此处Webstorm 即为需要唤醒的应用 *)</span></span><br><span class="line">reopen</span><br><span class="line"><span class="built_in">activate</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="built_in">run</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
