<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>像高级前端开发人员一样使用 Chrome DevTools</title>
      <link href="2021/01/12/ChromeDevTools/"/>
      <url>2021/01/12/ChromeDevTools/</url>
      
        <content type="html"><![CDATA[<h2 id="复制变量"><a href="#复制变量" class="headerlink" title="复制变量"></a>复制变量</h2><blockquote><p>如何将 <code>JavaScript</code> 变量的值复制到其他地方？</p></blockquote><p>在 <code>Chrome</code> 中，有一个名为 <code>copy</code> 的函数可以帮助你复制变量。该 <code>copy</code> 功能不是由 <code>ECMAScript</code> 定义的，而是由 <code>Chrome</code> 提供的。使用此功能，您可以将 <code>JavaScript</code> 变量的值复制到剪贴板。</p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112153757.gif"></p><h2 id="表对象数组"><a href="#表对象数组" class="headerlink" title="表对象数组"></a>表对象数组</h2><pre><code>假设我们有一个这样的对象数组, 在控制台中不容易查看。如果数组更长且元素更复杂，那么它将变得更加难以理解。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112160211.jpg"></p><blockquote><p><code>Chrome</code> 提供了 <code>table</code> 函数，可以将一系列对象列表化。可以让对象数组以表格的形式展示出来!</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112154508.png"></p><h2 id="隐藏元素的快捷方式"><a href="#隐藏元素的快捷方式" class="headerlink" title="隐藏元素的快捷方式"></a>隐藏元素的快捷方式</h2><blockquote><p>在调试 <code>CSS</code> 样式时，我们通常需要隐藏一个元素。如果选择元素并按 <code>H</code> 键盘，则可以快速隐藏元素。此操作是将 <code>visibility: hidden !important;</code> 样式添加到相应的元素。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112155003.gif"></p><h2 id="将DOM元素存储在全局临时变量中"><a href="#将DOM元素存储在全局临时变量中" class="headerlink" title="将DOM元素存储在全局临时变量中"></a>将DOM元素存储在全局临时变量中</h2><blockquote><p>如果要在控制台中快速获取 <code>DOM元素</code> 引用，可以执行以下操作: </p></blockquote><ul><li>选择 HTML 元素</li><li>右键点击鼠标</li><li>点击 Store as a global variable</li></ul><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112171845.gif"></p><h2 id="触发CSS伪类"><a href="#触发CSS伪类" class="headerlink" title="触发CSS伪类"></a>触发CSS伪类</h2><blockquote><p>我们可能为一个元素编写多个伪类，并且为了方便我们测试这些样式，我们可以直接在 <code>元素面板</code> 中触发这些样式。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112172413.gif"></p><h2 id="在元素面板中拖放"><a href="#在元素面板中拖放" class="headerlink" title="在元素面板中拖放"></a>在元素面板中拖放</h2><blockquote><p>有时我们想调整页面上某些 <code>DOM元素</code> 的位置以测试 <code>UI</code>。在 <code>元素面板</code> 中，您可以拖放任何 <code>HTML元素</code> 并更改其在页面中的位置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112174634.gif"></p><h2 id="命令菜单"><a href="#命令菜单" class="headerlink" title="命令菜单"></a>命令菜单</h2><blockquote><p><code>命令</code> 菜单用于 <code>Chrome</code> 浏览器，而命令行管理程序用于 <code>Linux</code>。 通过 <code>命令</code> 菜单, 您可以输入一些命令来操作 <code>Chrome</code>。</p></blockquote><p>首先, 我们打开 <code>Chrome</code> 开发者工具, 然后使用以下快捷方式打开 <code>命令</code> 菜单:</p><ul><li>windows: CTRL + Shift + P</li><li>macOS: Cmd + Shift + P</li></ul><p>或者, 我们可以单击下面的按钮将其打开:<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112143340.jpg"></p><p>然后，我们可以看到 <code>命令</code> 面板, 在这里我们可以选择各种命令来执行各种强大的功能。<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112143731.jpg"></p><h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><blockquote><p>捕获屏幕的一部分是非常常见的要求，并且我确定您当前的计算机上已经具有非常方便的截图软件。但是，您可以完成以下任务吗？</p></blockquote><ol><li>截取网页上所有内容的屏幕快照，包括可视窗口中未出现的所有内容</li><li>精确捕获DOM元素的内容</li></ol><p>这是两个常见的要求, 但是使用操作系统随附的屏幕截图工具很难解决。此时, 我们可以使用命令来帮助我们完成此要求。</p><h4 id="截取网页上所有内容的屏幕快照-对应的命令为-Capture-full-size-screenshot"><a href="#截取网页上所有内容的屏幕快照-对应的命令为-Capture-full-size-screenshot" class="headerlink" title="截取网页上所有内容的屏幕快照, 对应的命令为 Capture full size screenshot"></a>截取网页上所有内容的屏幕快照, 对应的命令为 <code>Capture full size screenshot</code></h4><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112144750.jpg"></p><h4 id="截取-DOM-元素的内容-对应的命令为-Capture-node-screenshot"><a href="#截取-DOM-元素的内容-对应的命令为-Capture-node-screenshot" class="headerlink" title="截取 DOM 元素的内容, 对应的命令为 Capture node screenshot "></a>截取 DOM 元素的内容, 对应的命令为 <code>Capture node screenshot </code></h4><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112145306.jpg"><br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112145853.jpg"></p><h2 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h2><h3 id="使用-在控制台中引用上一次操作的结果"><a href="#使用-在控制台中引用上一次操作的结果" class="headerlink" title="使用 $_ 在控制台中引用上一次操作的结果"></a>使用 <code>$_</code> 在控制台中引用上一次操作的结果</h3><blockquote><p><code>$_</code>  它引用先前操作的结果，其值始终等于控制台中上一次操作的结果。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112151910.png"></p><h3 id="使用-0-在控制台中引用当前选定的元素"><a href="#使用-0-在控制台中引用当前选定的元素" class="headerlink" title="使用 $0 在控制台中引用当前选定的元素"></a>使用 <code>$0</code> 在控制台中引用当前选定的元素</h3><blockquote><p><code>$0</code> 它引用 <code>元素</code> 面板中当前选定的元素。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20210112152135.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五分钟搭建免费cdn加速图床</title>
      <link href="2020/12/17/picgo/"/>
      <url>2020/12/17/picgo/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步-Github-相关设置"><a href="#第一步-Github-相关设置" class="headerlink" title="第一步, Github 相关设置"></a>第一步, Github 相关设置</h1><blockquote><p>本教程跳过登录、注册 <code>github</code> 账号的步骤, 若还不了解 <code>github</code> 的童鞋请自行百度, 登录 <code>github</code> 账号之后再跟着操作.</p></blockquote><h2 id="创建图床仓库-Create-a-new-repository"><a href="#创建图床仓库-Create-a-new-repository" class="headerlink" title="创建图床仓库 (Create a new repository)"></a>创建图床仓库 (Create a new repository)</h2><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111841.jpg"></p><h2 id="创建令牌-（Generate-a-new-token）"><a href="#创建令牌-（Generate-a-new-token）" class="headerlink" title="创建令牌 （Generate a new token）"></a>创建令牌 （Generate a new token）</h2><h3 id="打开个人设置-（Settings）"><a href="#打开个人设置-（Settings）" class="headerlink" title="打开个人设置 （Settings）"></a>打开个人设置 （Settings）</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111843.png"></p><h3 id="打开开发者设置-Developer-settings"><a href="#打开开发者设置-Developer-settings" class="headerlink" title="打开开发者设置 (Developer settings)"></a>打开开发者设置 (Developer settings)</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111842.jpg"></p><h3 id="创建令牌"><a href="#创建令牌" class="headerlink" title="创建令牌"></a>创建令牌</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111844.png"></p><h3 id="填写令牌相关信息"><a href="#填写令牌相关信息" class="headerlink" title="填写令牌相关信息"></a>填写令牌相关信息</h3><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228113627.png"></p><h3 id="保存令牌"><a href="#保存令牌" class="headerlink" title="保存令牌"></a>保存令牌</h3><blockquote><p>刷新页面就再也看不到token了，所以一定要在创建成功时保存下来</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111846.jpg"></p><h1 id="第二步-PicGo-安装和配置"><a href="#第二步-PicGo-安装和配置" class="headerlink" title="第二步, PicGo 安装和配置"></a>第二步, <code>PicGo</code> 安装和配置</h1><h2 id="下载安装工具-PicGo"><a href="#下载安装工具-PicGo" class="headerlink" title="下载安装工具 PicGo"></a>下载安装工具 <code>PicGo</code></h2><blockquote><p><code>PicGo</code> 目前最新正式版v2.2.2, 请根据自身系统选择对应安装包下载  <a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2">下载地址</a> </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111847.png"></p><h2 id="安装-PicGo-插件-github-plus"><a href="#安装-PicGo-插件-github-plus" class="headerlink" title="安装 PicGo 插件 github-plus"></a>安装 <code>PicGo</code> 插件 <code>github-plus</code></h2><blockquote><p>插件说明: 如果不安装 <code>github-plus</code> 也可以正常使用, 但是由于 <code>PicGo</code> 提供了图片相册功能，我们如果希望这个相册里的图片能和<code>github</code>图床仓库里的图片同步, 就需要该插件, 否则 <code>PicGo</code> 相册里面的图片删除了, <code>github</code> 图床仓库里的图片不会跟着删除</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111849.png"></p><h2 id="图床设置"><a href="#图床设置" class="headerlink" title="图床设置"></a>图床设置</h2><blockquote><p>我们从菜单的<code>图床设置</code>中找到 <code>githubPlus</code>, 安装完插件它应该会出现在该菜单下, 如果没有可尝试重启软件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111848.png"></p><h1 id="第三步-上传和使用"><a href="#第三步-上传和使用" class="headerlink" title="第三步, 上传和使用"></a>第三步, 上传和使用</h1><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111850.png"></p><h2 id="使用图片"><a href="#使用图片" class="headerlink" title="使用图片"></a>使用图片</h2><blockquote><p>上传成功后 <code>github</code> 仓库就会添加对应的图片, <code>PicGo</code> 相册内也会出现对应的图片</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228111851.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>至此教程就结束了, 此刻你就应经拥有了一个带有cdn加速的免费图床可以正常使用了, 并且还有一个免费的图床管理软件可以同步操作你的图片, 该软件还有诸多便利功能, 就留给大家自己摸索啦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 性能 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 的自定义指令的用法与实例</title>
      <link href="2020/12/16/directives/"/>
      <url>2020/12/16/directives/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端开发的同学们应该对 <code>Element UI</code> 不陌生，而日常开发中，多少会存在一些组件无法完全满足我们需求的情况，或者说想在原组件的基础上附加一些功能，当遇到需要附加一些不是特别复杂的小东西的时候，采用 Vue 的自定义指令来实现，将会显得十分优雅</p></blockquote><h2 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h2><p>我们知道 <code>Element UI</code> 的 <code>el-input</code> 组件 <code>type</code> 为 <code>textarea</code> 时，可通过设置 <code>show-word-limit</code> 属性来展示字数统计。但是我们当前项目使用的 <code>Element UI</code> 版本为 <code>2.5.21</code>, 是没有该属性的，而我们暂时又不方便升级 <code>Element UI</code> 版本，而产品经理坚持要求这个小东西，那么看看如何解决这个问题</p><p>实际上这个小功能十分简单，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-input-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">      <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;el-input-count&quot;</span>&gt;</span>&#123;&#123; desc.length &#125;&#125;/30<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/ecmascript-6&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        desc: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.el-input-wrap</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.el-input-count</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#909399</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    bottom: 5px;</span><br><span class="line">    right: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过手动的方式添加父元素设置定位属性，再添加 <code>span</code> 元素设置定位和样式，来展示动态的长度限制效果，这么做就可以实现和新版本的 <code>show-word-limit</code> 一模一样的效果，然而始终有些许麻烦，每次用到的地方都要这么来一遍，且不太好抽出来封装组件，那么是不是可以考虑一下使用自定义指令来做呢？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最终效果期望是通过一个指令来实现上面的效果，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和之前对比少了些什么？我们需要做些什么？</p><p>1，创建一个父元素 设置定位属性，这一步是展示文本是否定位在输入框的右下角的关键</p><p>2，创建一个 <code>span</code> 元素 设置样式，用于展示效果</p><p>3，将 <code>el-input</code> 绑定的值的长度填到 <code>span</code> 元素中</p><p>4，每次 <code>el-input</code> 绑定的值的长度改变时，更新 <code>span</code> 元素的值</p><p>思路有了，并不是很复杂，那么接下来我们看看，如何来编写这个代码</p><h2 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h2><p>首先创建一个js文件 <code>showWordLimit.js</code>, 然后 <code>export</code> 一个可以注册指令的对象，然后在钩子函数 <code>inserted</code> 时，我们来实现第一步，创建一个父元素，并设置定位属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>既然是父元素，我们还需要将使用了该指令的 <code>el-input</code> 元素插入到这个父元素内，通过钩子的参数来拿到 <code>dom</code> 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样下来，第一步就算完成了，下面继续创建一个 <code>span</code> 元素，并设置好样式，同时还要插入到刚刚创建的父元素内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    oSpan.innerText = <span class="string">&#x27;0/30&#x27;</span></span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到 <code>innerText</code> 的值，应该是个变量，根据 <code>el-input</code> 的 <code>value</code> 值长度来决定的，这里就需要用到动态指令的做法，在使用指令的时候，将这个值传过来，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span>=<span class="string">&quot;desc.length&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到 <code>showWordLimit.js</code>，怎么接收这个值呢？同样也是通过钩子的参数 <code>binding</code> 能拿到，不清楚的可以参考Vue官方文档，自定义指令这一块，写得很清楚，拿到了之后，替换掉 <code>span</code> 元素的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    <span class="comment">// binding.value 等于使用该指令的 el-input 组件的值的长度, 此处使用的ES6字符串模板拼接</span></span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value&#125;</span>/30`</span></span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，到目前为止，姑且可以试用一下了，在 <code>man.js</code> 导入并注册该指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js如果没有使用 vue-cli 脚手架的同学，需要找到对应的入口文件导入注册</span></span><br><span class="line"><span class="keyword">import</span> showWordLimit <span class="keyword">from</span> <span class="string">&#x27;@/directive/showWordLimit&#x27;</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;limit&#x27;</span>, showWordLimit)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在需要用到的页面中 使用指令 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span>=<span class="string">&quot;desc.length&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候会发现，展示效果的数值，是不会随着输入框的内容长度变换而更新的，虽然是做了传递文本框内容长度的处理，但是在 <code>inserted</code> 内，它只会执行一次，如果文本框默认值的长度就有10，那么它显示的就将是10/30，然后我们编辑了内容，长度改变了，它依然还是10/30，如果想要每次编辑内容都更新这个展示效果的数值，那么久要用到另外一个钩子函数 <code>update</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    <span class="comment">// binding.value 等于使用该指令的 el-input 组件的值的长度, 此处使用的ES6字符串模板拼接</span></span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value&#125;</span>/30`</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了在 update 生命周期函数内方便获取到它，添加个 id </span></span><br><span class="line">    oSpan.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value&#125;</span>/30`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在展示效果的数值应该已经可以实现实时更新了，细心的同学应该会发现，有个地方有遗漏，那就是展示效果的最大字符限制的数字，目前是固定死的30，那如果想限制字符为其他数值，就不行了，那要解决这个问题也非常简单，将传递过来的值，改为数组的形式即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-limit</span>=<span class="string">&quot;[desc.length, 50]&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">:autosize</span>=<span class="string">&quot;&#123; minRows: 4, maxRows: 4 &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    wrap.style.position = <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">    </span><br><span class="line">    el.parentNode.replaceChild(wrap, el)</span><br><span class="line">    wrap.appendChild(el)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">    oSpan.style.lineHeight = <span class="number">1.5</span></span><br><span class="line">    oSpan.style.color = <span class="string">&#x27;#909399&#x27;</span></span><br><span class="line">    oSpan.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    oSpan.style.background = <span class="string">&#x27;#FFF&#x27;</span></span><br><span class="line">    oSpan.style.fontSize = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">    oSpan.style.bottom = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    oSpan.style.right = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">    <span class="comment">// binding.value 等于使用该指令的 el-input 组件的值的长度, 此处使用的ES6字符串模板拼接</span></span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value[<span class="number">0</span>]&#125;</span>/<span class="subst">$&#123;binding.value[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了在 update 生命周期函数内方便获取到它，添加个 id </span></span><br><span class="line">    oSpan.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    wrap.appendChild(oSpan)</span><br><span class="line">  &#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;oSpan&#x27;</span>)</span><br><span class="line">    oSpan.innerText = <span class="string">`<span class="subst">$&#123;binding.value[<span class="number">0</span>]&#125;</span>/<span class="subst">$&#123;binding.value[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此，这个自定义指令就算完全做好了，当然难度不大，这篇文章的目的主要是希望可以给一些还没有接触过自定义指令应用的同学做个引导，讲述一个完整的应用流程和思路。</p></blockquote><h2 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h2><h3 id="v-copy-复制粘贴指令"><a href="#v-copy-复制粘贴指令" class="headerlink" title="v-copy 复制粘贴指令"></a>v-copy 复制粘贴指令</h3><p>需求：实现一键复制文本内容，用于鼠标右键粘贴。</p><p>思路：</p><ol><li>动态创建 textarea 标签，并设置 readOnly 属性及移出可视区域</li><li>将要 copy 的值赋给 textarea 标签的 value 属性，并插入到 body</li><li>选中值 textarea 并复制</li><li>将 body 中插入的 textarea 移除</li><li>在第一次调用时绑定事件，在解绑时移除事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copy = &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">    el.handler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!el.$value) &#123;</span><br><span class="line">        <span class="comment">// 值为空的时候，给出提示。可根据项目UI仔细设计</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;无复制内容&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 动态创建 textarea 标签</span></span><br><span class="line">      <span class="keyword">const</span> textarea = <span class="built_in">document</span>.createElement(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">      <span class="comment">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span><br><span class="line">      textarea.readOnly = <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">      textarea.style.position = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">      textarea.style.left = <span class="string">&#x27;-9999px&#x27;</span></span><br><span class="line">      <span class="comment">// 将要 copy 的值赋给 textarea 标签的 value 属性</span></span><br><span class="line">      textarea.value = el.$value</span><br><span class="line">      <span class="comment">// 将 textarea 插入到 body 中</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(textarea)</span><br><span class="line">      <span class="comment">// 选中值并复制</span></span><br><span class="line">      textarea.select()</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">document</span>.execCommand(<span class="string">&#x27;Copy&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;复制成功&#x27;</span>) <span class="comment">// 可根据项目UI仔细设计</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(textarea)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绑定点击事件，就是所谓的一键 copy 啦</span></span><br><span class="line">    el.addEventListener(<span class="string">&#x27;click&#x27;</span>, el.handler)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传进来的值更新的时候触发</span></span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指令与元素解绑的时候，移除事件绑定</span></span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">&#x27;click&#x27;</span>, el.handler)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> copy</span><br></pre></td></tr></table></figure><p>使用：给 Dom 加上 v-copy 及复制的文本即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-copy</span>=<span class="string">&quot;copyText&quot;</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        copyText: <span class="string">&#x27;a copy directives&#x27;</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-longpress-长按指令"><a href="#v-longpress-长按指令" class="headerlink" title="v-longpress 长按指令"></a>v-longpress 长按指令</h3><p>需求：实现长按，用户需要按下并按住按钮几秒钟，触发相应的事件</p><p>思路：</p><ol><li>创建一个计时器， 2 秒后执行函数</li><li>当用户按下按钮时触发 mousedown 事件，启动计时器；用户松开按钮时调用 mouseout 事件。</li><li>如果 mouseup 事件 2 秒内被触发，就清除计时器，当作一个普通的点击事件</li><li>如果计时器没有在 2 秒内清除，则判定为一次长按，可以执行关联的函数。</li><li>在移动端要考虑 touchstart，touchend 事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> longpress = &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> binding.value !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;callback must be a function&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">let</span> pressTimer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 创建计时器（ 2秒后执行函数 ）</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.type === <span class="string">&#x27;click&#x27;</span> &amp;&amp; e.button !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (pressTimer === <span class="literal">null</span>) &#123;</span><br><span class="line">        pressTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          handler()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取消计时器</span></span><br><span class="line">    <span class="keyword">let</span> cancel = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (pressTimer !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(pressTimer)</span><br><span class="line">        pressTimer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行函数</span></span><br><span class="line">    <span class="keyword">const</span> handler = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      binding.value(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加事件监听器</span></span><br><span class="line">    el.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, start)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, start)</span><br><span class="line">    <span class="comment">// 取消计时器</span></span><br><span class="line">    el.addEventListener(<span class="string">&#x27;click&#x27;</span>, cancel)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>, cancel)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;touchend&#x27;</span>, cancel)</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;touchcancel&#x27;</span>, cancel)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传进来的值更新的时候触发</span></span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指令与元素解绑的时候，移除事件绑定</span></span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">&#x27;click&#x27;</span>, el.handler)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> longpress</span><br></pre></td></tr></table></figure><p>使用：给 Dom 加上 longpress 及回调函数即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-longpress</span>=<span class="string">&quot;longpress&quot;</span>&gt;</span>长按<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    longpress () &#123;</span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;长按指令生效&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-debounce-输入框防抖指令"><a href="#v-debounce-输入框防抖指令" class="headerlink" title="v-debounce 输入框防抖指令"></a>v-debounce 输入框防抖指令</h3><p>背景：在开发中，有些提交保存按钮有时候会在短时间内被点击多次，这样就会多次重复请求后端接口，造成数据的混乱，比如新增表单的提交按钮，多次点击就会新增多条重复的数据。</p><p>需求：防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。</p><p>思路：</p><ol><li>定义一个延迟执行的方法，如果在延迟时间内再调用该方法，则重新计算执行时间。</li><li>将时间绑定在 click 方法上。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      &#125;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        binding.value()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> debounce</span><br></pre></td></tr></table></figure><p>使用：给 Dom 加上 v-debounce 及回调函数即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-debounce</span>=<span class="string">&quot;debounceClick&quot;</span>&gt;</span>防抖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    debounceClick () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;只触发一次&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-emoji-禁止表情及特殊字符"><a href="#v-emoji-禁止表情及特殊字符" class="headerlink" title="v-emoji 禁止表情及特殊字符"></a>v-emoji 禁止表情及特殊字符</h3><p>背景：开发中遇到的表单输入，往往会有对输入内容的限制，比如不能输入表情和特殊字符，只能输入数字或字母等。</p><p>我们常规方法是在每一个表单的@change 事件上做处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;note&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;vaidateEmoji&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">vaidateEmoji</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="regexp">/[^\u4E00-\u9FA5|\d|\a-zA-Z|\r\n\s,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[\]]|\s/g</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.note = <span class="built_in">this</span>.note.replace(reg, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样代码量比较大而且不好维护，所以我们需要自定义一个指令来解决这问题。</p><p>需求：根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> findEle = <span class="function">(<span class="params">parent, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> parent.tagName.toLowerCase() === type ? parent : parent.querySelector(type)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> trigger = <span class="function">(<span class="params">el, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> e = <span class="built_in">document</span>.createEvent(<span class="string">&#x27;HTMLEvents&#x27;</span>)</span><br><span class="line">  e.initEvent(type, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  el.dispatchEvent(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emoji = &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 正则规则可根据需求自定义</span></span><br><span class="line">    <span class="keyword">var</span> regRule = <span class="regexp">/[^\u4E00-\u9FA5|\d|\a-zA-Z|\r\n\s,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[\]]|\s/g</span></span><br><span class="line">    <span class="keyword">let</span> $inp = findEle(el, <span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">    el.$inp = $inp</span><br><span class="line">    $inp.handle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> val = $inp.value</span><br><span class="line">      $inp.value = val.replace(regRule, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      trigger($inp, <span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    $inp.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, $inp.handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    el.$inp.removeEventListener(<span class="string">&#x27;keyup&#x27;</span>, el.$inp.handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emoji</span><br></pre></td></tr></table></figure><p>使用：将需要校验的输入框加上 v-emoji 即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;note&quot;</span> <span class="attr">v-emoji</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-LazyLoad-图片懒加载"><a href="#v-LazyLoad-图片懒加载" class="headerlink" title="v-LazyLoad 图片懒加载"></a>v-LazyLoad 图片懒加载</h3><p>背景：在类电商类项目，往往存在大量的图片，如 banner 广告图，菜单导航图，美团等商家列表头图等。图片众多以及图片体积过大往往会影响页面加载速度，造成不良的用户体验，所以进行图片懒加载优化势在必行。</p><p>需求：实现一个图片懒加载指令，只加载浏览器可见区域的图片。</p><p>思路：</p><ol><li>图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的</li><li>拿到所有的图片 dome ，遍历每个图片判断当前图片是否到了可视区范围内</li><li>如果到了就设置图片的 src 属性，否则显示默认图片</li></ol><p>图片懒加载有两种方式可以实现，一是绑定 srcoll 事件进行监听，二是使用 IntersectionObserver 判断图片是否到了可视区域，但是有浏览器兼容性问题。</p><p>下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 IntersectionObserver API，如果支持就使用 IntersectionObserver 实现懒加载，否则则使用 srcoll 事件监听 + 节流的方法实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LazyLoad = &#123;</span><br><span class="line">  <span class="comment">// install方法</span></span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue, options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> defaultSrc = options.default</span><br><span class="line">    Vue.directive(<span class="string">&#x27;lazy&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">bind</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">        LazyLoad.init(el, binding.value, defaultSrc)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">inserted</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (IntersectionObserver) &#123;</span><br><span class="line">          LazyLoad.observe(el)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          LazyLoad.listenerScroll(el)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params">el, val, def</span>)</span> &#123;</span><br><span class="line">    el.setAttribute(<span class="string">&#x27;data-src&#x27;</span>, val)</span><br><span class="line">    el.setAttribute(<span class="string">&#x27;src&#x27;</span>, def)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 利用IntersectionObserver监听el</span></span><br><span class="line">  <span class="function"><span class="title">observe</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> io = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> realSrc = el.dataset.src</span><br><span class="line">      <span class="keyword">if</span> (entries[<span class="number">0</span>].isIntersecting) &#123;</span><br><span class="line">        <span class="keyword">if</span> (realSrc) &#123;</span><br><span class="line">          el.src = realSrc</span><br><span class="line">          el.removeAttribute(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    io.observe(el)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 监听scroll事件</span></span><br><span class="line">  <span class="function"><span class="title">listenerScroll</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = LazyLoad.throttle(LazyLoad.load, <span class="number">300</span>)</span><br><span class="line">    LazyLoad.load(el)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      handler(el)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载真实图片</span></span><br><span class="line">  <span class="function"><span class="title">load</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> windowHeight = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    <span class="keyword">const</span> elTop = el.getBoundingClientRect().top</span><br><span class="line">    <span class="keyword">const</span> elBtm = el.getBoundingClientRect().bottom</span><br><span class="line">    <span class="keyword">const</span> realSrc = el.dataset.src</span><br><span class="line">    <span class="keyword">if</span> (elTop - windowHeight &lt; <span class="number">0</span> &amp;&amp; elBtm &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (realSrc) &#123;</span><br><span class="line">        el.src = realSrc</span><br><span class="line">        el.removeAttribute(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 节流</span></span><br><span class="line">  <span class="function"><span class="title">throttle</span>(<span class="params">fn, delay</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">let</span> prevTime</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> currTime = <span class="built_in">Date</span>.now()</span><br><span class="line">      <span class="keyword">const</span> context = <span class="built_in">this</span></span><br><span class="line">      <span class="keyword">if</span> (!prevTime) prevTime = currTime</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currTime - prevTime &gt; delay) &#123;</span><br><span class="line">        prevTime = currTime</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        prevTime = <span class="built_in">Date</span>.now()</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> LazyLoad</span><br></pre></td></tr></table></figure><p>使用，将组件内 <img> 标签的 src 换成 v-LazyLoad</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-LazyLoad</span>=<span class="string">&quot;xxx.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-permission-权限校验指令"><a href="#v-permission-权限校验指令" class="headerlink" title="v-permission 权限校验指令"></a>v-permission 权限校验指令</h3><p>背景：在一些后台管理系统，我们可能需要根据用户角色进行一些操作权限的判断，很多时候我们都是粗暴地给一个元素添加 v-if / v-show 来进行显示隐藏，但如果判断条件繁琐且多个地方需要判断，这种方式的代码不仅不优雅而且冗余。针对这种情况，我们可以通过全局自定义指令来处理。</p><p>需求：自定义一个权限指令，对需要权限判断的 dom 进行显示隐藏。</p><p>思路：</p><ol><li>自定义一个权限数组</li><li>判断用户的权限是否在这个数组内，如果是则显示，否则则移除 Dom</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkArray</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">  <span class="keyword">let</span> index = arr.indexOf(key)</span><br><span class="line">  <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 有权限</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 无权限</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permission = &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> permission = binding.value <span class="comment">// 获取到 v-permission的值</span></span><br><span class="line">    <span class="keyword">if</span> (permission) &#123;</span><br><span class="line">      <span class="keyword">let</span> hasPermission = checkArray(permission)</span><br><span class="line">      <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">        <span class="comment">// 没有权限 移除Dom元素</span></span><br><span class="line">        el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> permission</span><br></pre></td></tr></table></figure><p>使用：给 v-permission 赋值判断即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;1&#x27;&quot;</span>&gt;</span>权限按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不显示 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;10&#x27;&quot;</span>&gt;</span>权限按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue-waterMarker-实现页面水印"><a href="#vue-waterMarker-实现页面水印" class="headerlink" title="vue-waterMarker 实现页面水印"></a>vue-waterMarker 实现页面水印</h3><p>需求：给整个页面添加背景水印</p><p>思路：</p><ol><li>使用 canvas 特性生成 base64 格式的图片文件，设置其字体大小，颜色等。</li><li>将其设置为背景图片，从而实现页面或组件水印效果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addWaterMarker</span>(<span class="params">str, parentNode, font, textColor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 水印文字，父元素，字体，文字颜色</span></span><br><span class="line">  <span class="keyword">var</span> can = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">  parentNode.appendChild(can)</span><br><span class="line">  can.width = <span class="number">200</span></span><br><span class="line">  can.height = <span class="number">150</span></span><br><span class="line">  can.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> cans = can.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">  cans.rotate((-<span class="number">20</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line">  cans.font = font || <span class="string">&#x27;16px Microsoft JhengHei&#x27;</span></span><br><span class="line">  cans.fillStyle = textColor || <span class="string">&#x27;rgba(180, 180, 180, 0.3)&#x27;</span></span><br><span class="line">  cans.textAlign = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">  cans.textBaseline = <span class="string">&#x27;Middle&#x27;</span></span><br><span class="line">  cans.fillText(str, can.width / <span class="number">10</span>, can.height / <span class="number">2</span>)</span><br><span class="line">  parentNode.style.backgroundImage = <span class="string">&#x27;url(&#x27;</span> + can.toDataURL(<span class="string">&#x27;image/png&#x27;</span>) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> waterMarker = &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    addWaterMarker(binding.value.text, el, binding.value.font, binding.value.textColor)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> waterMarker</span><br></pre></td></tr></table></figure><p>使用，设置水印文案，颜色，字体大小即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-waterMarker</span>=<span class="string">&quot;&#123;text:&#x27;lzg版权所有&#x27;,textColor:&#x27;rgba(180, 180, 180, 0.4)&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-draggable-拖拽指令"><a href="#v-draggable-拖拽指令" class="headerlink" title="v-draggable 拖拽指令"></a>v-draggable 拖拽指令</h3><p>需求：实现一个拖拽指令，可在页面可视区域任意拖拽元素。</p><p>思路：</p><ol><li>设置需要拖拽的元素为相对定位，其父元素为绝对定位。</li><li>鼠标按下(onmousedown)时记录目标元素当前的 left 和 top 值。</li><li>鼠标移动(onmousemove)时计算每次移动的横向距离和纵向距离的变化值，并改变元素的 left 和 top 值</li><li>鼠标松开(onmouseup)时完成一次拖拽</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> draggable = &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    el.style.cursor = <span class="string">&#x27;move&#x27;</span></span><br><span class="line">    el.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> disx = e.pageX - el.offsetLeft</span><br><span class="line">      <span class="keyword">let</span> disy = e.pageY - el.offsetTop</span><br><span class="line">      <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> x = e.pageX - disx</span><br><span class="line">        <span class="keyword">let</span> y = e.pageY - disy</span><br><span class="line">        <span class="keyword">let</span> maxX = <span class="built_in">document</span>.body.clientWidth - <span class="built_in">parseInt</span>(<span class="built_in">window</span>.getComputedStyle(el).width)</span><br><span class="line">        <span class="keyword">let</span> maxY = <span class="built_in">document</span>.body.clientHeight - <span class="built_in">parseInt</span>(<span class="built_in">window</span>.getComputedStyle(el).height)</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          x = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; maxX) &#123;</span><br><span class="line">          x = maxX</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          y = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &gt; maxY) &#123;</span><br><span class="line">          y = maxY</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        el.style.left = x + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        el.style.top = y + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="built_in">document</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> draggable</span><br></pre></td></tr></table></figure><p>使用: 在 Dom 上加上 v-draggable 即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-dialog&quot;</span> <span class="attr">v-draggable</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五招让你成为Vue.js大师</title>
      <link href="2020/12/11/vueMoves/"/>
      <url>2020/12/11/vueMoves/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对大部分人来说, 掌握Vue.js基本的几个API后就已经能够正常地开发前端网站。但如果你想更加高效地使用Vue来开发, 成为Vue.js大师, 那下面的这五招你一定得认真学习一下了。 </p></blockquote><h1 id="第一招-化繁为简的Watchers"><a href="#第一招-化繁为简的Watchers" class="headerlink" title="第一招: 化繁为简的Watchers"></a>第一招: 化繁为简的Watchers</h1><p>场景还原:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    this.fetchPostList()</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">    searchInputValue()&#123;</span><br><span class="line">        this.fetchPostList()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件创建的时候我们获取一次列表, 同时监听input框, 每当发生变化的时候重新获取一次筛选后的列表这个场景很常见, 有没有办法优化一下呢？<br>招式解析:<br>首先, 在watchers中, 可以直接使用函数的字面量名称；其次, 声明immediate:true表示创建组件时立马执行一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    searchInputValue:&#123;</span><br><span class="line">        handler: &#39;fetchPostList&#39;,</span><br><span class="line">        immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二招-一劳永逸的组件注册"><a href="#第二招-一劳永逸的组件注册" class="headerlink" title="第二招: 一劳永逸的组件注册"></a>第二招: 一劳永逸的组件注册</h1><p>场景还原:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import BaseButton from &#39;.&#x2F;baseButton&#39;</span><br><span class="line">import BaseIcon from &#39;.&#x2F;baseIcon&#39;</span><br><span class="line">import BaseInput from &#39;.&#x2F;baseInput&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseButton,</span><br><span class="line">    BaseIcon,</span><br><span class="line">    BaseInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;BaseInput v-model&#x3D;&quot;searchText&quot; @keydown.enter&#x3D;&quot;search&quot;&#x2F;&gt;</span><br><span class="line">&lt;BaseButton @click&#x3D;&quot;search&quot;&gt;</span><br><span class="line">  &lt;BaseIcon name&#x3D;&quot;search&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;BaseButton&gt;</span><br></pre></td></tr></table></figure><p>我们写了一堆基础UI组件, 然后每次我们需要使用这些组件的时候, 都得先import, 然后声明components, 很繁琐！秉持能偷懒就偷懒的原则, 我们要想办法优化！<br>招式解析:<br>我们需要借助一下神器webpack, 使用 require.context() 方法来创建自己的（模块）上下文, 从而实现自动动态require组件。这个方法需要3个参数: 要搜索的文件夹目录, 是否还应该搜索它的子目录, 以及一个匹配文件的正则表达式。<br>我们在components文件夹添加一个叫global.js的文件, 在这个文件里借助webpack动态将需要的基础组件统统打包进来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">function capitalizeFirstLetter(string) &#123;</span><br><span class="line">  return string.charAt(0).toUpperCase() + string.slice(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const requireComponent &#x3D; require.context(</span><br><span class="line">  &#39;.&#39;, false, &#x2F;\.vue$&#x2F;</span><br><span class="line">   &#x2F;&#x2F; 找到components文件夹下以.vue命名的文件</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(fileName &#x3D;&gt; &#123;</span><br><span class="line">  const componentConfig &#x3D; requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  const componentName &#x3D; capitalizeFirstLetter(</span><br><span class="line">    fileName.replace(&#x2F;^\.\&#x2F;&#x2F;, &#39;&#39;).replace(&#x2F;\.\w+$&#x2F;, &#39;&#39;)</span><br><span class="line">    &#x2F;&#x2F; 因为得到的filename格式是: &#39;.&#x2F;baseButton.vue&#39;, 所以这里我们去掉头和尾, 只保留真正的文件名</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  Vue.component(componentName, componentConfig.default || componentConfig)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后我们在main.js中import ‘components/global.js’, 然后我们就可以随时随地使用这些基础组件, 无需手动引入了。</p><h1 id="第三招-釜底抽薪的router-key"><a href="#第三招-釜底抽薪的router-key" class="headerlink" title="第三招: 釜底抽薪的router key"></a>第三招: 釜底抽薪的router key</h1><p>场景还原:<br>下面这个场景真的是伤透了很多程序员的心…先默认大家用的是Vue-router来实现路由的控制。<br>假设我们在写一个博客网站, 需求是从/post-page/a, 跳转到/post-page/b。然后我们惊人的发现, 页面跳转后数据竟然没更新？！原因是vue-router”智能地”发现这是同一个组件, 然后它就决定要复用这个组件, 所以你在created函数里写的方法压根就没执行。通常的解决方案是监听route的变化来初始化数据, 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    loading: false,</span><br><span class="line">    error: null,</span><br><span class="line">    post: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, </span><br><span class="line">watch: &#123;</span><br><span class="line">  &#39;$route&#39;: &#123;</span><br><span class="line">    handler: &#39;resetData&#39;,</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  resetData() &#123;</span><br><span class="line">    this.loading &#x3D; false</span><br><span class="line">    this.error &#x3D; null</span><br><span class="line">    this.post &#x3D; null</span><br><span class="line">    this.getPost(this.$route.params.id)</span><br><span class="line">  &#125;,</span><br><span class="line">  getPost(id)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bug是解决了, 可每次这么写也太不优雅了吧？秉持着能偷懒则偷懒的原则, 我们希望代码这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    loading: false,</span><br><span class="line">    error: null,</span><br><span class="line">    post: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">  this.getPost(this.$route.params.id)</span><br><span class="line">&#125;,</span><br><span class="line">methods () &#123;</span><br><span class="line">  getPost(postId) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>招式解析:<br>那要怎么样才能实现这样的效果呢, 答案是给router-view添加一个unique的key, 这样即使是公用组件, 只要url变化了, 就一定会重新创建这个组件。（虽然损失了一丢丢性能, 但避免了无限的bug）。同时, 注意我将key直接设置为路由的完整路径, 一举两得。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key&#x3D;&quot;$route.fullpath&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure><h1 id="第四招-无所不能的render函数"><a href="#第四招-无所不能的render函数" class="headerlink" title="第四招: 无所不能的render函数"></a>第四招: 无所不能的render函数</h1><p>场景还原:<br>vue要求每一个组件都只能有一个根元素, 当你有多个根元素时, vue就会给你报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;route in routes&quot; :key&#x3D;&quot;route.name&quot;&gt;</span><br><span class="line">    &lt;router-link :to&#x3D;&quot;route&quot;&gt;</span><br><span class="line">      &#123;&#123; route.title &#125;&#125;</span><br><span class="line">    &lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ERROR - Component template should contain exactly one root element. </span><br><span class="line">    If you are using v-if on multiple elements, use v-else-if </span><br><span class="line">    to chain them instead.</span><br></pre></td></tr></table></figure><p>招式解析:<br>那有没有办法化解呢, 答案是有的, 只不过这时候我们需要使用render()函数来创建HTML, 而不是template。其实用js来生成html的好处就是极度的灵活功能强大, 而且你不需要去学习使用vue的那些功能有限的指令API, 比如v-for, v-if。（reactjs就完全丢弃了template）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">functional: true,</span><br><span class="line">render(h, &#123; props &#125;) &#123;</span><br><span class="line">  return props.routes.map(route &#x3D;&gt;</span><br><span class="line">    &lt;li key&#x3D;&#123;route.name&#125;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&#123;route&#125;&gt;</span><br><span class="line">        &#123;route.title&#125;</span><br><span class="line">      &lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第五招-无招胜有招的高阶组件"><a href="#第五招-无招胜有招的高阶组件" class="headerlink" title="第五招: 无招胜有招的高阶组件"></a>第五招: 无招胜有招的高阶组件</h1><p>划重点: 这一招威力无穷, 请务必掌握<br>当我们写组件的时候, 通常我们都需要从父组件传递一系列的props到子组件, 同时父组件监听子组件emit过来的一系列事件。举例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">&lt;BaseInput </span><br><span class="line">    :value&#x3D;&quot;value&quot;</span><br><span class="line">    label&#x3D;&quot;密码&quot; </span><br><span class="line">    placeholder&#x3D;&quot;请填写密码&quot;</span><br><span class="line">    @input&#x3D;&quot;handleInput&quot;</span><br><span class="line">    @focus&#x3D;&quot;handleFocus&gt;</span><br><span class="line">&lt;&#x2F;BaseInput&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &#123;&#123; label &#125;&#125;</span><br><span class="line">    &lt;input</span><br><span class="line">      :value&#x3D;&quot;value&quot;</span><br><span class="line">      :placeholder&#x3D;&quot;placeholder&quot;</span><br><span class="line">      @focus&#x3D;$emit(&#39;focus&#39;, $event)&quot;</span><br><span class="line">      @input&#x3D;&quot;$emit(&#39;input&#39;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>有下面几个优化点:</p><ul><li><p>每一个从父组件传到子组件的props, 我们都得在子组件的Props中显式的声明才能使用。这样一来, 我们的子组件每次都需要申明一大堆props, 而类似placeholer这种dom原生的property我们其实完全可以直接从父传到子, 无需声明。方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">      :value&#x3D;&quot;value&quot;</span><br><span class="line">      v-bind&#x3D;&quot;$attrs&quot;</span><br><span class="line">      @input&#x3D;&quot;$emit(&#39;input&#39;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><p>$attrs包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时, 这里会包含所有父作用域的绑定, 并且可以通过 v-bind=”$attrs” 传入内部组件——在创建更高层次的组件时非常有用。</p></li><li><p>注意到子组件的@focus=$emit(‘focus’, $event)”其实什么都没做, 只是把event传回给父组件而已, 那其实和上面类似, 我完全没必要显式地申明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input :value&#x3D;&quot;value&quot; v-bind&#x3D;&quot;$attrs&quot; v-on&#x3D;&quot;listeners&quot;&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  listeners() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ...this.$listeners,</span><br><span class="line">      input: event &#x3D;&gt; </span><br><span class="line">        this.$emit(&#39;input&#39;, event.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$listeners包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。</p></li><li><p>需要注意的是, 由于我们input并不是BaseInput这个组件的根节点, 而默认情况下父作用域的不被认作 props 的特性绑定将会“回退”且作为普通的 HTML 特性应用在子组件的根元素上。所以我们需要设置inheritAttrs:false, 这些默认行为将会被去掉, 以上两点的优化才能成功。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动适配 2x、3x 背景图</title>
      <link href="2020/11/26/2x3x/"/>
      <url>2020/11/26/2x3x/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>DPI</code>: dots per inch, 表示一英寸多少个像素点, 我一般称作像素密度，简称密度</li><li><code>分辨率</code>: 横纵2个方向的像素点的数量</li></ul><blockquote><p>这个世界上存在着很多不同屏幕密度的手机，屏幕密度是什么？就是dpi，就是单位长度里的像素数量, 想象一下如果这些手机的尺寸一样, 屏幕密度相差很大, 那么是不是说一个手机水平方向上像素很少，另一个手机水平方向上像素很多？</p></blockquote><p>所以经常会发生这种情况: 同样一张背景图, 分别在设备尺寸一样的安卓设备和ios设备中表现不一致，一个稍微模糊，一个比较清晰，大小都一样, 这就是因为DPI不一样, 也就是渲染图片的像素点不一样所导致。</p><h2 id="兼容思路"><a href="#兼容思路" class="headerlink" title="兼容思路"></a>兼容思路</h2><p>基于这种情况, 就出现了 <code>2倍</code>、<code>3倍</code> 尺寸图的概念, 简单来说, 我们在 <code>1倍DPI</code>, <code>2倍DPI</code> 的屏幕设备上，使用 <code>2倍尺寸的图片</code>, <code>3倍</code> DPI 屏幕设备上使用 <code>3倍尺寸的图片</code>, 使图片始终保持高清, 通常 <code>2倍尺寸的图片</code>和<code>3倍尺寸的图片</code>被称为 <code>2x</code> 图 <code>3x</code> 图</p><blockquote><p>为什么1倍DPI也使用2x图片？</p></blockquote><p>因为图片缩小不会模糊</p><blockquote><p>既然缩小不会模糊，那为什么不全部使用3x图片？</p></blockquote><p>为了提高性能, 如果图片全部使用3x图, 提高了手机流量的消耗, 而且页面加载速度也会大打折扣</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>首先保证两套图片命名是由 <code>@2x.png</code>、 <code>@3x.png</code>结尾, 同一张图, 两套命名一致, 后缀除外, 如下图:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154040.jpeg"></p><ul><li><p>使用 <code>less</code> 写一个通用的函数, 通过 <code>媒体查询</code> 选择对应的图片</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-image</span>(<span class="variable">@picname</span>) &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;../images/@&#123;picname&#125;@2x.png&quot;</span>);</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>),(<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&quot;../images/@&#123;picname&#125;@3x.png&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用时调用该函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">    <span class="selector-class">.bg-image</span>(<span class="string">&#x27;clied&#x27;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>效果图</p></li></ul><p>2倍密度的手机, 应用2倍的图片</p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154041.jpeg"></p><p>切换3倍密度的手机, 自动更换成3倍图片</p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154044.jpeg"></p><h2 id="压缩图片（彩蛋）"><a href="#压缩图片（彩蛋）" class="headerlink" title="压缩图片（彩蛋）"></a>压缩图片（彩蛋）</h2><p>稍大些的图片通常都需要通过<code>无损压缩</code>来提高性能体验; 压缩图片的工具有很多, 但是多多少少都会有些缺陷, 推荐一个网站线上压缩: <a href="https://tinypng.com/">https://tinypng.com</a></p><p><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228154043.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html 5 </tag>
            
            <tag> CSS 3 </tag>
            
            <tag> Less </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>妙用笔记，JS中的骚操作</title>
      <link href="2020/11/26/jsskill/"/>
      <url>2020/11/26/jsskill/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-切换变量-1、0"><a href="#使用-切换变量-1、0" class="headerlink" title="使用 ^ 切换变量 1、0"></a>使用 <code>^</code> 切换变量 1、0</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toggle;</span><br><span class="line"><span class="comment">// 0 ~ 1 之间来回切换, 每执行一次即变化一次</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 1</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 0</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 1</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 0</span></span><br><span class="line">toggle ^= <span class="number">1</span>;  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h1 id="使用-转为布尔值"><a href="#使用-转为布尔值" class="headerlink" title="使用 !! 转为布尔值"></a>使用 <code>!!</code> 转为布尔值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">7</span>);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!-<span class="number">1</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0.71</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&#x27;str&#x27;</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&#x27;0&#x27;</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!![]);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!&#123;&#125;);        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>);         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&#x27;&#x27;</span>);        <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>);      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 !0, !1 替代 true、false</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">0</span>)           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">1</span>)           <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="使用-amp-1-判断奇偶数"><a href="#使用-amp-1-判断奇偶数" class="headerlink" title="使用 &amp; 1 判断奇偶数"></a>使用 <code>&amp; 1</code> 判断奇偶数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &amp; 符号左边为需要判断奇偶数的数值, 右边固定为 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 1, 则为奇数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span> &amp; <span class="number">1</span>);   <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span> &amp; <span class="number">1</span>) ;  <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &amp; <span class="number">1</span>) ;  <span class="comment">// 返回值为 0, 则为偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp; <span class="number">1</span>) ; <span class="comment">// 返回值为 0, 则为偶数</span></span><br></pre></td></tr></table></figure><h1 id="使-gt-gt-0-lt-lt-0-0-取整"><a href="#使-gt-gt-0-lt-lt-0-0-取整" class="headerlink" title="使 ~~, &gt;&gt;0, &lt;&lt;0, |0 取整"></a>使 <code>~~</code>, <code>&gt;&gt;0</code>, <code>&lt;&lt;0</code>, <code>|0</code> 取整</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ~~ 单目操作符</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">11.71</span>);         <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(~~-<span class="number">11.71</span>);        <span class="comment">// -11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;&gt;、&lt;&lt;、| , 表现一致, 运算符左边为需要取整的数值, 右边固定为 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> &gt;&gt; <span class="number">0</span>);      <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">11.71</span> &gt;&gt; <span class="number">0</span>);     <span class="comment">// -11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> &lt;&lt; <span class="number">0</span>);      <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">11.71</span> &lt;&lt; <span class="number">0</span>);     <span class="comment">// -11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11.71</span> | <span class="number">0</span>);       <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">11.71</span> | <span class="number">0</span>);      <span class="comment">// -11</span></span><br></pre></td></tr></table></figure><h1 id="判断数值是否都是正数或者都是负数"><a href="#判断数值是否都是正数或者都是负数" class="headerlink" title="判断数值是否都是正数或者都是负数"></a>判断数值是否<code>都是正数</code>或者<code>都是负数</code></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构赋值, x = 1, y = 2, 判断表达式固定写法 (数值1 ^ 数值2) &gt;= 0</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 同为正数返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y] = [-<span class="number">1</span>, -<span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 同为负数返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, -<span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 一个正数,一个负数返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y] = [-<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// 一个负数,一个正数返回 false</span></span><br></pre></td></tr></table></figure><h1 id="使用-1-0-来替代-Infinity"><a href="#使用-1-0-来替代-Infinity" class="headerlink" title="使用 1/0 来替代 Infinity"></a>使用 <code>1/0</code> 来替代 Infinity</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>/<span class="number">0</span>)        <span class="comment">// Infinty</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">1</span>/<span class="number">0</span>)       <span class="comment">// -Infinty</span></span><br></pre></td></tr></table></figure><h1 id="n-amp-n-1-如果返回-0-说明-n-是-2-的整数幂"><a href="#n-amp-n-1-如果返回-0-说明-n-是-2-的整数幂" class="headerlink" title="n &amp; (n - 1), 如果返回 0, 说明 n 是 2 的整数幂"></a><code>n &amp; (n - 1)</code>, 如果返回 0, 说明 n 是 2 的整数幂</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> &amp; (<span class="number">2</span> - <span class="number">1</span>))    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span> &amp; (<span class="number">4</span> - <span class="number">1</span>))    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &amp; (<span class="number">8</span> - <span class="number">1</span>))    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span> &amp; (<span class="number">16</span> - <span class="number">1</span>))  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: n 应该为大于等于 2 的正整数, 以下情况不可取</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp; (<span class="number">1</span> - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp; (<span class="number">0</span> - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">16</span> &amp; (-<span class="number">16</span> - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2.7</span> &amp; (<span class="number">2.7</span> - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h1 id="使用-n-0-5-0-四舍五入"><a href="#使用-n-0-5-0-四舍五入" class="headerlink" title="使用 n + 0.5 | 0 四舍五入"></a>使用 <code>n + 0.5 | 0</code> 四舍五入</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2.4</span> + <span class="number">0.5</span> | <span class="number">0</span>)    <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2.5</span> + <span class="number">0.5</span> | <span class="number">0</span>)    <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是负数，只需要 - 0.5</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">2.7</span> - <span class="number">0.5</span> | <span class="number">0</span>)   <span class="comment">// -3</span></span><br></pre></td></tr></table></figure><h1 id="一些可以替代-undefined-的操作"><a href="#一些可以替代-undefined-的操作" class="headerlink" title="一些可以替代 undefined 的操作"></a>一些可以替代 <code>undefined</code> 的操作</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;&#x27;</span>._;     <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1.</span>._;     <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">0</span>[<span class="number">0</span>];     <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">void</span> <span class="number">0</span>;   <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">a === b &amp;&amp; b === c &amp;&amp; c === d &amp;&amp; d === a &amp;&amp; a === <span class="literal">undefined</span>   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="使用-Array-length-0-来清空数组"><a href="#使用-Array-length-0-来清空数组" class="headerlink" title="使用 Array.length = 0 来清空数组"></a>使用 <code>Array.length = 0</code> 来清空数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h1 id="使用-amp-gt-gt-来完成rgb值和16进制颜色值之间的转换"><a href="#使用-amp-gt-gt-来完成rgb值和16进制颜色值之间的转换" class="headerlink" title="使用 &amp;, &gt;&gt;,| 来完成rgb值和16进制颜色值之间的转换"></a>使用 <code>&amp;</code>, <code>&gt;&gt;</code>,<code>|</code> 来完成rgb值和16进制颜色值之间的转换</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 16进制颜色值转RGB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>hex 16进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>RGB颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hexToRGB</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hexx = hex.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> r = hexx &gt;&gt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">const</span> g = hexx &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">const</span> b = hexx &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RGB颜色转16进制颜色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>rgb RGB进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>16进制颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RGBToHex</span>(<span class="params">rgb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> rgbArr = rgb.split(<span class="regexp">/[^\d]+/</span>)</span><br><span class="line">    <span class="keyword">const</span> color = rgbArr[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | rgbArr[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | rgbArr[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span>+ color.toString(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line">hexToRGB(<span class="string">&#x27;#ffffff&#x27;</span>)               <span class="comment">// &#x27;rgb(255,255,255)&#x27;</span></span><br><span class="line">RGBToHex(<span class="string">&#x27;rgb(255, 255, 255)&#x27;</span>)      <span class="comment">// &#x27;#ffffff&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="使用-link-创建链接"><a href="#使用-link-创建链接" class="headerlink" title="使用 .link() 创建链接"></a>使用 <code>.link()</code> 创建链接</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --- before ---</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`&lt;a herf=&quot;www.google.com&quot;&gt;google&lt;/a&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个鲜为人知的方法，可以快速创建 a 标签</span></span><br><span class="line"><span class="comment">// --- after ---</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;google&#x27;</span>.link(<span class="string">&#x27;www.google.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="使用-Array-includes-来处理多重条件"><a href="#使用-Array-includes-来处理多重条件" class="headerlink" title="使用 Array.includes 来处理多重条件"></a>使用 <code>Array.includes</code> 来处理多重条件</h1><p>举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件语句</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fruit === <span class="string">&#x27;apple&#x27;</span> || fruit === <span class="string">&#x27;strawberry&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，这么写似乎没什么大问题。然而，如果我们想要匹配更多的红色水果呢，比方说『樱桃』和『蔓越莓』？我们是不是得用更多的 || 来扩展这条语句？<br>我们可以使用 <code>Array.includes(Array.includes)</code> 重写以上条件句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把条件提取到数组中</span></span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把红色的水果（条件）都提取到一个数组中，这使得我们的代码看起来更加整洁。</p><h1 id="少写嵌套，尽早返回"><a href="#少写嵌套，尽早返回" class="headerlink" title="少写嵌套，尽早返回"></a>少写嵌套，尽早返回</h1><p>让我们为之前的例子添加两个条件: 如果没有提供水果，抛出错误。如果该水果的数量大于 10，将其打印出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">  <span class="keyword">if</span> (fruit) &#123;</span><br><span class="line">    <span class="comment">// 条件 2：必须为红色</span></span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">      <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;big quantity&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No fruit!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 报错：No fruits</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>); <span class="comment">// 打印：red</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>, <span class="number">20</span>); <span class="comment">// 打印：red，big quantity</span></span><br></pre></td></tr></table></figure><p>让我们来仔细看看上面的代码，我们有:</p><ul><li>1 个 if/else 语句来筛选无效的条件</li><li>3 层 if 语句嵌套（条件 1，2 &amp; 3）</li></ul><blockquote><p>就我个人而言，我遵循的一个总的规则是当发现无效条件时尽早返回。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件 1：尽早抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No fruit!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件2：必须为红色</span></span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;big quantity&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，我们就少写了一层嵌套。这是种很好的代码风格，尤其是在 if 语句很长的时候（试想一下，你得滚动到底部才能知道那儿还有个 else 语句，是不是有点不爽）。<br>如果反转一下条件，我们还可以进一步地减少嵌套层级。注意观察下面的条件 2 语句，看看是如何做到这点的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;cranberries&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No fruit!&#x27;</span>); <span class="comment">// 条件 1：尽早抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!redFruits.includes(fruit)) <span class="keyword">return</span>; <span class="comment">// 条件 2：当 fruit 不是红色的时候，直接返回</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">  <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;big quantity&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反转条件 2 的条件，现在我们的代码已经没有嵌套了。当我们代码的逻辑链很长，并且希望当某个条件不满足时不再执行之后流程时，这个技巧会很好用。<br>然而，并没有任何硬性规则要求你这么做。这取决于你自己，对你而言，这个版本的代码（没有嵌套）是否要比之前那个版本（条件 2 有嵌套）的更好、可读性更强？<br>是我的话，我会选择前一个版本（条件 2 有嵌套）。原因在于:</p><ul><li>这样的代码比较简短和直白，一个嵌套的 if 使得结构更加清晰。</li><li>条件反转会导致更多的思考过程（增加认知负担）。</li></ul><p>因此，始终追求更少的嵌套，更早地返回，但是不要过度。</p><h1 id="使用函数默认参数和解构"><a href="#使用函数默认参数和解构" class="headerlink" title="使用函数默认参数和解构"></a>使用函数默认参数和解构</h1><p>我猜你也许很熟悉以下的代码，在 JavaScript 中我们经常需要检查 null / undefined 并赋予默认值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> q = quantity || <span class="number">1</span>; <span class="comment">// 如果没有提供 quantity，默认为 1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;q&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="string">&#x27;banana&#x27;</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>事实上，我们可以通过函数的默认参数来去掉变量 q。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity = <span class="number">1</span></span>) </span>&#123; <span class="comment">// 如果没有提供 quantity，默认为 1</span></span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`We have <span class="subst">$&#123;quantity&#125;</span> <span class="subst">$&#123;fruit&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="string">&#x27;banana&#x27;</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br></pre></td></tr></table></figure><p>是不是更加简单、直白了？请注意，所有的函数参数都可以有其默认值。举例来说，我们同样可以为 fruit 赋予一个默认值：function test(fruit = ‘unknown’, quantity = 1)。<br>那么如果 fruit 是一个对象（Object）呢？我们还可以使用默认参数吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 如果有值，则打印出来</span></span><br><span class="line">  <span class="keyword">if</span> (fruit &amp;&amp; fruit.name)  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log (fruit.name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;unknown&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p>观察上面的例子，当水果名称属性存在时，我们希望将其打印出来，否则打印『unknown』。我们可以通过默认参数和解构赋值的方法来避免写出 fruit &amp;&amp; fruit.name 这种条件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构 —— 只得到 name 属性</span></span><br><span class="line"><span class="comment">// 默认参数为空对象 &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (name || <span class="string">&#x27;unknown&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p>既然我们只需要 fruit 的 name 属性，我们可以使用 {name} 来将其解构出来，之后我们就可以在代码中使用 name 变量来取代 fruit.name。<br>我们还使用 {} 作为其默认值。如果我们不这么做的话，在执行 test(undefined) 时，你会得到一个错误 Cannot destructure property name of ‘undefined’ or ‘null’.，因为 undefined 上并没有 name 属性。（译者注：这里不太准确，其实因为解构只适用于对象（Object），而不是因为undefined 上并没有 name 属性（空对象上也没有）。参考解构赋值 - MDN）<br>如果你不介意使用第三方库的话，有一些方法可以帮助减少空值（null）检查：</p><p>使用 Lodash get 函数<br>使用 Facebook 开源的 idx 库（需搭配 Babeljs）</p><p>这里有一个使用 Lodash 的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  使用 lodash 库提供的 _ 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(_.get(fruit, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>)); <span class="comment">// 获取属性 name 的值，如果没有，设为默认值 unknown</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p>你可以在这里运行演示代码。另外，如果你偏爱函数式编程（FP），你可以选择使用 Lodash fp——函数式版本的 Lodash（方法名变为 get 或 getOr）。</p><h1 id="相较于-switch，Map-Object-也许是更好的选择"><a href="#相较于-switch，Map-Object-也许是更好的选择" class="headerlink" title="相较于 switch，Map / Object 也许是更好的选择"></a>相较于 <code>switch</code>，<code>Map / Object</code> 也许是更好的选择</h1><p>让我们看下面的例子，我们想要根据颜色打印出各种水果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 switch case 来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;purple&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;plum&#x27;</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">&#x27;yellow&#x27;</span>); <span class="comment">// [&#x27;banana&#x27;, &#x27;pineapple&#x27;]</span></span><br></pre></td></tr></table></figure><p>上面的代码看上去并没有错，但是就我个人而言，它看上去很冗长。同样的结果可以通过对象字面量来实现，语法也更加简洁:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象字面量来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = &#123;</span><br><span class="line">    red: [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>],</span><br><span class="line">    yellow: [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>],</span><br><span class="line">    purple: [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;plum&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor[color] || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，你也可以使用 Map 来实现同样的效果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Map 来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    .set(<span class="string">&#x27;red&#x27;</span>, [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>])</span><br><span class="line">    .set(<span class="string">&#x27;yellow&#x27;</span>, [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>])</span><br><span class="line">    .set(<span class="string">&#x27;purple&#x27;</span>, [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;plum&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor.get(color) || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map 是 ES2015 引入的新的对象类型，允许你存放键值对。<br>那是不是说我们应该禁止使用 switch 语句？ 别把自己限制住。我自己会在任何可能的时候使用对象字面量，但是这并不是说我就不用 switch，这得视场景而定。</p><blockquote><p>懒人版：重构语法</p></blockquote><p>就以上的例子，事实上我们可以通过重构我们的代码，使用 Array.filter 实现同样的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;strawberry&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;pineapple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;plum&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 Array filter 来找到对应颜色的水果</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决问题的方法永远不只一种。对于这个例子我们展示了四种实现方法。</p><h1 id="使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>使用 <code>Array.every</code> 和 <code>Array.some</code> 来处理全部/部分满足条件</h1><p>观察以下的代码，我们想要检查是否所有的水果都是红色的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color == <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码也太长了！我们可以通过 Array.every 来缩减代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：（简短形式）所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清晰多了对吧？类似的，如果我们想要检查是否有至少一个水果是红色的，我们可以使用 Array.some 仅用一行代码就实现出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;grape&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;purple&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：至少一个水果是红色的</span></span><br><span class="line">  <span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAnyRed); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gyp ERR! stack Error: EACCES: permission denied, mkdir 问题解决方案</title>
      <link href="2020/11/26/permission/"/>
      <url>2020/11/26/permission/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>权限问题</strong></p><ul><li>npm 出于安全考虑不支持以 root 用户运行，即使你用 root 用户身份运行了，npm 会自动转成一个叫 nobody 的用户来运行，而这个用户几乎没有任何权限。这样的话如果你脚本里有一些需要权限的操作，比如写文件（尤其是写 /root/.node-gyp），就会崩掉了。</li><li>为了避免这种情况，加 –unsafe-perm 参数，这样就不会切换到 nobody 上，运行时是哪个用户就是哪个用户，即是 root。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install --unsafe-perm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 使用技巧之自定义快捷键唤起 APP</title>
      <link href="2020/11/26/Automator/"/>
      <url>2020/11/26/Automator/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>通过自定义的快捷键，快速打开 MAC 上已经安装的应用</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>通过 MAC 自带软件 Automator.app（自动操作），运行 AppleScript 实现打开应用</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>快捷键 Cmd + 空格 打开 Automator.app。搜索框键入 Automator，打开自动操作。（或是：打开启动台 -&gt; 其他 -&gt; 自动操作）<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152837.png"></p></li><li><p>新建项目，类型选择快速操作<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152839.png"></p></li><li><p>左侧栏双击运行 AppleScript，右上工作流程选择没有输入。<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152841.png"></p></li><li><p>右中文本框键入以下内容，这里以唤起MAC自带终端 Terminal 为例：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> <span class="built_in">run</span> &#123;input, parameters&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">(* Your script goes here *)</span></span><br><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;Terminal&quot;</span></span><br><span class="line">reopen</span><br><span class="line"><span class="built_in">activate</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="built_in">run</span></span><br></pre></td></tr></table></figure></li><li><p>点击运行，看应用（ 终端 ）是否可以正常打开<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152838.png"></p></li><li><p>command + s 保存脚本。为其命名OpenTerminal 。<br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152840.png"></p></li><li><p>打开系统偏好设置 -&gt; 键盘 -&gt; 快捷键 -&gt; 左侧栏点开服务 -&gt; 右侧栏找到 OpenTerminal。 <br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152842.png"></p></li><li><p>双击 OpenTerminal，右侧显示添加快捷键，点击它进入输入框按下一个自定义快捷键 <br><img src="https://cdn.jsdelivr.net/gh/og-liu/image-host/20201228152843.png"></p></li><li><p>至此已完成，按下快捷键试试吧</p></li><li><p>上述是以MAC自带终端 Terminal 为例，其他应用步骤一样，需要先确认是否已经安装了应用及应用名称，然后在 <code>步骤4</code> 处，修改代码中的应用名称 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> <span class="built_in">run</span> &#123;input, parameters&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">(* Your script goes here *)</span></span><br><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;Webstorm&quot;</span><span class="comment">(* 此处Webstorm 即为需要唤醒的应用 *)</span></span><br><span class="line">reopen</span><br><span class="line"><span class="built_in">activate</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="built_in">run</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量的多色动态 SVG 组件</title>
      <link href="2020/11/26/svg/"/>
      <url>2020/11/26/svg/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>支持包</th><th>版本</th></tr></thead><tbody><tr><td>Vue</td><td>2.0+</td></tr></tbody></table><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install svg-vuejs</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p><code>main.js</code> 全局引入组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueSvg <span class="keyword">from</span> <span class="string">&#x27;svg-vuejs/VueSvg.vue&#x27;</span></span><br><span class="line">Vue.component(<span class="string">&#x27;VueSvg&#x27;</span>, VueSvg)</span><br></pre></td></tr></table></figure><h2 id="svg-文件准备"><a href="#svg-文件准备" class="headerlink" title="svg 文件准备"></a>svg 文件准备</h2><blockquote><p>在项目根目录 <code>src</code> 文件夹下创建 <code>svg</code> 文件夹</p></blockquote><ul><li>文件完整存放路径: <code>/src/svg/**.svg</code></li></ul><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此处的 SvgFileName 对应 `/src/svg/SvgFileName.svg` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vue-svg</span> <span class="attr">name</span>=<span class="string">&quot;SvgFileName&quot;</span> <span class="attr">scale</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性-props"><a href="#属性-props" class="headerlink" title="属性 (props)"></a>属性 (props)</h2><h3 id="name-文件名"><a href="#name-文件名" class="headerlink" title="name - 文件名"></a>name - 文件名</h3><blockquote><p>例如: name=”wx”, 那么在 <code>/src/svg/</code> 目录下, 就应当存在对应的 <code>wx.svg</code> 文件</p></blockquote><ul><li><code>type</code>: Number|String</li><li><code>required</code> : true</li></ul><h3 id="scale-缩放"><a href="#scale-缩放" class="headerlink" title="scale - 缩放"></a>scale - 缩放</h3><blockquote><p>缩放倍数不应该小于 0</p></blockquote><ul><li><code>type</code>: Number</li><li><code>required</code> : false</li><li><code>default</code> : 1</li></ul><h3 id="spin-旋转动画"><a href="#spin-旋转动画" class="headerlink" title="spin - 旋转动画"></a>spin - 旋转动画</h3><ul><li><code>type</code>: Boolean</li><li><code>required</code> : false</li><li><code>default</code> : false</li></ul><h3 id="flipHorizontal-水平翻转"><a href="#flipHorizontal-水平翻转" class="headerlink" title="flipHorizontal - 水平翻转"></a>flipHorizontal - 水平翻转</h3><ul><li><code>type</code>: Boolean</li><li><code>required</code> : false</li><li><code>default</code> : false</li></ul><h3 id="flipVertical-垂直翻转"><a href="#flipVertical-垂直翻转" class="headerlink" title="flipVertical - 垂直翻转"></a>flipVertical - 垂直翻转</h3><ul><li><code>type</code>: Boolean</li><li><code>required</code> : false</li><li><code>default</code> : false</li></ul><h3 id="width-宽度"><a href="#width-宽度" class="headerlink" title="width - 宽度"></a>width - 宽度</h3><ul><li><code>type</code>: Number</li><li><code>required</code> : false</li></ul><h3 id="height-高度"><a href="#height-高度" class="headerlink" title="height - 高度"></a>height - 高度</h3><ul><li><code>type</code>: Number</li><li><code>required</code> : false</li></ul>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> vuejs </tag>
            
            <tag> packages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
